{
  "smart_queries": [
    {
      "id": "top_performers",
      "question": "Find consultants with the highest client coverage and positive product ratings",
      "template_cypher_query": "MATCH (cons:CONSULTANT)-[emp:EMPLOYS]->(fc:FIELD_CONSULTANT)-[cov:COVERS]->(c:COMPANY) WHERE (c.region = '{region}' OR '{region}' IN c.region) AND cov.level_of_influence IN ['3', '4', 'High'] OPTIONAL MATCH (cons)-[rate:RATES]->(p:PRODUCT) WHERE rate.rankgroup = 'Positive' WITH cons, fc, c, COUNT(DISTINCT c) as company_count, COUNT(DISTINCT rate) as positive_ratings WHERE company_count >= 2 RETURN {nodes: COLLECT(DISTINCT cons) + COLLECT(DISTINCT fc) + COLLECT(DISTINCT c), relationships: COLLECT(DISTINCT {id: toString(id(emp)), source: cons.id, target: fc.id, type: 'custom', data: {relType: 'EMPLOYS'}}) + COLLECT(DISTINCT {id: toString(id(cov)), source: fc.id, target: c.id, type: 'custom', data: {relType: 'COVERS', level_of_influence: cov.level_of_influence}})} AS GraphData",
      "example_filters": {
        "region": "US",
        "influenceLevels": ["3", "4", "High"]
      },
      "expected_cypher_query": "MATCH (cons:CONSULTANT)-[emp:EMPLOYS]->(fc:FIELD_CONSULTANT)-[cov:COVERS]->(c:COMPANY) WHERE (c.region = 'US' OR 'US' IN c.region) AND cov.level_of_influence IN ['3', '4', 'High'] OPTIONAL MATCH (cons)-[rate:RATES]->(p:PRODUCT) WHERE rate.rankgroup = 'Positive' WITH cons, fc, c, COUNT(DISTINCT c) as company_count, COUNT(DISTINCT rate) as positive_ratings WHERE company_count >= 2 RETURN {nodes: COLLECT(DISTINCT cons) + COLLECT(DISTINCT fc) + COLLECT(DISTINCT c), relationships: COLLECT(DISTINCT {id: toString(id(emp)), source: cons.id, target: fc.id, type: 'custom', data: {relType: 'EMPLOYS'}}) + COLLECT(DISTINCT {id: toString(id(cov)), source: fc.id, target: c.id, type: 'custom', data: {relType: 'COVERS', level_of_influence: cov.level_of_influence}})} AS GraphData",
      "filter_list": ["region", "influenceLevels", "consultantIds"],
      "auto_mode": "standard",
      "mode_keywords": ["consultant", "performance", "coverage", "influence"]
    },
    {
      "id": "at_risk_relationships",
      "question": "Identify companies with 'At Risk' mandate status and their consultant coverage",
      "template_cypher_query": "MATCH (c:COMPANY)-[owns:OWNS]->(p:PRODUCT) WHERE (c.region = '{region}' OR '{region}' IN c.region) AND owns.mandate_status = 'At Risk' OPTIONAL MATCH (fc:FIELD_CONSULTANT)-[cov:COVERS]->(c) OPTIONAL MATCH (cons:CONSULTANT)-[emp:EMPLOYS]->(fc) RETURN {nodes: COLLECT(DISTINCT c) + COLLECT(DISTINCT p) + COLLECT(DISTINCT fc) + COLLECT(DISTINCT cons), relationships: COLLECT(DISTINCT {id: toString(id(owns)), source: c.id, target: p.id, type: 'custom', data: {relType: 'OWNS', mandate_status: owns.mandate_status}}) + COLLECT(DISTINCT {id: toString(id(cov)), source: fc.id, target: c.id, type: 'custom', data: {relType: 'COVERS', level_of_influence: cov.level_of_influence}}) + COLLECT(DISTINCT {id: toString(id(emp)), source: cons.id, target: fc.id, type: 'custom', data: {relType: 'EMPLOYS'}})} AS GraphData",
      "example_filters": {
        "region": "US",
        "mandateStatuses": ["At Risk"]
      },
      "expected_cypher_query": "MATCH (c:COMPANY)-[owns:OWNS]->(p:PRODUCT) WHERE (c.region = 'US' OR 'US' IN c.region) AND owns.mandate_status = 'At Risk' OPTIONAL MATCH (fc:FIELD_CONSULTANT)-[cov:COVERS]->(c) OPTIONAL MATCH (cons:CONSULTANT)-[emp:EMPLOYS]->(fc) RETURN {nodes: COLLECT(DISTINCT c) + COLLECT(DISTINCT p) + COLLECT(DISTINCT fc) + COLLECT(DISTINCT cons), relationships: COLLECT(DISTINCT {id: toString(id(owns)), source: c.id, target: p.id, type: 'custom', data: {relType: 'OWNS', mandate_status: owns.mandate_status}}) + COLLECT(DISTINCT {id: toString(id(cov)), source: fc.id, target: c.id, type: 'custom', data: {relType: 'COVERS', level_of_influence: cov.level_of_influence}}) + COLLECT(DISTINCT {id: toString(id(emp)), source: cons.id, target: fc.id, type: 'custom', data: {relType: 'EMPLOYS'}})} AS GraphData",
      "filter_list": ["region", "mandateStatuses", "clientIds"],
      "auto_mode": "standard",
      "mode_keywords": ["at risk", "mandate", "client", "relationship"]
    },
    {
      "id": "recommendation_opportunities",
      "question": "Show incumbent products with BI recommendations and potential for conversion",
      "template_cypher_query": "MATCH (c:COMPANY)-[owns:OWNS]->(ip:INCUMBENT_PRODUCT)-[rec:BI_RECOMMENDS]->(p:PRODUCT) WHERE (c.region = '{region}' OR '{region}' IN c.region) OPTIONAL MATCH (fc:FIELD_CONSULTANT)-[cov:COVERS]->(c) OPTIONAL MATCH (cons:CONSULTANT)-[emp:EMPLOYS]->(fc) RETURN {nodes: COLLECT(DISTINCT c) + COLLECT(DISTINCT ip) + COLLECT(DISTINCT p) + COLLECT(DISTINCT fc) + COLLECT(DISTINCT cons), relationships: COLLECT(DISTINCT {id: toString(id(owns)), source: c.id, target: ip.id, type: 'custom', data: {relType: 'OWNS', mandate_status: owns.mandate_status}}) + COLLECT(DISTINCT {id: toString(id(rec)), source: ip.id, target: p.id, type: 'custom', data: {relType: 'BI_RECOMMENDS'}}) + COLLECT(DISTINCT {id: toString(id(cov)), source: fc.id, target: c.id, type: 'custom', data: {relType: 'COVERS', level_of_influence: cov.level_of_influence}}) + COLLECT(DISTINCT {id: toString(id(emp)), source: cons.id, target: fc.id, type: 'custom', data: {relType: 'EMPLOYS'}})} AS GraphData",
      "example_filters": {
        "region": "US",
        "assetClasses": ["Fixed Income", "Equity"]
      },
      "expected_cypher_query": "MATCH (c:COMPANY)-[owns:OWNS]->(ip:INCUMBENT_PRODUCT)-[rec:BI_RECOMMENDS]->(p:PRODUCT) WHERE (c.region = 'US' OR 'US' IN c.region) OPTIONAL MATCH (fc:FIELD_CONSULTANT)-[cov:COVERS]->(c) OPTIONAL MATCH (cons:CONSULTANT)-[emp:EMPLOYS]->(fc) RETURN {nodes: COLLECT(DISTINCT c) + COLLECT(DISTINCT ip) + COLLECT(DISTINCT p) + COLLECT(DISTINCT fc) + COLLECT(DISTINCT cons), relationships: COLLECT(DISTINCT {id: toString(id(owns)), source: c.id, target: ip.id, type: 'custom', data: {relType: 'OWNS', mandate_status: owns.mandate_status}}) + COLLECT(DISTINCT {id: toString(id(rec)), source: ip.id, target: p.id, type: 'custom', data: {relType: 'BI_RECOMMENDS'}}) + COLLECT(DISTINCT {id: toString(id(cov)), source: fc.id, target: c.id, type: 'custom', data: {relType: 'COVERS', level_of_influence: cov.level_of_influence}}) + COLLECT(DISTINCT {id: toString(id(emp)), source: cons.id, target: fc.id, type: 'custom', data: {relType: 'EMPLOYS'}})} AS GraphData",
      "filter_list": ["region", "assetClasses", "productIds"],
      "auto_mode": "recommendations",
      "mode_keywords": ["recommendation", "incumbent", "BI", "conversion", "opportunity"]
    },
    {
      "id": "consultant_network_analysis",
      "question": "Analyze consultant networks and their relationship density",
      "template_cypher_query": "MATCH (cons:CONSULTANT)-[emp:EMPLOYS]->(fc:FIELD_CONSULTANT)-[cov:COVERS]->(c:COMPANY) WHERE (c.region = '{region}' OR '{region}' IN c.region) WITH cons, COUNT(DISTINCT fc) as field_consultants, COUNT(DISTINCT c) as companies WHERE field_consultants >= 2 OR companies >= 3 OPTIONAL MATCH (cons)-[rate:RATES]->(p:PRODUCT) RETURN {nodes: COLLECT(DISTINCT cons) + COLLECT(DISTINCT fc) + COLLECT(DISTINCT c) + COLLECT(DISTINCT p), relationships: COLLECT(DISTINCT {id: toString(id(emp)), source: cons.id, target: fc.id, type: 'custom', data: {relType: 'EMPLOYS'}}) + COLLECT(DISTINCT {id: toString(id(cov)), source: fc.id, target: c.id, type: 'custom', data: {relType: 'COVERS', level_of_influence: cov.level_of_influence}}) + COLLECT(DISTINCT {id: toString(id(rate)), source: cons.id, target: p.id, type: 'custom', data: {relType: 'RATES', rankgroup: rate.rankgroup}})} AS GraphData",
      "example_filters": {
        "region": "US",
        "consultantIds": ["John Smith", "Sarah Wilson"]
      },
      "expected_cypher_query": "MATCH (cons:CONSULTANT)-[emp:EMPLOYS]->(fc:FIELD_CONSULTANT)-[cov:COVERS]->(c:COMPANY) WHERE (c.region = 'US' OR 'US' IN c.region) AND cons.name IN ['John Smith', 'Sarah Wilson'] WITH cons, COUNT(DISTINCT fc) as field_consultants, COUNT(DISTINCT c) as companies WHERE field_consultants >= 2 OR companies >= 3 OPTIONAL MATCH (cons)-[rate:RATES]->(p:PRODUCT) RETURN {nodes: COLLECT(DISTINCT cons) + COLLECT(DISTINCT fc) + COLLECT(DISTINCT c) + COLLECT(DISTINCT p), relationships: COLLECT(DISTINCT {id: toString(id(emp)), source: cons.id, target: fc.id, type: 'custom', data: {relType: 'EMPLOYS'}}) + COLLECT(DISTINCT {id: toString(id(cov)), source: fc.id, target: c.id, type: 'custom', data: {relType: 'COVERS', level_of_influence: cov.level_of_influence}}) + COLLECT(DISTINCT {id: toString(id(rate)), source: cons.id, target: p.id, type: 'custom', data: {relType: 'RATES', rankgroup: rate.rankgroup}})} AS GraphData",
      "filter_list": ["region", "consultantIds", "influenceLevels"],
      "auto_mode": "standard",
      "mode_keywords": ["network", "analysis", "consultant", "density"]
    },
    {
      "id": "product_rating_insights",
      "question": "Find products with specific ratings and their consultant relationships",
      "template_cypher_query": "MATCH (cons:CONSULTANT)-[rate:RATES]->(p:PRODUCT) WHERE rate.rankgroup IN ['{rating}'] OPTIONAL MATCH (c:COMPANY)-[owns:OWNS]->(p) WHERE (c.region = '{region}' OR '{region}' IN c.region) OPTIONAL MATCH (fc:FIELD_CONSULTANT)-[cov:COVERS]->(c) OPTIONAL MATCH (cons2:CONSULTANT)-[emp:EMPLOYS]->(fc) RETURN {nodes: COLLECT(DISTINCT cons) + COLLECT(DISTINCT p) + COLLECT(DISTINCT c) + COLLECT(DISTINCT fc) + COLLECT(DISTINCT cons2), relationships: COLLECT(DISTINCT {id: toString(id(rate)), source: cons.id, target: p.id, type: 'custom', data: {relType: 'RATES', rankgroup: rate.rankgroup}}) + COLLECT(DISTINCT {id: toString(id(owns)), source: c.id, target: p.id, type: 'custom', data: {relType: 'OWNS', mandate_status: owns.mandate_status}}) + COLLECT(DISTINCT {id: toString(id(cov)), source: fc.id, target: c.id, type: 'custom', data: {relType: 'COVERS', level_of_influence: cov.level_of_influence}}) + COLLECT(DISTINCT {id: toString(id(emp)), source: cons2.id, target: fc.id, type: 'custom', data: {relType: 'EMPLOYS'}})} AS GraphData",
      "example_filters": {
        "region": "US",
        "ratings": ["Positive"]
      },
      "expected_cypher_query": "MATCH (cons:CONSULTANT)-[rate:RATES]->(p:PRODUCT) WHERE rate.rankgroup IN ['Positive'] OPTIONAL MATCH (c:COMPANY)-[owns:OWNS]->(p) WHERE (c.region = 'US' OR 'US' IN c.region) OPTIONAL MATCH (fc:FIELD_CONSULTANT)-[cov:COVERS]->(c) OPTIONAL MATCH (cons2:CONSULTANT)-[emp:EMPLOYS]->(fc) RETURN {nodes: COLLECT(DISTINCT cons) + COLLECT(DISTINCT p) + COLLECT(DISTINCT c) + COLLECT(DISTINCT fc) + COLLECT(DISTINCT cons2), relationships: COLLECT(DISTINCT {id: toString(id(rate)), source: cons.id, target: p.id, type: 'custom', data: {relType: 'RATES', rankgroup: rate.rankgroup}}) + COLLECT(DISTINCT {id: toString(id(owns)), source: c.id, target: p.id, type: 'custom', data: {relType: 'OWNS', mandate_status: owns.mandate_status}}) + COLLECT(DISTINCT {id: toString(id(cov)), source: fc.id, target: c.id, type: 'custom', data: {relType: 'COVERS', level_of_influence: cov.level_of_influence}}) + COLLECT(DISTINCT {id: toString(id(emp)), source: cons2.id, target: fc.id, type: 'custom', data: {relType: 'EMPLOYS'}})} AS GraphData",
      "filter_list": ["region", "ratings", "productIds"],
      "auto_mode": "standard",
      "mode_keywords": ["rating", "product", "consultant", "insight"]
    }
  ],
  "metadata": {
    "version": "1.0",
    "last_updated": "2025-01-01",
    "total_queries": 5,
    "supported_modes": ["standard", "recommendations"],
    "available_filters": [
      "region",
      "consultantIds", 
      "fieldConsultantIds",
      "clientIds",
      "productIds",
      "incumbentProductIds",
      "assetClasses",
      "mandateStatuses",
      "influenceLevels",
      "ratings",
      "channels",
      "sales_regions"
    ]
  }
}