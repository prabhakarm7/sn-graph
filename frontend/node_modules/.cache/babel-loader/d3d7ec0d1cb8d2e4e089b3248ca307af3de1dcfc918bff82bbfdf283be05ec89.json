{"ast":null,"code":"var _s = $RefreshSig$();\n// hooks/useGraphData.ts - COMPLETE with Recommendations Mode Support\nimport { useState, useEffect, useCallback } from 'react';\nimport ApiNeo4jService from '../services/ApiNeo4jService';\nimport { transformHierarchicalOptions } from '../types/FitlerTypes';\nimport dagre from 'dagre';\n// Layout configuration\nconst NODE_W = 240;\nconst NODE_H = 120;\nconst layoutWithDagre = (nodes, edges) => {\n  const g = new dagre.graphlib.Graph();\n  g.setDefaultEdgeLabel(() => ({}));\n  g.setGraph({\n    rankdir: 'TB',\n    nodesep: 120,\n    ranksep: 160\n  });\n  nodes.forEach(n => g.setNode(n.id, {\n    width: NODE_W,\n    height: NODE_H\n  }));\n  edges.forEach(e => g.setEdge(e.source, e.target));\n  dagre.layout(g);\n  const layoutedNodes = nodes.map(n => {\n    const pos = g.node(n.id);\n    return {\n      ...n,\n      position: {\n        x: pos.x - NODE_W / 2,\n        y: pos.y - NODE_H / 2\n      }\n    };\n  });\n  return {\n    nodes: layoutedNodes,\n    edges\n  };\n};\n\n// Transform Neo4j data to ReactFlow format WITH PROPER RATINGS COLLECTION\nconst transformNeo4jToReactFlow = data => {\n  console.log('🔄 TRANSFORMATION: Starting Neo4j to ReactFlow with ratings collection:', {\n    inputNodes: data.nodes.length,\n    inputRelationships: data.relationships.length\n  });\n\n  // Step 1: Find all RATES relationships\n  const ratesRelationships = data.relationships.filter(rel => rel.type === 'RATES');\n  console.log(`🎯 Found ${ratesRelationships.length} RATES relationships`);\n\n  // Step 2: Create a map to collect ratings for each product\n  const productRatingsMap = new Map();\n\n  // Helper function to ensure rankgroup is a valid RankGroup\n  const normalizeRankGroup = value => {\n    const normalized = value === null || value === void 0 ? void 0 : value.toLowerCase();\n    switch (normalized) {\n      case 'positive':\n        return 'Positive';\n      case 'negative':\n        return 'Negative';\n      case 'introduced':\n        return 'Introduced';\n      case 'neutral':\n        return 'Neutral';\n      default:\n        return 'Neutral';\n      // Default fallback\n    }\n  };\n  ratesRelationships.forEach(rel => {\n    const consultantNode = data.nodes.find(n => n.id === rel.start_node_id);\n    const productNode = data.nodes.find(n => n.id === rel.end_node_id);\n    if (consultantNode && productNode) {\n      const consultantName = consultantNode.properties.name || consultantNode.properties.label || consultantNode.id;\n      const rawRatingValue = rel.properties.rankgroup || rel.properties.rating || rel.properties.rank || 'Neutral';\n      const normalizedRankGroup = normalizeRankGroup(rawRatingValue);\n      const rating = {\n        consultant: consultantName,\n        rankgroup: normalizedRankGroup,\n        rating: rawRatingValue\n      };\n      if (!productRatingsMap.has(productNode.id)) {\n        productRatingsMap.set(productNode.id, []);\n      }\n      productRatingsMap.get(productNode.id).push(rating);\n      console.log(`📊 Collected rating: ${consultantName} rated ${productNode.properties.name || productNode.id} as \"${normalizedRankGroup}\"`);\n    }\n  });\n  console.log(`📈 Product ratings collected for ${productRatingsMap.size} products`);\n\n  // Step 3: Transform nodes and inject ratings into product nodes\n  const nodes = data.nodes.map(neo4jNode => {\n    const nodeData = {\n      ...neo4jNode.properties,\n      id: neo4jNode.properties.id || neo4jNode.id,\n      name: neo4jNode.properties.name || neo4jNode.properties.label || neo4jNode.id,\n      label: neo4jNode.properties.label || neo4jNode.properties.name || neo4jNode.id\n    };\n\n    // Inject collected ratings into product nodes\n    if (neo4jNode.labels.includes('PRODUCT') || neo4jNode.labels.includes('INCUMBENT_PRODUCT')) {\n      const collectedRatings = productRatingsMap.get(neo4jNode.id) || [];\n      nodeData.ratings = collectedRatings;\n      console.log(`🦄 Product \"${nodeData.name}\" (${neo4jNode.id}) now has ${collectedRatings.length} ratings`);\n    }\n\n    // Add parent consultant ID for field consultants\n    if (neo4jNode.labels.includes('FIELD_CONSULTANT') && !nodeData.parentConsultantId) {\n      let parentId = '';\n      const nodeId = neo4jNode.id || '';\n      if (nodeId.includes('_F')) {\n        parentId = nodeId.replace('_F', '_C');\n      } else if (nodeData.pca) {\n        parentId = nodeData.pca;\n      }\n      if (parentId) {\n        nodeData.parentConsultantId = parentId;\n        console.log(`🔗 Added parent consultant ${parentId} to field consultant ${nodeId}`);\n      }\n    }\n    return {\n      id: neo4jNode.id,\n      type: neo4jNode.labels[0],\n      data: nodeData,\n      position: {\n        x: 0,\n        y: 0\n      }\n    };\n  });\n\n  // Step 4: Transform relationships (EXCLUDE RATES edges - they're embedded in product data)\n  const edges = data.relationships.filter(rel => rel.type !== 'RATES').map(rel => {\n    const edgeData = {\n      relType: rel.type,\n      ...rel.properties\n    };\n\n    // Normalize property names for better compatibility\n    if (rel.properties.mandate_status && !edgeData.mandateStatus) {\n      edgeData.mandateStatus = rel.properties.mandate_status;\n    }\n    if (rel.properties.level_of_influence && !edgeData.levelOfInfluence) {\n      edgeData.levelOfInfluence = rel.properties.level_of_influence;\n    }\n    if (rel.properties.rankgroup && !edgeData.rating) {\n      edgeData.rating = rel.properties.rankgroup;\n    }\n\n    // Add source and target IDs for insights panel\n    edgeData.sourceId = rel.start_node_id;\n    edgeData.targetId = rel.end_node_id;\n    return {\n      id: rel.id,\n      source: rel.start_node_id,\n      target: rel.end_node_id,\n      type: 'custom',\n      data: edgeData\n    };\n  });\n\n  // Final verification and logging\n  const productNodes = nodes.filter(n => n.type === 'PRODUCT' || n.type === 'INCUMBENT_PRODUCT');\n  const productsWithRatings = productNodes.filter(n => n.data.ratings && n.data.ratings.length > 0);\n  console.log(`✅ TRANSFORMATION COMPLETE:`, {\n    totalProducts: productNodes.length,\n    productsWithRatings: productsWithRatings.length,\n    ratesProcessed: ratesRelationships.length,\n    outputNodes: nodes.length,\n    outputEdges: edges.length,\n    nodeTypes: Array.from(new Set(nodes.map(n => n.type).filter(Boolean))),\n    edgeTypes: Array.from(new Set(edges.map(e => {\n      var _e$data;\n      return (_e$data = e.data) === null || _e$data === void 0 ? void 0 : _e$data.relType;\n    }).filter(Boolean)))\n  });\n  return {\n    nodes,\n    edges\n  };\n};\nexport const useGraphData = () => {\n  _s();\n  var _regionData$metadata2, _regionData$metadata4, _regionData$metadata5, _regionData$metadata6, _regionData$metadata7;\n  // Loading states\n  const [initialLoading, setInitialLoading] = useState(true);\n  const [filterLoading, setFilterLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Data states\n  const [currentRegions, setCurrentRegions] = useState(['NAI']);\n  const [regionData, setRegionData] = useState(null);\n  const [filterOptions, setFilterOptions] = useState(null);\n\n  // Graph data state with debug tracking\n  const [graphData, setGraphDataInternal] = useState({\n    nodes: [],\n    edges: []\n  });\n  const [updateCounter, setUpdateCounter] = useState(0);\n  const setGraphData = useCallback(newData => {\n    console.log('🚀 HOOK: setGraphData called with:', {\n      nodes: newData.nodes.length,\n      edges: newData.edges.length,\n      timestamp: Date.now(),\n      updateCounter: updateCounter + 1\n    });\n\n    // Debug: Check products with ratings\n    const products = newData.nodes.filter(n => n.type === 'PRODUCT' || n.type === 'INCUMBENT_PRODUCT');\n    const productsWithRatings = products.filter(p => p.data.ratings && p.data.ratings.length > 0);\n    console.log(`📊 HOOK DEBUG: ${products.length} products, ${productsWithRatings.length} with ratings`);\n    const forceUpdate = {\n      nodes: newData.nodes,\n      edges: newData.edges,\n      _timestamp: Date.now(),\n      _updateId: Math.random().toString(36)\n    };\n    setGraphDataInternal(forceUpdate);\n    setUpdateCounter(prev => prev + 1);\n  }, [updateCounter]);\n\n  // Current filter state\n  const [currentFilters, setCurrentFilters] = useState({\n    regions: ['NAI'],\n    nodeTypes: ['CONSULTANT', 'FIELD_CONSULTANT', 'COMPANY', 'PRODUCT', 'INCUMBENT_PRODUCT'],\n    showInactive: true,\n    sales_regions: [],\n    channels: [],\n    ratings: [],\n    influenceLevels: [],\n    assetClasses: [],\n    consultantIds: [],\n    fieldConsultantIds: [],\n    clientIds: [],\n    productIds: [],\n    incumbentProductIds: [],\n    pcaIds: [],\n    acaIds: [],\n    mandateStatuses: []\n  });\n  const apiService = ApiNeo4jService.getInstance();\n\n  /**\n   * Load standard region data using hierarchical complete workflow\n   */\n  const loadRegionData = useCallback(async regions => {\n    console.log(`🚀 Loading STANDARD region data: ${regions.join(', ')}`);\n    setInitialLoading(true);\n    setError(null);\n    try {\n      // Test API connection first\n      const isConnected = await apiService.testConnection();\n      if (!isConnected) {\n        throw new Error('Cannot connect to API backend. Make sure the FastAPI server is running on http://localhost:8000');\n      }\n      const response = await fetch(`${apiService.baseUrl}/api/v1/hierarchical/region/${regions[0]}/complete`);\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      const hierarchicalData = await response.json();\n      if (!hierarchicalData.success || !hierarchicalData.data) {\n        throw new Error(hierarchicalData.error || 'Failed to get hierarchical data');\n      }\n      console.log(`📊 Standard data loaded:`, {\n        totalNodes: hierarchicalData.data.graph_data.nodes.length,\n        totalRelationships: hierarchicalData.data.graph_data.relationships.length,\n        filterOptionsCount: hierarchicalData.data.statistics.total_filter_options\n      });\n\n      // Transform to expected format\n      const data = {\n        nodes: hierarchicalData.data.graph_data.nodes,\n        relationships: hierarchicalData.data.graph_data.relationships,\n        metadata: {\n          region: hierarchicalData.data.region,\n          statistics: hierarchicalData.data.statistics,\n          source: 'hierarchical_complete_workflow',\n          mode: 'standard'\n        }\n      };\n      setRegionData(data);\n      setCurrentRegions(regions);\n      const transformedOptions = transformHierarchicalOptions(hierarchicalData.data.filter_options || {});\n      setFilterOptions(transformedOptions);\n\n      // Apply default filters\n      const defaultFilters = {\n        regions,\n        nodeTypes: ['CONSULTANT', 'FIELD_CONSULTANT', 'COMPANY', 'PRODUCT'],\n        showInactive: true,\n        sales_regions: [],\n        channels: [],\n        ratings: [],\n        influenceLevels: [],\n        assetClasses: [],\n        consultantIds: [],\n        fieldConsultantIds: [],\n        clientIds: [],\n        productIds: [],\n        incumbentProductIds: [],\n        pcaIds: [],\n        acaIds: [],\n        mandateStatuses: []\n      };\n      console.log(`🔧 Applying default filters to standard data`);\n      const filteredData = await apiService.applyFiltersToData(data, defaultFilters);\n      const reactFlowData = transformNeo4jToReactFlow(filteredData);\n      const layoutedData = layoutWithDagre(reactFlowData.nodes, reactFlowData.edges);\n      console.log('🎯 Setting standard graph data:', {\n        nodes: layoutedData.nodes.length,\n        edges: layoutedData.edges.length,\n        timestamp: Date.now()\n      });\n      const newGraphData = {\n        nodes: layoutedData.nodes.map(n => ({\n          ...n\n        })),\n        edges: layoutedData.edges.map(e => ({\n          ...e\n        }))\n      };\n      setGraphData(newGraphData);\n      setCurrentFilters(defaultFilters);\n      console.log('✅ Standard region data loaded successfully');\n    } catch (err) {\n      console.error('❌ Error loading standard region data:', err);\n      setError(err instanceof Error ? err.message : 'Failed to load region data');\n      setGraphData({\n        nodes: [],\n        edges: []\n      });\n    } finally {\n      setInitialLoading(false);\n    }\n  }, [apiService, setGraphData]);\n\n  /**\n   * 🆕 NEW: Load recommendations data for a specific region\n   */\n  const loadRecommendationsData = useCallback(async regions => {\n    console.log(`🎯 Loading RECOMMENDATIONS data for: ${regions.join(', ')}`);\n    setInitialLoading(true);\n    setError(null);\n    try {\n      // Test API connection first\n      const isConnected = await apiService.testConnection();\n      if (!isConnected) {\n        throw new Error('Cannot connect to API backend. Make sure the FastAPI server is running on http://localhost:8000');\n      }\n\n      // 🆕 NEW: Call recommendations endpoint\n      const response = await fetch(`${apiService.baseUrl}/api/v1/hierarchical/region/${regions[0]}/recommendations`);\n      if (!response.ok) {\n        // If recommendations endpoint doesn't exist yet, fall back to standard with message\n        if (response.status === 404) {\n          console.warn('⚠️ Recommendations endpoint not yet implemented, falling back to standard data');\n          setError('Recommendations endpoint not yet implemented. Using standard data for now.');\n          await loadRegionData(regions);\n          return;\n        }\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      const hierarchicalData = await response.json();\n      if (!hierarchicalData.success || !hierarchicalData.data) {\n        throw new Error(hierarchicalData.error || 'Failed to get recommendations data');\n      }\n      console.log(`📊 Recommendations data loaded:`, {\n        totalNodes: hierarchicalData.data.graph_data.nodes.length,\n        totalRelationships: hierarchicalData.data.graph_data.relationships.length,\n        incumbentProducts: hierarchicalData.data.graph_data.nodes.filter(n => {\n          var _n$labels;\n          return (_n$labels = n.labels) === null || _n$labels === void 0 ? void 0 : _n$labels.includes('INCUMBENT_PRODUCT');\n        }).length,\n        biRecommends: hierarchicalData.data.graph_data.relationships.filter(r => r.type === 'BI_RECOMMENDS').length\n      });\n\n      // Transform to expected format\n      const data = {\n        nodes: hierarchicalData.data.graph_data.nodes,\n        relationships: hierarchicalData.data.graph_data.relationships,\n        metadata: {\n          region: hierarchicalData.data.region,\n          statistics: hierarchicalData.data.statistics,\n          source: 'hierarchical_recommendations',\n          mode: 'recommendations'\n        }\n      };\n      setRegionData(data);\n      setCurrentRegions(regions);\n      const transformedOptions = transformHierarchicalOptions(hierarchicalData.data.filter_options || {});\n      setFilterOptions(transformedOptions);\n\n      // Apply default filters (including INCUMBENT_PRODUCT)\n      const defaultFilters = {\n        regions,\n        nodeTypes: ['CONSULTANT', 'FIELD_CONSULTANT', 'COMPANY', 'PRODUCT', 'INCUMBENT_PRODUCT'],\n        showInactive: true,\n        sales_regions: [],\n        channels: [],\n        ratings: [],\n        influenceLevels: [],\n        assetClasses: [],\n        consultantIds: [],\n        fieldConsultantIds: [],\n        clientIds: [],\n        productIds: [],\n        incumbentProductIds: [],\n        pcaIds: [],\n        acaIds: [],\n        mandateStatuses: []\n      };\n      console.log(`🔧 Applying default filters to recommendations data`);\n      const filteredData = await apiService.applyFiltersToData(data, defaultFilters);\n      const reactFlowData = transformNeo4jToReactFlow(filteredData);\n      const layoutedData = layoutWithDagre(reactFlowData.nodes, reactFlowData.edges);\n      console.log('🎯 Setting recommendations graph data:', {\n        nodes: layoutedData.nodes.length,\n        edges: layoutedData.edges.length,\n        incumbentProducts: layoutedData.nodes.filter(n => n.type === 'INCUMBENT_PRODUCT').length,\n        biRecommends: layoutedData.edges.filter(e => {\n          var _e$data2;\n          return ((_e$data2 = e.data) === null || _e$data2 === void 0 ? void 0 : _e$data2.relType) === 'BI_RECOMMENDS';\n        }).length,\n        timestamp: Date.now()\n      });\n      const newGraphData = {\n        nodes: layoutedData.nodes.map(n => ({\n          ...n\n        })),\n        edges: layoutedData.edges.map(e => ({\n          ...e\n        }))\n      };\n      setGraphData(newGraphData);\n      setCurrentFilters(defaultFilters);\n      console.log('✅ Recommendations data loaded successfully');\n    } catch (err) {\n      console.error('❌ Error loading recommendations data:', err);\n      setError(err instanceof Error ? err.message : 'Failed to load recommendations data');\n      setGraphData({\n        nodes: [],\n        edges: []\n      });\n    } finally {\n      setInitialLoading(false);\n    }\n  }, [apiService, setGraphData, loadRegionData]);\n\n  /**\n   * 🆕 NEW: Switch between standard and recommendations mode\n   */\n  const switchMode = useCallback(async (mode, regions = currentRegions) => {\n    console.log(`🔄 Switching to ${mode} mode for regions: ${regions.join(', ')}`);\n    if (mode === 'recommendations') {\n      await loadRecommendationsData(regions);\n    } else {\n      await loadRegionData(regions);\n    }\n  }, [currentRegions, loadRecommendationsData, loadRegionData]);\n\n  /**\n   * Handle region changes using hierarchical endpoint\n   */\n  const changeRegions = useCallback(async newRegions => {\n    if (JSON.stringify(newRegions.sort()) === JSON.stringify(currentRegions.sort())) {\n      return; // No change\n    }\n    console.log(`🔄 Changing regions: ${currentRegions} → ${newRegions}`);\n\n    // Clear existing graph data immediately\n    setGraphData({\n      nodes: [],\n      edges: []\n    });\n    setInitialLoading(true);\n    setError(null);\n    try {\n      var _regionData$metadata;\n      // Determine current mode and load appropriate data\n      const currentMode = (regionData === null || regionData === void 0 ? void 0 : (_regionData$metadata = regionData.metadata) === null || _regionData$metadata === void 0 ? void 0 : _regionData$metadata.mode) || 'standard';\n      if (currentMode === 'recommendations') {\n        await loadRecommendationsData(newRegions);\n      } else {\n        await loadRegionData(newRegions);\n      }\n      console.log('✅ Region change completed successfully');\n    } catch (err) {\n      console.error('❌ Error changing regions:', err);\n      setError(err instanceof Error ? err.message : 'Failed to change regions');\n      setGraphData({\n        nodes: [],\n        edges: []\n      });\n    }\n  }, [currentRegions, regionData === null || regionData === void 0 ? void 0 : (_regionData$metadata2 = regionData.metadata) === null || _regionData$metadata2 === void 0 ? void 0 : _regionData$metadata2.mode, loadRecommendationsData, loadRegionData, setGraphData]);\n\n  /**\n   * Apply filters to current region data\n   */\n  const applyFilters = useCallback(async filters => {\n    console.log('🔧 applyFilters() called with filters:', filters);\n    if (initialLoading || filterLoading) {\n      console.warn('⚠️ Cannot apply filters while loading');\n      return;\n    }\n    if (!regionData) {\n      console.warn('⚠️ No region data available to filter');\n      setError('No region data available. Please wait for data to load.');\n      return;\n    }\n    setFilterLoading(true);\n    setError(null);\n    try {\n      const newFilters = {\n        regions: currentRegions,\n        nodeTypes: ['CONSULTANT', 'FIELD_CONSULTANT', 'COMPANY', 'PRODUCT', 'INCUMBENT_PRODUCT'],\n        showInactive: true,\n        sales_regions: [],\n        channels: [],\n        ratings: [],\n        influenceLevels: [],\n        assetClasses: [],\n        consultantIds: [],\n        fieldConsultantIds: [],\n        clientIds: [],\n        productIds: [],\n        incumbentProductIds: [],\n        pcaIds: [],\n        acaIds: [],\n        mandateStatuses: [],\n        ...filters\n      };\n      console.log('📋 Final filters being applied:', newFilters);\n      const filteredData = await apiService.applyFiltersToData(regionData, newFilters);\n      const reactFlowData = transformNeo4jToReactFlow(filteredData);\n      const layoutedData = layoutWithDagre(reactFlowData.nodes, reactFlowData.edges);\n      setCurrentFilters(newFilters);\n      console.log('🎯 Setting graph data from applyFilters:', {\n        nodes: layoutedData.nodes.length,\n        edges: layoutedData.edges.length,\n        timestamp: Date.now()\n      });\n      const newGraphData = {\n        nodes: layoutedData.nodes.map(n => ({\n          ...n\n        })),\n        edges: layoutedData.edges.map(e => ({\n          ...e\n        }))\n      };\n      setGraphData(newGraphData);\n      console.log('✅ Filters applied successfully');\n    } catch (err) {\n      console.error('❌ Error applying filters:', err);\n      setError(err instanceof Error ? err.message : 'Failed to apply filters');\n    } finally {\n      setFilterLoading(false);\n    }\n  }, [regionData, currentRegions, initialLoading, filterLoading, apiService, setGraphData]);\n\n  /**\n   * Reset filters to defaults\n   */\n  const resetFilters = useCallback(() => {\n    var _regionData$metadata3;\n    const currentMode = (regionData === null || regionData === void 0 ? void 0 : (_regionData$metadata3 = regionData.metadata) === null || _regionData$metadata3 === void 0 ? void 0 : _regionData$metadata3.mode) || 'standard';\n\n    // 🎯 FIXED: Ensure PRODUCT is always included in both modes\n    const getDefaultNodeTypes = () => {\n      if (currentMode === 'recommendations') {\n        return ['CONSULTANT', 'FIELD_CONSULTANT', 'COMPANY', 'PRODUCT', 'INCUMBENT_PRODUCT'];\n      } else {\n        return ['CONSULTANT', 'FIELD_CONSULTANT', 'COMPANY', 'PRODUCT'];\n      }\n    };\n    const defaultFilters = {\n      nodeTypes: getDefaultNodeTypes(),\n      // 🎯 FIXED: Use function instead of inline logic\n      showInactive: true,\n      sales_regions: [],\n      channels: [],\n      ratings: [],\n      influenceLevels: [],\n      assetClasses: [],\n      consultantIds: [],\n      fieldConsultantIds: [],\n      clientIds: [],\n      productIds: [],\n      incumbentProductIds: [],\n      pcaIds: [],\n      acaIds: [],\n      mandateStatuses: []\n    };\n    console.log(`🔄 Resetting filters for ${currentMode} mode with nodeTypes:`, defaultFilters.nodeTypes);\n    applyFilters(defaultFilters);\n  }, [applyFilters, regionData === null || regionData === void 0 ? void 0 : (_regionData$metadata4 = regionData.metadata) === null || _regionData$metadata4 === void 0 ? void 0 : _regionData$metadata4.mode]);\n\n  /**\n   * Get available regions\n   */\n  const getAvailableRegions = useCallback(() => {\n    return ['NAI', 'EMEA', 'APAC'];\n  }, []);\n\n  // Initial load on mount\n  const [hasInitialized, setHasInitialized] = useState(false);\n  useEffect(() => {\n    if (!hasInitialized) {\n      console.log('🚀 Initial mount - loading NAI data using standard workflow');\n      setHasInitialized(true);\n      loadRegionData(['NAI']);\n    }\n  }, [hasInitialized, loadRegionData]);\n  return {\n    // Data\n    graphData,\n    filterOptions,\n    currentFilters,\n    currentRegions,\n    updateCounter,\n    // Loading states\n    initialLoading,\n    filterLoading,\n    error,\n    // Actions\n    changeRegions,\n    applyFilters,\n    resetFilters,\n    getAvailableRegions,\n    // 🆕 NEW: Recommendations mode actions\n    loadRecommendationsData,\n    switchMode,\n    // Computed properties\n    hasData: graphData.nodes.length > 0,\n    nodeCount: graphData.nodes.length,\n    edgeCount: graphData.edges.length,\n    // 🆕 NEW: Mode detection\n    isRecommendationsMode: (regionData === null || regionData === void 0 ? void 0 : (_regionData$metadata5 = regionData.metadata) === null || _regionData$metadata5 === void 0 ? void 0 : _regionData$metadata5.mode) === 'recommendations',\n    dataSource: (regionData === null || regionData === void 0 ? void 0 : (_regionData$metadata6 = regionData.metadata) === null || _regionData$metadata6 === void 0 ? void 0 : _regionData$metadata6.source) || 'unknown',\n    currentMode: (regionData === null || regionData === void 0 ? void 0 : (_regionData$metadata7 = regionData.metadata) === null || _regionData$metadata7 === void 0 ? void 0 : _regionData$metadata7.mode) || 'standard'\n  };\n};\n_s(useGraphData, \"bMXpdz0SXGb3HjzG6BHs0LReeys=\");","map":{"version":3,"names":["useState","useEffect","useCallback","ApiNeo4jService","transformHierarchicalOptions","dagre","NODE_W","NODE_H","layoutWithDagre","nodes","edges","g","graphlib","Graph","setDefaultEdgeLabel","setGraph","rankdir","nodesep","ranksep","forEach","n","setNode","id","width","height","e","setEdge","source","target","layout","layoutedNodes","map","pos","node","position","x","y","transformNeo4jToReactFlow","data","console","log","inputNodes","length","inputRelationships","relationships","ratesRelationships","filter","rel","type","productRatingsMap","Map","normalizeRankGroup","value","normalized","toLowerCase","consultantNode","find","start_node_id","productNode","end_node_id","consultantName","properties","name","label","rawRatingValue","rankgroup","rating","rank","normalizedRankGroup","consultant","has","set","get","push","size","neo4jNode","nodeData","labels","includes","collectedRatings","ratings","parentConsultantId","parentId","nodeId","replace","pca","edgeData","relType","mandate_status","mandateStatus","level_of_influence","levelOfInfluence","sourceId","targetId","productNodes","productsWithRatings","totalProducts","ratesProcessed","outputNodes","outputEdges","nodeTypes","Array","from","Set","Boolean","edgeTypes","_e$data","useGraphData","_s","_regionData$metadata2","_regionData$metadata4","_regionData$metadata5","_regionData$metadata6","_regionData$metadata7","initialLoading","setInitialLoading","filterLoading","setFilterLoading","error","setError","currentRegions","setCurrentRegions","regionData","setRegionData","filterOptions","setFilterOptions","graphData","setGraphDataInternal","updateCounter","setUpdateCounter","setGraphData","newData","timestamp","Date","now","products","p","forceUpdate","_timestamp","_updateId","Math","random","toString","prev","currentFilters","setCurrentFilters","regions","showInactive","sales_regions","channels","influenceLevels","assetClasses","consultantIds","fieldConsultantIds","clientIds","productIds","incumbentProductIds","pcaIds","acaIds","mandateStatuses","apiService","getInstance","loadRegionData","join","isConnected","testConnection","Error","response","fetch","baseUrl","ok","status","statusText","hierarchicalData","json","success","totalNodes","graph_data","totalRelationships","filterOptionsCount","statistics","total_filter_options","metadata","region","mode","transformedOptions","filter_options","defaultFilters","filteredData","applyFiltersToData","reactFlowData","layoutedData","newGraphData","err","message","loadRecommendationsData","warn","incumbentProducts","_n$labels","biRecommends","r","_e$data2","switchMode","changeRegions","newRegions","JSON","stringify","sort","_regionData$metadata","currentMode","applyFilters","filters","newFilters","resetFilters","_regionData$metadata3","getDefaultNodeTypes","getAvailableRegions","hasInitialized","setHasInitialized","hasData","nodeCount","edgeCount","isRecommendationsMode","dataSource"],"sources":["/Users/prabhakarmudliyar/text-to-cypher-mui/frontend/src/components/hooks/useGraphData.ts"],"sourcesContent":["// hooks/useGraphData.ts - COMPLETE with Recommendations Mode Support\nimport { useState, useEffect, useCallback } from 'react';\nimport { Node, Edge } from 'reactflow';\nimport ApiNeo4jService from '../services/ApiNeo4jService';\nimport { FilterCriteria, FilterOptions, transformHierarchicalOptions } from '../types/FitlerTypes';\nimport { AppNodeData, EdgeData } from '../types/GraphTypes';\nimport dagre from 'dagre';\n\ninterface Neo4jNode {\n  id: string;\n  labels: string[];\n  properties: Record<string, any>;\n}\n\ninterface Neo4jRelationship {\n  id: string;\n  type: string;\n  start_node_id: string;\n  end_node_id: string;\n  properties: Record<string, any>;\n}\n\ninterface Neo4jResult {\n  nodes: Neo4jNode[];\n  relationships: Neo4jRelationship[];\n  metadata?: Record<string, any>;\n}\n\ninterface HierarchicalResponse {\n  success: boolean;\n  data?: {\n    region: string;\n    graph_data: {\n      nodes: Neo4jNode[];\n      relationships: Neo4jRelationship[];\n    };\n    filter_options: Record<string, any>;\n    statistics: {\n      total_nodes: number;\n      total_relationships: number;\n      total_filter_options: number;\n    };\n  };\n  message?: string;\n  error?: string;\n}\n\n// Layout configuration\nconst NODE_W = 240;\nconst NODE_H = 120;\n\nconst layoutWithDagre = (nodes: Node[], edges: Edge[]) => {\n  const g = new dagre.graphlib.Graph();\n  g.setDefaultEdgeLabel(() => ({}));\n  g.setGraph({ rankdir: 'TB', nodesep: 120, ranksep: 160 });\n\n  nodes.forEach((n) => g.setNode(n.id, { width: NODE_W, height: NODE_H }));\n  edges.forEach((e) => g.setEdge(e.source, e.target));\n  dagre.layout(g);\n\n  const layoutedNodes = nodes.map((n) => {\n    const pos = g.node(n.id);\n    return { ...n, position: { x: pos.x - NODE_W / 2, y: pos.y - NODE_H / 2 } };\n  });\n\n  return { nodes: layoutedNodes, edges };\n};\n\n// Transform Neo4j data to ReactFlow format WITH PROPER RATINGS COLLECTION\nconst transformNeo4jToReactFlow = (data: Neo4jResult): { nodes: Node<AppNodeData>[], edges: Edge<EdgeData>[] } => {\n  console.log('🔄 TRANSFORMATION: Starting Neo4j to ReactFlow with ratings collection:', {\n    inputNodes: data.nodes.length,\n    inputRelationships: data.relationships.length\n  });\n  \n  // Step 1: Find all RATES relationships\n  const ratesRelationships = data.relationships.filter(rel => rel.type === 'RATES');\n  console.log(`🎯 Found ${ratesRelationships.length} RATES relationships`);\n  \n  // Step 2: Create a map to collect ratings for each product\n  const productRatingsMap = new Map<string, Array<{consultant: string, rankgroup: 'Positive' | 'Negative' | 'Introduced' | 'Neutral', rating?: string}>>();\n  \n  // Helper function to ensure rankgroup is a valid RankGroup\n  const normalizeRankGroup = (value: string): 'Positive' | 'Negative' | 'Introduced' | 'Neutral' => {\n    const normalized = value?.toLowerCase();\n    switch (normalized) {\n      case 'positive': return 'Positive';\n      case 'negative': return 'Negative';\n      case 'introduced': return 'Introduced';\n      case 'neutral': return 'Neutral';\n      default: return 'Neutral'; // Default fallback\n    }\n  };\n  \n  ratesRelationships.forEach(rel => {\n    const consultantNode = data.nodes.find(n => n.id === rel.start_node_id);\n    const productNode = data.nodes.find(n => n.id === rel.end_node_id);\n    \n    if (consultantNode && productNode) {\n      const consultantName = consultantNode.properties.name || consultantNode.properties.label || consultantNode.id;\n      const rawRatingValue = rel.properties.rankgroup || rel.properties.rating || rel.properties.rank || 'Neutral';\n      const normalizedRankGroup = normalizeRankGroup(rawRatingValue);\n      \n      const rating = {\n        consultant: consultantName,\n        rankgroup: normalizedRankGroup,\n        rating: rawRatingValue\n      };\n      \n      if (!productRatingsMap.has(productNode.id)) {\n        productRatingsMap.set(productNode.id, []);\n      }\n      productRatingsMap.get(productNode.id)!.push(rating);\n      \n      console.log(`📊 Collected rating: ${consultantName} rated ${productNode.properties.name || productNode.id} as \"${normalizedRankGroup}\"`);\n    }\n  });\n  \n  console.log(`📈 Product ratings collected for ${productRatingsMap.size} products`);\n  \n  // Step 3: Transform nodes and inject ratings into product nodes\n  const nodes: Node<AppNodeData>[] = data.nodes.map(neo4jNode => {\n    const nodeData: AppNodeData = {\n      ...neo4jNode.properties,\n      id: neo4jNode.properties.id || neo4jNode.id,\n      name: neo4jNode.properties.name || neo4jNode.properties.label || neo4jNode.id,\n      label: neo4jNode.properties.label || neo4jNode.properties.name || neo4jNode.id\n    };\n    \n    // Inject collected ratings into product nodes\n    if (neo4jNode.labels.includes('PRODUCT') || neo4jNode.labels.includes('INCUMBENT_PRODUCT')) {\n      const collectedRatings = productRatingsMap.get(neo4jNode.id) || [];\n      nodeData.ratings = collectedRatings;\n      \n      console.log(`🦄 Product \"${nodeData.name}\" (${neo4jNode.id}) now has ${collectedRatings.length} ratings`);\n    }\n    \n    // Add parent consultant ID for field consultants\n    if (neo4jNode.labels.includes('FIELD_CONSULTANT') && !nodeData.parentConsultantId) {\n      let parentId = '';\n      const nodeId = neo4jNode.id || '';\n      \n      if (nodeId.includes('_F')) {\n        parentId = nodeId.replace('_F', '_C');\n      } else if (nodeData.pca) {\n        parentId = nodeData.pca;\n      }\n      \n      if (parentId) {\n        nodeData.parentConsultantId = parentId;\n        console.log(`🔗 Added parent consultant ${parentId} to field consultant ${nodeId}`);\n      }\n    }\n    \n    return {\n      id: neo4jNode.id,\n      type: neo4jNode.labels[0],\n      data: nodeData,\n      position: { x: 0, y: 0 }\n    };\n  });\n  \n  // Step 4: Transform relationships (EXCLUDE RATES edges - they're embedded in product data)\n  const edges: Edge<EdgeData>[] = data.relationships\n    .filter(rel => rel.type !== 'RATES')\n    .map(rel => {\n      const edgeData: EdgeData = {\n        relType: rel.type as any,\n        ...rel.properties\n      };\n      \n      // Normalize property names for better compatibility\n      if (rel.properties.mandate_status && !edgeData.mandateStatus) {\n        edgeData.mandateStatus = rel.properties.mandate_status;\n      }\n      \n      if (rel.properties.level_of_influence && !edgeData.levelOfInfluence) {\n        edgeData.levelOfInfluence = rel.properties.level_of_influence;\n      }\n      \n      if (rel.properties.rankgroup && !edgeData.rating) {\n        edgeData.rating = rel.properties.rankgroup;\n      }\n      \n      // Add source and target IDs for insights panel\n      edgeData.sourceId = rel.start_node_id;\n      edgeData.targetId = rel.end_node_id;\n      \n      return {\n        id: rel.id,\n        source: rel.start_node_id,\n        target: rel.end_node_id,\n        type: 'custom',\n        data: edgeData\n      };\n    });\n  \n  // Final verification and logging\n  const productNodes = nodes.filter(n => n.type === 'PRODUCT' || n.type === 'INCUMBENT_PRODUCT');\n  const productsWithRatings = productNodes.filter(n => n.data.ratings && n.data.ratings.length > 0);\n  \n  console.log(`✅ TRANSFORMATION COMPLETE:`, {\n    totalProducts: productNodes.length,\n    productsWithRatings: productsWithRatings.length,\n    ratesProcessed: ratesRelationships.length,\n    outputNodes: nodes.length,\n    outputEdges: edges.length,\n    nodeTypes: Array.from(new Set(nodes.map(n => n.type).filter(Boolean))),\n    edgeTypes: Array.from(new Set(edges.map(e => e.data?.relType).filter(Boolean)))\n  });\n  \n  return { nodes, edges };\n};\n\nexport const useGraphData = () => {\n  // Loading states\n  const [initialLoading, setInitialLoading] = useState(true);\n  const [filterLoading, setFilterLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  // Data states\n  const [currentRegions, setCurrentRegions] = useState<string[]>(['NAI']);\n  const [regionData, setRegionData] = useState<Neo4jResult | null>(null);\n  const [filterOptions, setFilterOptions] = useState<FilterOptions | null>(null);\n  \n  // Graph data state with debug tracking\n  const [graphData, setGraphDataInternal] = useState<{ nodes: Node<AppNodeData>[], edges: Edge<EdgeData>[] }>({ \n    nodes: [], \n    edges: [] \n  });\n  \n  const [updateCounter, setUpdateCounter] = useState(0);\n  \n  const setGraphData = useCallback((newData: { nodes: Node<AppNodeData>[], edges: Edge<EdgeData>[] }) => {\n    console.log('🚀 HOOK: setGraphData called with:', {\n      nodes: newData.nodes.length,\n      edges: newData.edges.length,\n      timestamp: Date.now(),\n      updateCounter: updateCounter + 1\n    });\n    \n    // Debug: Check products with ratings\n    const products = newData.nodes.filter(n => n.type === 'PRODUCT' || n.type === 'INCUMBENT_PRODUCT');\n    const productsWithRatings = products.filter(p => p.data.ratings && p.data.ratings.length > 0);\n    console.log(`📊 HOOK DEBUG: ${products.length} products, ${productsWithRatings.length} with ratings`);\n    \n    const forceUpdate = {\n      nodes: newData.nodes,\n      edges: newData.edges,\n      _timestamp: Date.now(),\n      _updateId: Math.random().toString(36)\n    };\n    \n    setGraphDataInternal(forceUpdate as any);\n    setUpdateCounter(prev => prev + 1);\n  }, [updateCounter]);\n  \n  // Current filter state\n  const [currentFilters, setCurrentFilters] = useState<FilterCriteria>({\n    regions: ['NAI'],\n    nodeTypes: ['CONSULTANT', 'FIELD_CONSULTANT', 'COMPANY', 'PRODUCT', 'INCUMBENT_PRODUCT'],\n    showInactive: true,\n    sales_regions: [],\n    channels: [],\n    ratings: [],\n    influenceLevels: [],\n    assetClasses: [],\n    consultantIds: [],\n    fieldConsultantIds: [],\n    clientIds: [],\n    productIds: [],\n    incumbentProductIds: [],\n    pcaIds: [],\n    acaIds: [],\n    mandateStatuses: []\n  });\n  \n  const apiService = ApiNeo4jService.getInstance();\n  \n  /**\n   * Load standard region data using hierarchical complete workflow\n   */\n  const loadRegionData = useCallback(async (regions: string[]) => {\n    console.log(`🚀 Loading STANDARD region data: ${regions.join(', ')}`);\n    setInitialLoading(true);\n    setError(null);\n    \n    try {\n      // Test API connection first\n      const isConnected = await apiService.testConnection();\n      if (!isConnected) {\n        throw new Error('Cannot connect to API backend. Make sure the FastAPI server is running on http://localhost:8000');\n      }\n      \n      const response = await fetch(`${apiService.baseUrl}/api/v1/hierarchical/region/${regions[0]}/complete`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const hierarchicalData: HierarchicalResponse = await response.json();\n      \n      if (!hierarchicalData.success || !hierarchicalData.data) {\n        throw new Error(hierarchicalData.error || 'Failed to get hierarchical data');\n      }\n      \n      console.log(`📊 Standard data loaded:`, {\n        totalNodes: hierarchicalData.data.graph_data.nodes.length,\n        totalRelationships: hierarchicalData.data.graph_data.relationships.length,\n        filterOptionsCount: hierarchicalData.data.statistics.total_filter_options\n      });\n      \n      // Transform to expected format\n      const data: Neo4jResult = {\n        nodes: hierarchicalData.data.graph_data.nodes,\n        relationships: hierarchicalData.data.graph_data.relationships,\n        metadata: {\n          region: hierarchicalData.data.region,\n          statistics: hierarchicalData.data.statistics,\n          source: 'hierarchical_complete_workflow',\n          mode: 'standard'\n        }\n      };\n      \n      setRegionData(data);\n      setCurrentRegions(regions);\n      \n      const transformedOptions = transformHierarchicalOptions(hierarchicalData.data.filter_options || {});\n      setFilterOptions(transformedOptions);\n      \n      // Apply default filters\n      const defaultFilters: FilterCriteria = {\n        regions,\n        nodeTypes: ['CONSULTANT', 'FIELD_CONSULTANT', 'COMPANY', 'PRODUCT'],\n        showInactive: true,\n        sales_regions: [],\n        channels: [],\n        ratings: [],\n        influenceLevels: [],\n        assetClasses: [],\n        consultantIds: [],\n        fieldConsultantIds: [],\n        clientIds: [],\n        productIds: [],\n        incumbentProductIds: [],\n        pcaIds: [],\n        acaIds: [],\n        mandateStatuses: []\n      };\n      \n      console.log(`🔧 Applying default filters to standard data`);\n      \n      const filteredData = await apiService.applyFiltersToData(data, defaultFilters);\n      const reactFlowData = transformNeo4jToReactFlow(filteredData);\n      const layoutedData = layoutWithDagre(reactFlowData.nodes, reactFlowData.edges);\n      \n      console.log('🎯 Setting standard graph data:', {\n        nodes: layoutedData.nodes.length,\n        edges: layoutedData.edges.length,\n        timestamp: Date.now()\n      });\n      \n      const newGraphData = {\n        nodes: layoutedData.nodes.map(n => ({ ...n })),\n        edges: layoutedData.edges.map(e => ({ ...e }))\n      };\n      \n      setGraphData(newGraphData);\n      setCurrentFilters(defaultFilters);\n      \n      console.log('✅ Standard region data loaded successfully');\n      \n    } catch (err) {\n      console.error('❌ Error loading standard region data:', err);\n      setError(err instanceof Error ? err.message : 'Failed to load region data');\n      setGraphData({ nodes: [], edges: [] });\n    } finally {\n      setInitialLoading(false);\n    }\n  }, [apiService, setGraphData]);\n\n  /**\n   * 🆕 NEW: Load recommendations data for a specific region\n   */\n  const loadRecommendationsData = useCallback(async (regions: string[]) => {\n    console.log(`🎯 Loading RECOMMENDATIONS data for: ${regions.join(', ')}`);\n    setInitialLoading(true);\n    setError(null);\n    \n    try {\n      // Test API connection first\n      const isConnected = await apiService.testConnection();\n      if (!isConnected) {\n        throw new Error('Cannot connect to API backend. Make sure the FastAPI server is running on http://localhost:8000');\n      }\n      \n      // 🆕 NEW: Call recommendations endpoint\n      const response = await fetch(`${apiService.baseUrl}/api/v1/hierarchical/region/${regions[0]}/recommendations`);\n      \n      if (!response.ok) {\n        // If recommendations endpoint doesn't exist yet, fall back to standard with message\n        if (response.status === 404) {\n          console.warn('⚠️ Recommendations endpoint not yet implemented, falling back to standard data');\n          setError('Recommendations endpoint not yet implemented. Using standard data for now.');\n          await loadRegionData(regions);\n          return;\n        }\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const hierarchicalData: HierarchicalResponse = await response.json();\n      \n      if (!hierarchicalData.success || !hierarchicalData.data) {\n        throw new Error(hierarchicalData.error || 'Failed to get recommendations data');\n      }\n      \n      console.log(`📊 Recommendations data loaded:`, {\n        totalNodes: hierarchicalData.data.graph_data.nodes.length,\n        totalRelationships: hierarchicalData.data.graph_data.relationships.length,\n        incumbentProducts: hierarchicalData.data.graph_data.nodes.filter(n => n.labels?.includes('INCUMBENT_PRODUCT')).length,\n        biRecommends: hierarchicalData.data.graph_data.relationships.filter(r => r.type === 'BI_RECOMMENDS').length\n      });\n      \n      // Transform to expected format\n      const data: Neo4jResult = {\n        nodes: hierarchicalData.data.graph_data.nodes,\n        relationships: hierarchicalData.data.graph_data.relationships,\n        metadata: {\n          region: hierarchicalData.data.region,\n          statistics: hierarchicalData.data.statistics,\n          source: 'hierarchical_recommendations',\n          mode: 'recommendations'\n        }\n      };\n      \n      setRegionData(data);\n      setCurrentRegions(regions);\n      \n      const transformedOptions = transformHierarchicalOptions(hierarchicalData.data.filter_options || {});\n      setFilterOptions(transformedOptions);\n      \n      // Apply default filters (including INCUMBENT_PRODUCT)\n      const defaultFilters: FilterCriteria = {\n        regions,\n        nodeTypes: ['CONSULTANT', 'FIELD_CONSULTANT', 'COMPANY', 'PRODUCT', 'INCUMBENT_PRODUCT'],\n        showInactive: true,\n        sales_regions: [],\n        channels: [],\n        ratings: [],\n        influenceLevels: [],\n        assetClasses: [],\n        consultantIds: [],\n        fieldConsultantIds: [],\n        clientIds: [],\n        productIds: [],\n        incumbentProductIds: [],\n        pcaIds: [],\n        acaIds: [],\n        mandateStatuses: []\n      };\n      \n      console.log(`🔧 Applying default filters to recommendations data`);\n      \n      const filteredData = await apiService.applyFiltersToData(data, defaultFilters);\n      const reactFlowData = transformNeo4jToReactFlow(filteredData);\n      const layoutedData = layoutWithDagre(reactFlowData.nodes, reactFlowData.edges);\n      \n      console.log('🎯 Setting recommendations graph data:', {\n        nodes: layoutedData.nodes.length,\n        edges: layoutedData.edges.length,\n        incumbentProducts: layoutedData.nodes.filter(n => n.type === 'INCUMBENT_PRODUCT').length,\n        biRecommends: layoutedData.edges.filter(e => e.data?.relType === 'BI_RECOMMENDS').length,\n        timestamp: Date.now()\n      });\n      \n      const newGraphData = {\n        nodes: layoutedData.nodes.map(n => ({ ...n })),\n        edges: layoutedData.edges.map(e => ({ ...e }))\n      };\n      \n      setGraphData(newGraphData);\n      setCurrentFilters(defaultFilters);\n      \n      console.log('✅ Recommendations data loaded successfully');\n      \n    } catch (err) {\n      console.error('❌ Error loading recommendations data:', err);\n      setError(err instanceof Error ? err.message : 'Failed to load recommendations data');\n      setGraphData({ nodes: [], edges: [] });\n    } finally {\n      setInitialLoading(false);\n    }\n  }, [apiService, setGraphData, loadRegionData]);\n\n  /**\n   * 🆕 NEW: Switch between standard and recommendations mode\n   */\n  const switchMode = useCallback(async (mode: 'standard' | 'recommendations', regions: string[] = currentRegions) => {\n    console.log(`🔄 Switching to ${mode} mode for regions: ${regions.join(', ')}`);\n    \n    if (mode === 'recommendations') {\n      await loadRecommendationsData(regions);\n    } else {\n      await loadRegionData(regions);\n    }\n  }, [currentRegions, loadRecommendationsData, loadRegionData]);\n  \n  /**\n   * Handle region changes using hierarchical endpoint\n   */\n  const changeRegions = useCallback(async (newRegions: string[]) => {\n    if (JSON.stringify(newRegions.sort()) === JSON.stringify(currentRegions.sort())) {\n      return; // No change\n    }\n    \n    console.log(`🔄 Changing regions: ${currentRegions} → ${newRegions}`);\n    \n    // Clear existing graph data immediately\n    setGraphData({ nodes: [], edges: [] });\n    setInitialLoading(true);\n    setError(null);\n    \n    try {\n      // Determine current mode and load appropriate data\n      const currentMode = regionData?.metadata?.mode || 'standard';\n      \n      if (currentMode === 'recommendations') {\n        await loadRecommendationsData(newRegions);\n      } else {\n        await loadRegionData(newRegions);\n      }\n      \n      console.log('✅ Region change completed successfully');\n      \n    } catch (err) {\n      console.error('❌ Error changing regions:', err);\n      setError(err instanceof Error ? err.message : 'Failed to change regions');\n      setGraphData({ nodes: [], edges: [] });\n    }\n  }, [currentRegions, regionData?.metadata?.mode, loadRecommendationsData, loadRegionData, setGraphData]);\n  \n  /**\n   * Apply filters to current region data\n   */\n  const applyFilters = useCallback(async (filters: Partial<FilterCriteria>) => {\n    console.log('🔧 applyFilters() called with filters:', filters);\n    \n    if (initialLoading || filterLoading) {\n      console.warn('⚠️ Cannot apply filters while loading');\n      return;\n    }\n    \n    if (!regionData) {\n      console.warn('⚠️ No region data available to filter');\n      setError('No region data available. Please wait for data to load.');\n      return;\n    }\n    \n    setFilterLoading(true);\n    setError(null);\n    \n    try {\n      const newFilters: FilterCriteria = {\n        regions: currentRegions,\n        nodeTypes: ['CONSULTANT', 'FIELD_CONSULTANT', 'COMPANY', 'PRODUCT', 'INCUMBENT_PRODUCT'],\n        showInactive: true,\n        sales_regions: [],\n        channels: [],\n        ratings: [],\n        influenceLevels: [],\n        assetClasses: [],\n        consultantIds: [],\n        fieldConsultantIds: [],\n        clientIds: [],\n        productIds: [],\n        incumbentProductIds: [],\n        pcaIds: [],\n        acaIds: [],\n        mandateStatuses: [],\n        ...filters\n      };\n      \n      console.log('📋 Final filters being applied:', newFilters);\n      \n      const filteredData = await apiService.applyFiltersToData(regionData, newFilters);\n      const reactFlowData = transformNeo4jToReactFlow(filteredData);\n      const layoutedData = layoutWithDagre(reactFlowData.nodes, reactFlowData.edges);\n      \n      setCurrentFilters(newFilters);\n      \n      console.log('🎯 Setting graph data from applyFilters:', {\n        nodes: layoutedData.nodes.length,\n        edges: layoutedData.edges.length,\n        timestamp: Date.now()\n      });\n      \n      const newGraphData = {\n        nodes: layoutedData.nodes.map(n => ({ ...n })),\n        edges: layoutedData.edges.map(e => ({ ...e }))\n      };\n      \n      setGraphData(newGraphData);\n      \n      console.log('✅ Filters applied successfully');\n      \n    } catch (err) {\n      console.error('❌ Error applying filters:', err);\n      setError(err instanceof Error ? err.message : 'Failed to apply filters');\n    } finally {\n      setFilterLoading(false);\n    }\n  }, [regionData, currentRegions, initialLoading, filterLoading, apiService, setGraphData]);\n  \n  /**\n   * Reset filters to defaults\n   */\n  const resetFilters = useCallback(() => {\n    const currentMode = regionData?.metadata?.mode || 'standard';\n    \n    // 🎯 FIXED: Ensure PRODUCT is always included in both modes\n    const getDefaultNodeTypes = () => {\n      if (currentMode === 'recommendations') {\n        return ['CONSULTANT', 'FIELD_CONSULTANT', 'COMPANY', 'PRODUCT', 'INCUMBENT_PRODUCT'];\n      } else {\n        return ['CONSULTANT', 'FIELD_CONSULTANT', 'COMPANY', 'PRODUCT'];\n      }\n    };\n    \n    const defaultFilters: Partial<FilterCriteria> = {\n      nodeTypes: getDefaultNodeTypes(), // 🎯 FIXED: Use function instead of inline logic\n      showInactive: true,\n      sales_regions: [],\n      channels: [],\n      ratings: [],\n      influenceLevels: [],\n      assetClasses: [],\n      consultantIds: [],\n      fieldConsultantIds: [],\n      clientIds: [],\n      productIds: [],\n      incumbentProductIds: [],\n      pcaIds: [],\n      acaIds: [],\n      mandateStatuses: []\n    };\n    \n    console.log(`🔄 Resetting filters for ${currentMode} mode with nodeTypes:`, defaultFilters.nodeTypes);\n    \n    applyFilters(defaultFilters);\n  }, [applyFilters, regionData?.metadata?.mode]);\n  \n  /**\n   * Get available regions\n   */\n  const getAvailableRegions = useCallback(() => {\n    return ['NAI', 'EMEA', 'APAC'];\n  }, []);\n  \n  // Initial load on mount\n  const [hasInitialized, setHasInitialized] = useState(false);\n  \n  useEffect(() => {\n    if (!hasInitialized) {\n      console.log('🚀 Initial mount - loading NAI data using standard workflow');\n      setHasInitialized(true);\n      loadRegionData(['NAI']);\n    }\n  }, [hasInitialized, loadRegionData]);\n  \n  return {\n    // Data\n    graphData,\n    filterOptions,\n    currentFilters,\n    currentRegions,\n    updateCounter,\n    \n    // Loading states\n    initialLoading,\n    filterLoading,\n    error,\n    \n    // Actions\n    changeRegions,\n    applyFilters,\n    resetFilters,\n    getAvailableRegions,\n    \n    // 🆕 NEW: Recommendations mode actions\n    loadRecommendationsData,\n    switchMode,\n    \n    // Computed properties\n    hasData: graphData.nodes.length > 0,\n    nodeCount: graphData.nodes.length,\n    edgeCount: graphData.edges.length,\n    \n    // 🆕 NEW: Mode detection\n    isRecommendationsMode: regionData?.metadata?.mode === 'recommendations',\n    dataSource: regionData?.metadata?.source || 'unknown',\n    currentMode: regionData?.metadata?.mode || 'standard'\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}