{"ast":null,"code":"// context/GraphDataProvider.tsx - Updated for Hierarchical Integration\nimport React,{createContext,useContext}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const GraphDataContext=/*#__PURE__*/createContext(null);export const GraphDataProvider=_ref=>{let{children,value}=_ref;return/*#__PURE__*/_jsx(GraphDataContext.Provider,{value:value,children:children});};export const useGraphDataContext=()=>{const context=useContext(GraphDataContext);if(!context){throw new Error('useGraphDataContext must be used within a GraphDataProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","jsx","_jsx","GraphDataContext","GraphDataProvider","_ref","children","value","Provider","useGraphDataContext","context","Error"],"sources":["/Users/prabhakarmudliyar/text-to-cypher-mui/frontend/src/components/context/GraphDataProvider.tsx"],"sourcesContent":["// context/GraphDataProvider.tsx - Updated for Hierarchical Integration\nimport React, { createContext, useContext, ReactNode } from 'react';\nimport type { FilterCriteria, FilterOptions } from '../types/FitlerTypes';\n\ninterface GraphDataContextType {\n  // Filter data and options\n  filterOptions: FilterOptions | null;\n  currentFilters: FilterCriteria;\n  currentRegions: string[];\n  \n  // Loading states\n  filterLoading: boolean;\n  error: string | null;\n  \n  // Actions\n  changeRegions: (regions: string[]) => Promise<void>;\n  applyFilters: (filters: Partial<FilterCriteria>) => Promise<void>;\n  resetFilters: () => void;\n  getAvailableRegions: () => string[];\n}\n\nconst GraphDataContext = createContext<GraphDataContextType | null>(null);\n\ninterface GraphDataProviderProps {\n  children: ReactNode;\n  value: GraphDataContextType;\n} \n\nexport const GraphDataProvider: React.FC<GraphDataProviderProps> = ({ children, value }) => {\n  return (\n    <GraphDataContext.Provider value={value}>\n      {children}\n    </GraphDataContext.Provider>\n  );\n};\n\nexport const useGraphDataContext = () => {\n  const context = useContext(GraphDataContext);\n  if (!context) {\n    throw new Error('useGraphDataContext must be used within a GraphDataProvider');\n  }\n  return context;\n};"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,KAAmB,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAoBpE,KAAM,CAAAC,gBAAgB,cAAGJ,aAAa,CAA8B,IAAI,CAAC,CAOzE,MAAO,MAAM,CAAAK,iBAAmD,CAAGC,IAAA,EAAyB,IAAxB,CAAEC,QAAQ,CAAEC,KAAM,CAAC,CAAAF,IAAA,CACrF,mBACEH,IAAA,CAACC,gBAAgB,CAACK,QAAQ,EAACD,KAAK,CAAEA,KAAM,CAAAD,QAAA,CACrCA,QAAQ,CACgB,CAAC,CAEhC,CAAC,CAED,MAAO,MAAM,CAAAG,mBAAmB,CAAGA,CAAA,GAAM,CACvC,KAAM,CAAAC,OAAO,CAAGV,UAAU,CAACG,gBAAgB,CAAC,CAC5C,GAAI,CAACO,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,6DAA6D,CAAC,CAChF,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}