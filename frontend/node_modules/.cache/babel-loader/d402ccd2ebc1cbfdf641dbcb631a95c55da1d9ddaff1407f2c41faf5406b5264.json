{"ast":null,"code":"// hooks/useGraphData.ts - COMPLETE with Recommendations Mode Support\nimport{useState,useEffect,useCallback}from'react';import ApiNeo4jService from'../services/ApiNeo4jService';import{transformHierarchicalOptions}from'../types/FitlerTypes';import dagre from'dagre';// Layout configuration\nconst NODE_W=240;const NODE_H=120;const layoutWithDagre=(nodes,edges)=>{const g=new dagre.graphlib.Graph();g.setDefaultEdgeLabel(()=>({}));g.setGraph({rankdir:'TB',nodesep:120,ranksep:160});nodes.forEach(n=>g.setNode(n.id,{width:NODE_W,height:NODE_H}));edges.forEach(e=>g.setEdge(e.source,e.target));dagre.layout(g);const layoutedNodes=nodes.map(n=>{const pos=g.node(n.id);return{...n,position:{x:pos.x-NODE_W/2,y:pos.y-NODE_H/2}};});return{nodes:layoutedNodes,edges};};// Transform Neo4j data to ReactFlow format WITH PROPER RATINGS COLLECTION\nconst transformNeo4jToReactFlow=data=>{console.log('🔄 TRANSFORMATION: Starting Neo4j to ReactFlow with ratings collection:',{inputNodes:data.nodes.length,inputRelationships:data.relationships.length});// Step 1: Find all RATES relationships\nconst ratesRelationships=data.relationships.filter(rel=>rel.type==='RATES');console.log(`🎯 Found ${ratesRelationships.length} RATES relationships`);// Step 2: Create a map to collect ratings for each product\nconst productRatingsMap=new Map();// Helper function to ensure rankgroup is a valid RankGroup\nconst normalizeRankGroup=value=>{const normalized=value===null||value===void 0?void 0:value.toLowerCase();switch(normalized){case'positive':return'Positive';case'negative':return'Negative';case'introduced':return'Introduced';case'neutral':return'Neutral';default:return'Neutral';// Default fallback\n}};ratesRelationships.forEach(rel=>{const consultantNode=data.nodes.find(n=>n.id===rel.start_node_id);const productNode=data.nodes.find(n=>n.id===rel.end_node_id);if(consultantNode&&productNode){const consultantName=consultantNode.properties.name||consultantNode.properties.label||consultantNode.id;const rawRatingValue=rel.properties.rankgroup||rel.properties.rating||rel.properties.rank||'Neutral';const normalizedRankGroup=normalizeRankGroup(rawRatingValue);const rating={consultant:consultantName,rankgroup:normalizedRankGroup,rating:rawRatingValue};if(!productRatingsMap.has(productNode.id)){productRatingsMap.set(productNode.id,[]);}productRatingsMap.get(productNode.id).push(rating);console.log(`📊 Collected rating: ${consultantName} rated ${productNode.properties.name||productNode.id} as \"${normalizedRankGroup}\"`);}});console.log(`📈 Product ratings collected for ${productRatingsMap.size} products`);// Step 3: Transform nodes and inject ratings into product nodes\nconst nodes=data.nodes.map(neo4jNode=>{const nodeData={...neo4jNode.properties,id:neo4jNode.properties.id||neo4jNode.id,name:neo4jNode.properties.name||neo4jNode.properties.label||neo4jNode.id,label:neo4jNode.properties.label||neo4jNode.properties.name||neo4jNode.id};// Inject collected ratings into product nodes\nif(neo4jNode.labels.includes('PRODUCT')||neo4jNode.labels.includes('INCUMBENT_PRODUCT')){const collectedRatings=productRatingsMap.get(neo4jNode.id)||[];nodeData.ratings=collectedRatings;console.log(`🦄 Product \"${nodeData.name}\" (${neo4jNode.id}) now has ${collectedRatings.length} ratings`);}// Add parent consultant ID for field consultants\nif(neo4jNode.labels.includes('FIELD_CONSULTANT')&&!nodeData.parentConsultantId){let parentId='';const nodeId=neo4jNode.id||'';if(nodeId.includes('_F')){parentId=nodeId.replace('_F','_C');}else if(nodeData.pca){parentId=nodeData.pca;}if(parentId){nodeData.parentConsultantId=parentId;console.log(`🔗 Added parent consultant ${parentId} to field consultant ${nodeId}`);}}return{id:neo4jNode.id,type:neo4jNode.labels[0],data:nodeData,position:{x:0,y:0}};});// Step 4: Transform relationships (EXCLUDE RATES edges - they're embedded in product data)\nconst edges=data.relationships.filter(rel=>rel.type!=='RATES').map(rel=>{const edgeData={relType:rel.type,...rel.properties};// Normalize property names for better compatibility\nif(rel.properties.mandate_status&&!edgeData.mandateStatus){edgeData.mandateStatus=rel.properties.mandate_status;}if(rel.properties.level_of_influence&&!edgeData.levelOfInfluence){edgeData.levelOfInfluence=rel.properties.level_of_influence;}if(rel.properties.rankgroup&&!edgeData.rating){edgeData.rating=rel.properties.rankgroup;}// Add source and target IDs for insights panel\nedgeData.sourceId=rel.start_node_id;edgeData.targetId=rel.end_node_id;return{id:rel.id,source:rel.start_node_id,target:rel.end_node_id,type:'custom',data:edgeData};});// Final verification and logging\nconst productNodes=nodes.filter(n=>n.type==='PRODUCT'||n.type==='INCUMBENT_PRODUCT');const productsWithRatings=productNodes.filter(n=>n.data.ratings&&n.data.ratings.length>0);console.log(`✅ TRANSFORMATION COMPLETE:`,{totalProducts:productNodes.length,productsWithRatings:productsWithRatings.length,ratesProcessed:ratesRelationships.length,outputNodes:nodes.length,outputEdges:edges.length,nodeTypes:Array.from(new Set(nodes.map(n=>n.type).filter(Boolean))),edgeTypes:Array.from(new Set(edges.map(e=>{var _e$data;return(_e$data=e.data)===null||_e$data===void 0?void 0:_e$data.relType;}).filter(Boolean)))});return{nodes,edges};};export const useGraphData=()=>{var _regionData$metadata2,_regionData$metadata4,_regionData$metadata5,_regionData$metadata6,_regionData$metadata7;// Loading states\nconst[initialLoading,setInitialLoading]=useState(true);const[filterLoading,setFilterLoading]=useState(false);const[error,setError]=useState(null);// Data states\nconst[currentRegions,setCurrentRegions]=useState(['NAI']);const[regionData,setRegionData]=useState(null);const[filterOptions,setFilterOptions]=useState(null);// Graph data state with debug tracking\nconst[graphData,setGraphDataInternal]=useState({nodes:[],edges:[]});const[updateCounter,setUpdateCounter]=useState(0);const setGraphData=useCallback(newData=>{console.log('🚀 HOOK: setGraphData called with:',{nodes:newData.nodes.length,edges:newData.edges.length,timestamp:Date.now(),updateCounter:updateCounter+1});// Debug: Check products with ratings\nconst products=newData.nodes.filter(n=>n.type==='PRODUCT'||n.type==='INCUMBENT_PRODUCT');const productsWithRatings=products.filter(p=>p.data.ratings&&p.data.ratings.length>0);console.log(`📊 HOOK DEBUG: ${products.length} products, ${productsWithRatings.length} with ratings`);const forceUpdate={nodes:newData.nodes,edges:newData.edges,_timestamp:Date.now(),_updateId:Math.random().toString(36)};setGraphDataInternal(forceUpdate);setUpdateCounter(prev=>prev+1);},[updateCounter]);// Current filter state\nconst[currentFilters,setCurrentFilters]=useState({regions:['NAI'],nodeTypes:['CONSULTANT','FIELD_CONSULTANT','COMPANY','PRODUCT','INCUMBENT_PRODUCT'],showInactive:true,sales_regions:[],channels:[],ratings:[],influenceLevels:[],assetClasses:[],consultantIds:[],fieldConsultantIds:[],clientIds:[],productIds:[],incumbentProductIds:[],pcaIds:[],acaIds:[],mandateStatuses:[]});const apiService=ApiNeo4jService.getInstance();/**\n   * Load standard region data using hierarchical complete workflow\n   */const loadRegionData=useCallback(async regions=>{console.log(`🚀 Loading STANDARD region data: ${regions.join(', ')}`);setInitialLoading(true);setError(null);try{// Test API connection first\nconst isConnected=await apiService.testConnection();if(!isConnected){throw new Error('Cannot connect to API backend. Make sure the FastAPI server is running on http://localhost:8000');}const response=await fetch(`${apiService.baseUrl}/api/v1/hierarchical/region/${regions[0]}/complete`);if(!response.ok){throw new Error(`HTTP ${response.status}: ${response.statusText}`);}const hierarchicalData=await response.json();if(!hierarchicalData.success||!hierarchicalData.data){throw new Error(hierarchicalData.error||'Failed to get hierarchical data');}console.log(`📊 Standard data loaded:`,{totalNodes:hierarchicalData.data.graph_data.nodes.length,totalRelationships:hierarchicalData.data.graph_data.relationships.length,filterOptionsCount:hierarchicalData.data.statistics.total_filter_options});// Transform to expected format\nconst data={nodes:hierarchicalData.data.graph_data.nodes,relationships:hierarchicalData.data.graph_data.relationships,metadata:{region:hierarchicalData.data.region,statistics:hierarchicalData.data.statistics,source:'hierarchical_complete_workflow',mode:'standard'}};setRegionData(data);setCurrentRegions(regions);const transformedOptions=transformHierarchicalOptions(hierarchicalData.data.filter_options||{});setFilterOptions(transformedOptions);// Apply default filters\nconst defaultFilters={regions,nodeTypes:['CONSULTANT','FIELD_CONSULTANT','COMPANY','PRODUCT'],showInactive:true,sales_regions:[],channels:[],ratings:[],influenceLevels:[],assetClasses:[],consultantIds:[],fieldConsultantIds:[],clientIds:[],productIds:[],incumbentProductIds:[],pcaIds:[],acaIds:[],mandateStatuses:[]};console.log(`🔧 Applying default filters to standard data`);const filteredData=await apiService.applyFiltersToData(data,defaultFilters);const reactFlowData=transformNeo4jToReactFlow(filteredData);const layoutedData=layoutWithDagre(reactFlowData.nodes,reactFlowData.edges);console.log('🎯 Setting standard graph data:',{nodes:layoutedData.nodes.length,edges:layoutedData.edges.length,timestamp:Date.now()});const newGraphData={nodes:layoutedData.nodes.map(n=>({...n})),edges:layoutedData.edges.map(e=>({...e}))};setGraphData(newGraphData);setCurrentFilters(defaultFilters);console.log('✅ Standard region data loaded successfully');}catch(err){console.error('❌ Error loading standard region data:',err);setError(err instanceof Error?err.message:'Failed to load region data');setGraphData({nodes:[],edges:[]});}finally{setInitialLoading(false);}},[apiService,setGraphData]);/**\n   * 🆕 NEW: Load recommendations data for a specific region\n   */const loadRecommendationsData=useCallback(async regions=>{console.log(`🎯 Loading RECOMMENDATIONS data for: ${regions.join(', ')}`);setInitialLoading(true);setError(null);try{// Test API connection first\nconst isConnected=await apiService.testConnection();if(!isConnected){throw new Error('Cannot connect to API backend. Make sure the FastAPI server is running on http://localhost:8000');}// 🆕 NEW: Call recommendations endpoint\nconst response=await fetch(`${apiService.baseUrl}/api/v1/hierarchical/region/${regions[0]}/recommendations`);if(!response.ok){// If recommendations endpoint doesn't exist yet, fall back to standard with message\nif(response.status===404){console.warn('⚠️ Recommendations endpoint not yet implemented, falling back to standard data');setError('Recommendations endpoint not yet implemented. Using standard data for now.');await loadRegionData(regions);return;}throw new Error(`HTTP ${response.status}: ${response.statusText}`);}const hierarchicalData=await response.json();if(!hierarchicalData.success||!hierarchicalData.data){throw new Error(hierarchicalData.error||'Failed to get recommendations data');}console.log(`📊 Recommendations data loaded:`,{totalNodes:hierarchicalData.data.graph_data.nodes.length,totalRelationships:hierarchicalData.data.graph_data.relationships.length,incumbentProducts:hierarchicalData.data.graph_data.nodes.filter(n=>{var _n$labels;return(_n$labels=n.labels)===null||_n$labels===void 0?void 0:_n$labels.includes('INCUMBENT_PRODUCT');}).length,biRecommends:hierarchicalData.data.graph_data.relationships.filter(r=>r.type==='BI_RECOMMENDS').length});// Transform to expected format\nconst data={nodes:hierarchicalData.data.graph_data.nodes,relationships:hierarchicalData.data.graph_data.relationships,metadata:{region:hierarchicalData.data.region,statistics:hierarchicalData.data.statistics,source:'hierarchical_recommendations',mode:'recommendations'}};setRegionData(data);setCurrentRegions(regions);const transformedOptions=transformHierarchicalOptions(hierarchicalData.data.filter_options||{});setFilterOptions(transformedOptions);// Apply default filters (including INCUMBENT_PRODUCT)\nconst defaultFilters={regions,nodeTypes:['CONSULTANT','FIELD_CONSULTANT','COMPANY','PRODUCT','INCUMBENT_PRODUCT'],showInactive:true,sales_regions:[],channels:[],ratings:[],influenceLevels:[],assetClasses:[],consultantIds:[],fieldConsultantIds:[],clientIds:[],productIds:[],incumbentProductIds:[],pcaIds:[],acaIds:[],mandateStatuses:[]};console.log(`🔧 Applying default filters to recommendations data`);const filteredData=await apiService.applyFiltersToData(data,defaultFilters);const reactFlowData=transformNeo4jToReactFlow(filteredData);const layoutedData=layoutWithDagre(reactFlowData.nodes,reactFlowData.edges);console.log('🎯 Setting recommendations graph data:',{nodes:layoutedData.nodes.length,edges:layoutedData.edges.length,incumbentProducts:layoutedData.nodes.filter(n=>n.type==='INCUMBENT_PRODUCT').length,biRecommends:layoutedData.edges.filter(e=>{var _e$data2;return((_e$data2=e.data)===null||_e$data2===void 0?void 0:_e$data2.relType)==='BI_RECOMMENDS';}).length,timestamp:Date.now()});const newGraphData={nodes:layoutedData.nodes.map(n=>({...n})),edges:layoutedData.edges.map(e=>({...e}))};setGraphData(newGraphData);setCurrentFilters(defaultFilters);console.log('✅ Recommendations data loaded successfully');}catch(err){console.error('❌ Error loading recommendations data:',err);setError(err instanceof Error?err.message:'Failed to load recommendations data');setGraphData({nodes:[],edges:[]});}finally{setInitialLoading(false);}},[apiService,setGraphData,loadRegionData]);/**\n   * 🆕 NEW: Switch between standard and recommendations mode\n   */const switchMode=useCallback(async function(mode){let regions=arguments.length>1&&arguments[1]!==undefined?arguments[1]:currentRegions;console.log(`🔄 Switching to ${mode} mode for regions: ${regions.join(', ')}`);if(mode==='recommendations'){await loadRecommendationsData(regions);}else{await loadRegionData(regions);}},[currentRegions,loadRecommendationsData,loadRegionData]);/**\n   * Handle region changes using hierarchical endpoint\n   */const changeRegions=useCallback(async newRegions=>{if(JSON.stringify(newRegions.sort())===JSON.stringify(currentRegions.sort())){return;// No change\n}console.log(`🔄 Changing regions: ${currentRegions} → ${newRegions}`);// Clear existing graph data immediately\nsetGraphData({nodes:[],edges:[]});setInitialLoading(true);setError(null);try{var _regionData$metadata;// Determine current mode and load appropriate data\nconst currentMode=(regionData===null||regionData===void 0?void 0:(_regionData$metadata=regionData.metadata)===null||_regionData$metadata===void 0?void 0:_regionData$metadata.mode)||'standard';if(currentMode==='recommendations'){await loadRecommendationsData(newRegions);}else{await loadRegionData(newRegions);}console.log('✅ Region change completed successfully');}catch(err){console.error('❌ Error changing regions:',err);setError(err instanceof Error?err.message:'Failed to change regions');setGraphData({nodes:[],edges:[]});}},[currentRegions,regionData===null||regionData===void 0?void 0:(_regionData$metadata2=regionData.metadata)===null||_regionData$metadata2===void 0?void 0:_regionData$metadata2.mode,loadRecommendationsData,loadRegionData,setGraphData]);/**\n   * Apply filters to current region data\n   */const applyFilters=useCallback(async filters=>{console.log('🔧 applyFilters() called with filters:',filters);if(initialLoading||filterLoading){console.warn('⚠️ Cannot apply filters while loading');return;}if(!regionData){console.warn('⚠️ No region data available to filter');setError('No region data available. Please wait for data to load.');return;}setFilterLoading(true);setError(null);try{const newFilters={regions:currentRegions,nodeTypes:['CONSULTANT','FIELD_CONSULTANT','COMPANY','PRODUCT','INCUMBENT_PRODUCT'],showInactive:true,sales_regions:[],channels:[],ratings:[],influenceLevels:[],assetClasses:[],consultantIds:[],fieldConsultantIds:[],clientIds:[],productIds:[],incumbentProductIds:[],pcaIds:[],acaIds:[],mandateStatuses:[],...filters};console.log('📋 Final filters being applied:',newFilters);const filteredData=await apiService.applyFiltersToData(regionData,newFilters);const reactFlowData=transformNeo4jToReactFlow(filteredData);const layoutedData=layoutWithDagre(reactFlowData.nodes,reactFlowData.edges);setCurrentFilters(newFilters);console.log('🎯 Setting graph data from applyFilters:',{nodes:layoutedData.nodes.length,edges:layoutedData.edges.length,timestamp:Date.now()});const newGraphData={nodes:layoutedData.nodes.map(n=>({...n})),edges:layoutedData.edges.map(e=>({...e}))};setGraphData(newGraphData);console.log('✅ Filters applied successfully');}catch(err){console.error('❌ Error applying filters:',err);setError(err instanceof Error?err.message:'Failed to apply filters');}finally{setFilterLoading(false);}},[regionData,currentRegions,initialLoading,filterLoading,apiService,setGraphData]);/**\n   * Reset filters to defaults\n   */const resetFilters=useCallback(()=>{var _regionData$metadata3;const currentMode=(regionData===null||regionData===void 0?void 0:(_regionData$metadata3=regionData.metadata)===null||_regionData$metadata3===void 0?void 0:_regionData$metadata3.mode)||'standard';// 🎯 FIXED: Ensure PRODUCT is always included in both modes\nconst getDefaultNodeTypes=()=>{if(currentMode==='recommendations'){return['CONSULTANT','FIELD_CONSULTANT','COMPANY','PRODUCT','INCUMBENT_PRODUCT'];}else{return['CONSULTANT','FIELD_CONSULTANT','COMPANY','PRODUCT'];}};const defaultFilters={nodeTypes:getDefaultNodeTypes(),// 🎯 FIXED: Use function instead of inline logic\nshowInactive:true,sales_regions:[],channels:[],ratings:[],influenceLevels:[],assetClasses:[],consultantIds:[],fieldConsultantIds:[],clientIds:[],productIds:[],incumbentProductIds:[],pcaIds:[],acaIds:[],mandateStatuses:[]};console.log(`🔄 Resetting filters for ${currentMode} mode with nodeTypes:`,defaultFilters.nodeTypes);applyFilters(defaultFilters);},[applyFilters,regionData===null||regionData===void 0?void 0:(_regionData$metadata4=regionData.metadata)===null||_regionData$metadata4===void 0?void 0:_regionData$metadata4.mode]);/**\n   * Get available regions\n   */const getAvailableRegions=useCallback(()=>{return['NAI','EMEA','APAC'];},[]);// Initial load on mount\nconst[hasInitialized,setHasInitialized]=useState(false);useEffect(()=>{if(!hasInitialized){console.log('🚀 Initial mount - loading NAI data using standard workflow');setHasInitialized(true);loadRegionData(['NAI']);}},[hasInitialized,loadRegionData]);return{// Data\ngraphData,filterOptions,currentFilters,currentRegions,updateCounter,// Loading states\ninitialLoading,filterLoading,error,// Actions\nchangeRegions,applyFilters,resetFilters,getAvailableRegions,// 🆕 NEW: Recommendations mode actions\nloadRecommendationsData,switchMode,// Computed properties\nhasData:graphData.nodes.length>0,nodeCount:graphData.nodes.length,edgeCount:graphData.edges.length,// 🆕 NEW: Mode detection\nisRecommendationsMode:(regionData===null||regionData===void 0?void 0:(_regionData$metadata5=regionData.metadata)===null||_regionData$metadata5===void 0?void 0:_regionData$metadata5.mode)==='recommendations',dataSource:(regionData===null||regionData===void 0?void 0:(_regionData$metadata6=regionData.metadata)===null||_regionData$metadata6===void 0?void 0:_regionData$metadata6.source)||'unknown',currentMode:(regionData===null||regionData===void 0?void 0:(_regionData$metadata7=regionData.metadata)===null||_regionData$metadata7===void 0?void 0:_regionData$metadata7.mode)||'standard'};};","map":{"version":3,"names":["useState","useEffect","useCallback","ApiNeo4jService","transformHierarchicalOptions","dagre","NODE_W","NODE_H","layoutWithDagre","nodes","edges","g","graphlib","Graph","setDefaultEdgeLabel","setGraph","rankdir","nodesep","ranksep","forEach","n","setNode","id","width","height","e","setEdge","source","target","layout","layoutedNodes","map","pos","node","position","x","y","transformNeo4jToReactFlow","data","console","log","inputNodes","length","inputRelationships","relationships","ratesRelationships","filter","rel","type","productRatingsMap","Map","normalizeRankGroup","value","normalized","toLowerCase","consultantNode","find","start_node_id","productNode","end_node_id","consultantName","properties","name","label","rawRatingValue","rankgroup","rating","rank","normalizedRankGroup","consultant","has","set","get","push","size","neo4jNode","nodeData","labels","includes","collectedRatings","ratings","parentConsultantId","parentId","nodeId","replace","pca","edgeData","relType","mandate_status","mandateStatus","level_of_influence","levelOfInfluence","sourceId","targetId","productNodes","productsWithRatings","totalProducts","ratesProcessed","outputNodes","outputEdges","nodeTypes","Array","from","Set","Boolean","edgeTypes","_e$data","useGraphData","_regionData$metadata2","_regionData$metadata4","_regionData$metadata5","_regionData$metadata6","_regionData$metadata7","initialLoading","setInitialLoading","filterLoading","setFilterLoading","error","setError","currentRegions","setCurrentRegions","regionData","setRegionData","filterOptions","setFilterOptions","graphData","setGraphDataInternal","updateCounter","setUpdateCounter","setGraphData","newData","timestamp","Date","now","products","p","forceUpdate","_timestamp","_updateId","Math","random","toString","prev","currentFilters","setCurrentFilters","regions","showInactive","sales_regions","channels","influenceLevels","assetClasses","consultantIds","fieldConsultantIds","clientIds","productIds","incumbentProductIds","pcaIds","acaIds","mandateStatuses","apiService","getInstance","loadRegionData","join","isConnected","testConnection","Error","response","fetch","baseUrl","ok","status","statusText","hierarchicalData","json","success","totalNodes","graph_data","totalRelationships","filterOptionsCount","statistics","total_filter_options","metadata","region","mode","transformedOptions","filter_options","defaultFilters","filteredData","applyFiltersToData","reactFlowData","layoutedData","newGraphData","err","message","loadRecommendationsData","warn","incumbentProducts","_n$labels","biRecommends","r","_e$data2","switchMode","arguments","undefined","changeRegions","newRegions","JSON","stringify","sort","_regionData$metadata","currentMode","applyFilters","filters","newFilters","resetFilters","_regionData$metadata3","getDefaultNodeTypes","getAvailableRegions","hasInitialized","setHasInitialized","hasData","nodeCount","edgeCount","isRecommendationsMode","dataSource"],"sources":["/Users/prabhakarmudliyar/text-to-cypher-mui/frontend/src/components/hooks/useGraphData.ts"],"sourcesContent":["// hooks/useGraphData.ts - COMPLETE with Recommendations Mode Support\nimport { useState, useEffect, useCallback } from 'react';\nimport { Node, Edge } from 'reactflow';\nimport ApiNeo4jService from '../services/ApiNeo4jService';\nimport { FilterCriteria, FilterOptions, transformHierarchicalOptions } from '../types/FitlerTypes';\nimport { AppNodeData, EdgeData } from '../types/GraphTypes';\nimport dagre from 'dagre';\n\ninterface Neo4jNode {\n  id: string;\n  labels: string[];\n  properties: Record<string, any>;\n}\n\ninterface Neo4jRelationship {\n  id: string;\n  type: string;\n  start_node_id: string;\n  end_node_id: string;\n  properties: Record<string, any>;\n}\n\ninterface Neo4jResult {\n  nodes: Neo4jNode[];\n  relationships: Neo4jRelationship[];\n  metadata?: Record<string, any>;\n}\n\ninterface HierarchicalResponse {\n  success: boolean;\n  data?: {\n    region: string;\n    graph_data: {\n      nodes: Neo4jNode[];\n      relationships: Neo4jRelationship[];\n    };\n    filter_options: Record<string, any>;\n    statistics: {\n      total_nodes: number;\n      total_relationships: number;\n      total_filter_options: number;\n    };\n  };\n  message?: string;\n  error?: string;\n}\n\n// Layout configuration\nconst NODE_W = 240;\nconst NODE_H = 120;\n\nconst layoutWithDagre = (nodes: Node[], edges: Edge[]) => {\n  const g = new dagre.graphlib.Graph();\n  g.setDefaultEdgeLabel(() => ({}));\n  g.setGraph({ rankdir: 'TB', nodesep: 120, ranksep: 160 });\n\n  nodes.forEach((n) => g.setNode(n.id, { width: NODE_W, height: NODE_H }));\n  edges.forEach((e) => g.setEdge(e.source, e.target));\n  dagre.layout(g);\n\n  const layoutedNodes = nodes.map((n) => {\n    const pos = g.node(n.id);\n    return { ...n, position: { x: pos.x - NODE_W / 2, y: pos.y - NODE_H / 2 } };\n  });\n\n  return { nodes: layoutedNodes, edges };\n};\n\n// Transform Neo4j data to ReactFlow format WITH PROPER RATINGS COLLECTION\nconst transformNeo4jToReactFlow = (data: Neo4jResult): { nodes: Node<AppNodeData>[], edges: Edge<EdgeData>[] } => {\n  console.log('🔄 TRANSFORMATION: Starting Neo4j to ReactFlow with ratings collection:', {\n    inputNodes: data.nodes.length,\n    inputRelationships: data.relationships.length\n  });\n  \n  // Step 1: Find all RATES relationships\n  const ratesRelationships = data.relationships.filter(rel => rel.type === 'RATES');\n  console.log(`🎯 Found ${ratesRelationships.length} RATES relationships`);\n  \n  // Step 2: Create a map to collect ratings for each product\n  const productRatingsMap = new Map<string, Array<{consultant: string, rankgroup: 'Positive' | 'Negative' | 'Introduced' | 'Neutral', rating?: string}>>();\n  \n  // Helper function to ensure rankgroup is a valid RankGroup\n  const normalizeRankGroup = (value: string): 'Positive' | 'Negative' | 'Introduced' | 'Neutral' => {\n    const normalized = value?.toLowerCase();\n    switch (normalized) {\n      case 'positive': return 'Positive';\n      case 'negative': return 'Negative';\n      case 'introduced': return 'Introduced';\n      case 'neutral': return 'Neutral';\n      default: return 'Neutral'; // Default fallback\n    }\n  };\n  \n  ratesRelationships.forEach(rel => {\n    const consultantNode = data.nodes.find(n => n.id === rel.start_node_id);\n    const productNode = data.nodes.find(n => n.id === rel.end_node_id);\n    \n    if (consultantNode && productNode) {\n      const consultantName = consultantNode.properties.name || consultantNode.properties.label || consultantNode.id;\n      const rawRatingValue = rel.properties.rankgroup || rel.properties.rating || rel.properties.rank || 'Neutral';\n      const normalizedRankGroup = normalizeRankGroup(rawRatingValue);\n      \n      const rating = {\n        consultant: consultantName,\n        rankgroup: normalizedRankGroup,\n        rating: rawRatingValue\n      };\n      \n      if (!productRatingsMap.has(productNode.id)) {\n        productRatingsMap.set(productNode.id, []);\n      }\n      productRatingsMap.get(productNode.id)!.push(rating);\n      \n      console.log(`📊 Collected rating: ${consultantName} rated ${productNode.properties.name || productNode.id} as \"${normalizedRankGroup}\"`);\n    }\n  });\n  \n  console.log(`📈 Product ratings collected for ${productRatingsMap.size} products`);\n  \n  // Step 3: Transform nodes and inject ratings into product nodes\n  const nodes: Node<AppNodeData>[] = data.nodes.map(neo4jNode => {\n    const nodeData: AppNodeData = {\n      ...neo4jNode.properties,\n      id: neo4jNode.properties.id || neo4jNode.id,\n      name: neo4jNode.properties.name || neo4jNode.properties.label || neo4jNode.id,\n      label: neo4jNode.properties.label || neo4jNode.properties.name || neo4jNode.id\n    };\n    \n    // Inject collected ratings into product nodes\n    if (neo4jNode.labels.includes('PRODUCT') || neo4jNode.labels.includes('INCUMBENT_PRODUCT')) {\n      const collectedRatings = productRatingsMap.get(neo4jNode.id) || [];\n      nodeData.ratings = collectedRatings;\n      \n      console.log(`🦄 Product \"${nodeData.name}\" (${neo4jNode.id}) now has ${collectedRatings.length} ratings`);\n    }\n    \n    // Add parent consultant ID for field consultants\n    if (neo4jNode.labels.includes('FIELD_CONSULTANT') && !nodeData.parentConsultantId) {\n      let parentId = '';\n      const nodeId = neo4jNode.id || '';\n      \n      if (nodeId.includes('_F')) {\n        parentId = nodeId.replace('_F', '_C');\n      } else if (nodeData.pca) {\n        parentId = nodeData.pca;\n      }\n      \n      if (parentId) {\n        nodeData.parentConsultantId = parentId;\n        console.log(`🔗 Added parent consultant ${parentId} to field consultant ${nodeId}`);\n      }\n    }\n    \n    return {\n      id: neo4jNode.id,\n      type: neo4jNode.labels[0],\n      data: nodeData,\n      position: { x: 0, y: 0 }\n    };\n  });\n  \n  // Step 4: Transform relationships (EXCLUDE RATES edges - they're embedded in product data)\n  const edges: Edge<EdgeData>[] = data.relationships\n    .filter(rel => rel.type !== 'RATES')\n    .map(rel => {\n      const edgeData: EdgeData = {\n        relType: rel.type as any,\n        ...rel.properties\n      };\n      \n      // Normalize property names for better compatibility\n      if (rel.properties.mandate_status && !edgeData.mandateStatus) {\n        edgeData.mandateStatus = rel.properties.mandate_status;\n      }\n      \n      if (rel.properties.level_of_influence && !edgeData.levelOfInfluence) {\n        edgeData.levelOfInfluence = rel.properties.level_of_influence;\n      }\n      \n      if (rel.properties.rankgroup && !edgeData.rating) {\n        edgeData.rating = rel.properties.rankgroup;\n      }\n      \n      // Add source and target IDs for insights panel\n      edgeData.sourceId = rel.start_node_id;\n      edgeData.targetId = rel.end_node_id;\n      \n      return {\n        id: rel.id,\n        source: rel.start_node_id,\n        target: rel.end_node_id,\n        type: 'custom',\n        data: edgeData\n      };\n    });\n  \n  // Final verification and logging\n  const productNodes = nodes.filter(n => n.type === 'PRODUCT' || n.type === 'INCUMBENT_PRODUCT');\n  const productsWithRatings = productNodes.filter(n => n.data.ratings && n.data.ratings.length > 0);\n  \n  console.log(`✅ TRANSFORMATION COMPLETE:`, {\n    totalProducts: productNodes.length,\n    productsWithRatings: productsWithRatings.length,\n    ratesProcessed: ratesRelationships.length,\n    outputNodes: nodes.length,\n    outputEdges: edges.length,\n    nodeTypes: Array.from(new Set(nodes.map(n => n.type).filter(Boolean))),\n    edgeTypes: Array.from(new Set(edges.map(e => e.data?.relType).filter(Boolean)))\n  });\n  \n  return { nodes, edges };\n};\n\nexport const useGraphData = () => {\n  // Loading states\n  const [initialLoading, setInitialLoading] = useState(true);\n  const [filterLoading, setFilterLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  // Data states\n  const [currentRegions, setCurrentRegions] = useState<string[]>(['NAI']);\n  const [regionData, setRegionData] = useState<Neo4jResult | null>(null);\n  const [filterOptions, setFilterOptions] = useState<FilterOptions | null>(null);\n  \n  // Graph data state with debug tracking\n  const [graphData, setGraphDataInternal] = useState<{ nodes: Node<AppNodeData>[], edges: Edge<EdgeData>[] }>({ \n    nodes: [], \n    edges: [] \n  });\n  \n  const [updateCounter, setUpdateCounter] = useState(0);\n  \n  const setGraphData = useCallback((newData: { nodes: Node<AppNodeData>[], edges: Edge<EdgeData>[] }) => {\n    console.log('🚀 HOOK: setGraphData called with:', {\n      nodes: newData.nodes.length,\n      edges: newData.edges.length,\n      timestamp: Date.now(),\n      updateCounter: updateCounter + 1\n    });\n    \n    // Debug: Check products with ratings\n    const products = newData.nodes.filter(n => n.type === 'PRODUCT' || n.type === 'INCUMBENT_PRODUCT');\n    const productsWithRatings = products.filter(p => p.data.ratings && p.data.ratings.length > 0);\n    console.log(`📊 HOOK DEBUG: ${products.length} products, ${productsWithRatings.length} with ratings`);\n    \n    const forceUpdate = {\n      nodes: newData.nodes,\n      edges: newData.edges,\n      _timestamp: Date.now(),\n      _updateId: Math.random().toString(36)\n    };\n    \n    setGraphDataInternal(forceUpdate as any);\n    setUpdateCounter(prev => prev + 1);\n  }, [updateCounter]);\n  \n  // Current filter state\n  const [currentFilters, setCurrentFilters] = useState<FilterCriteria>({\n    regions: ['NAI'],\n    nodeTypes: ['CONSULTANT', 'FIELD_CONSULTANT', 'COMPANY', 'PRODUCT', 'INCUMBENT_PRODUCT'],\n    showInactive: true,\n    sales_regions: [],\n    channels: [],\n    ratings: [],\n    influenceLevels: [],\n    assetClasses: [],\n    consultantIds: [],\n    fieldConsultantIds: [],\n    clientIds: [],\n    productIds: [],\n    incumbentProductIds: [],\n    pcaIds: [],\n    acaIds: [],\n    mandateStatuses: []\n  });\n  \n  const apiService = ApiNeo4jService.getInstance();\n  \n  /**\n   * Load standard region data using hierarchical complete workflow\n   */\n  const loadRegionData = useCallback(async (regions: string[]) => {\n    console.log(`🚀 Loading STANDARD region data: ${regions.join(', ')}`);\n    setInitialLoading(true);\n    setError(null);\n    \n    try {\n      // Test API connection first\n      const isConnected = await apiService.testConnection();\n      if (!isConnected) {\n        throw new Error('Cannot connect to API backend. Make sure the FastAPI server is running on http://localhost:8000');\n      }\n      \n      const response = await fetch(`${apiService.baseUrl}/api/v1/hierarchical/region/${regions[0]}/complete`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const hierarchicalData: HierarchicalResponse = await response.json();\n      \n      if (!hierarchicalData.success || !hierarchicalData.data) {\n        throw new Error(hierarchicalData.error || 'Failed to get hierarchical data');\n      }\n      \n      console.log(`📊 Standard data loaded:`, {\n        totalNodes: hierarchicalData.data.graph_data.nodes.length,\n        totalRelationships: hierarchicalData.data.graph_data.relationships.length,\n        filterOptionsCount: hierarchicalData.data.statistics.total_filter_options\n      });\n      \n      // Transform to expected format\n      const data: Neo4jResult = {\n        nodes: hierarchicalData.data.graph_data.nodes,\n        relationships: hierarchicalData.data.graph_data.relationships,\n        metadata: {\n          region: hierarchicalData.data.region,\n          statistics: hierarchicalData.data.statistics,\n          source: 'hierarchical_complete_workflow',\n          mode: 'standard'\n        }\n      };\n      \n      setRegionData(data);\n      setCurrentRegions(regions);\n      \n      const transformedOptions = transformHierarchicalOptions(hierarchicalData.data.filter_options || {});\n      setFilterOptions(transformedOptions);\n      \n      // Apply default filters\n      const defaultFilters: FilterCriteria = {\n        regions,\n        nodeTypes: ['CONSULTANT', 'FIELD_CONSULTANT', 'COMPANY', 'PRODUCT'],\n        showInactive: true,\n        sales_regions: [],\n        channels: [],\n        ratings: [],\n        influenceLevels: [],\n        assetClasses: [],\n        consultantIds: [],\n        fieldConsultantIds: [],\n        clientIds: [],\n        productIds: [],\n        incumbentProductIds: [],\n        pcaIds: [],\n        acaIds: [],\n        mandateStatuses: []\n      };\n      \n      console.log(`🔧 Applying default filters to standard data`);\n      \n      const filteredData = await apiService.applyFiltersToData(data, defaultFilters);\n      const reactFlowData = transformNeo4jToReactFlow(filteredData);\n      const layoutedData = layoutWithDagre(reactFlowData.nodes, reactFlowData.edges);\n      \n      console.log('🎯 Setting standard graph data:', {\n        nodes: layoutedData.nodes.length,\n        edges: layoutedData.edges.length,\n        timestamp: Date.now()\n      });\n      \n      const newGraphData = {\n        nodes: layoutedData.nodes.map(n => ({ ...n })),\n        edges: layoutedData.edges.map(e => ({ ...e }))\n      };\n      \n      setGraphData(newGraphData);\n      setCurrentFilters(defaultFilters);\n      \n      console.log('✅ Standard region data loaded successfully');\n      \n    } catch (err) {\n      console.error('❌ Error loading standard region data:', err);\n      setError(err instanceof Error ? err.message : 'Failed to load region data');\n      setGraphData({ nodes: [], edges: [] });\n    } finally {\n      setInitialLoading(false);\n    }\n  }, [apiService, setGraphData]);\n\n  /**\n   * 🆕 NEW: Load recommendations data for a specific region\n   */\n  const loadRecommendationsData = useCallback(async (regions: string[]) => {\n    console.log(`🎯 Loading RECOMMENDATIONS data for: ${regions.join(', ')}`);\n    setInitialLoading(true);\n    setError(null);\n    \n    try {\n      // Test API connection first\n      const isConnected = await apiService.testConnection();\n      if (!isConnected) {\n        throw new Error('Cannot connect to API backend. Make sure the FastAPI server is running on http://localhost:8000');\n      }\n      \n      // 🆕 NEW: Call recommendations endpoint\n      const response = await fetch(`${apiService.baseUrl}/api/v1/hierarchical/region/${regions[0]}/recommendations`);\n      \n      if (!response.ok) {\n        // If recommendations endpoint doesn't exist yet, fall back to standard with message\n        if (response.status === 404) {\n          console.warn('⚠️ Recommendations endpoint not yet implemented, falling back to standard data');\n          setError('Recommendations endpoint not yet implemented. Using standard data for now.');\n          await loadRegionData(regions);\n          return;\n        }\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const hierarchicalData: HierarchicalResponse = await response.json();\n      \n      if (!hierarchicalData.success || !hierarchicalData.data) {\n        throw new Error(hierarchicalData.error || 'Failed to get recommendations data');\n      }\n      \n      console.log(`📊 Recommendations data loaded:`, {\n        totalNodes: hierarchicalData.data.graph_data.nodes.length,\n        totalRelationships: hierarchicalData.data.graph_data.relationships.length,\n        incumbentProducts: hierarchicalData.data.graph_data.nodes.filter(n => n.labels?.includes('INCUMBENT_PRODUCT')).length,\n        biRecommends: hierarchicalData.data.graph_data.relationships.filter(r => r.type === 'BI_RECOMMENDS').length\n      });\n      \n      // Transform to expected format\n      const data: Neo4jResult = {\n        nodes: hierarchicalData.data.graph_data.nodes,\n        relationships: hierarchicalData.data.graph_data.relationships,\n        metadata: {\n          region: hierarchicalData.data.region,\n          statistics: hierarchicalData.data.statistics,\n          source: 'hierarchical_recommendations',\n          mode: 'recommendations'\n        }\n      };\n      \n      setRegionData(data);\n      setCurrentRegions(regions);\n      \n      const transformedOptions = transformHierarchicalOptions(hierarchicalData.data.filter_options || {});\n      setFilterOptions(transformedOptions);\n      \n      // Apply default filters (including INCUMBENT_PRODUCT)\n      const defaultFilters: FilterCriteria = {\n        regions,\n        nodeTypes: ['CONSULTANT', 'FIELD_CONSULTANT', 'COMPANY', 'PRODUCT', 'INCUMBENT_PRODUCT'],\n        showInactive: true,\n        sales_regions: [],\n        channels: [],\n        ratings: [],\n        influenceLevels: [],\n        assetClasses: [],\n        consultantIds: [],\n        fieldConsultantIds: [],\n        clientIds: [],\n        productIds: [],\n        incumbentProductIds: [],\n        pcaIds: [],\n        acaIds: [],\n        mandateStatuses: []\n      };\n      \n      console.log(`🔧 Applying default filters to recommendations data`);\n      \n      const filteredData = await apiService.applyFiltersToData(data, defaultFilters);\n      const reactFlowData = transformNeo4jToReactFlow(filteredData);\n      const layoutedData = layoutWithDagre(reactFlowData.nodes, reactFlowData.edges);\n      \n      console.log('🎯 Setting recommendations graph data:', {\n        nodes: layoutedData.nodes.length,\n        edges: layoutedData.edges.length,\n        incumbentProducts: layoutedData.nodes.filter(n => n.type === 'INCUMBENT_PRODUCT').length,\n        biRecommends: layoutedData.edges.filter(e => e.data?.relType === 'BI_RECOMMENDS').length,\n        timestamp: Date.now()\n      });\n      \n      const newGraphData = {\n        nodes: layoutedData.nodes.map(n => ({ ...n })),\n        edges: layoutedData.edges.map(e => ({ ...e }))\n      };\n      \n      setGraphData(newGraphData);\n      setCurrentFilters(defaultFilters);\n      \n      console.log('✅ Recommendations data loaded successfully');\n      \n    } catch (err) {\n      console.error('❌ Error loading recommendations data:', err);\n      setError(err instanceof Error ? err.message : 'Failed to load recommendations data');\n      setGraphData({ nodes: [], edges: [] });\n    } finally {\n      setInitialLoading(false);\n    }\n  }, [apiService, setGraphData, loadRegionData]);\n\n  /**\n   * 🆕 NEW: Switch between standard and recommendations mode\n   */\n  const switchMode = useCallback(async (mode: 'standard' | 'recommendations', regions: string[] = currentRegions) => {\n    console.log(`🔄 Switching to ${mode} mode for regions: ${regions.join(', ')}`);\n    \n    if (mode === 'recommendations') {\n      await loadRecommendationsData(regions);\n    } else {\n      await loadRegionData(regions);\n    }\n  }, [currentRegions, loadRecommendationsData, loadRegionData]);\n  \n  /**\n   * Handle region changes using hierarchical endpoint\n   */\n  const changeRegions = useCallback(async (newRegions: string[]) => {\n    if (JSON.stringify(newRegions.sort()) === JSON.stringify(currentRegions.sort())) {\n      return; // No change\n    }\n    \n    console.log(`🔄 Changing regions: ${currentRegions} → ${newRegions}`);\n    \n    // Clear existing graph data immediately\n    setGraphData({ nodes: [], edges: [] });\n    setInitialLoading(true);\n    setError(null);\n    \n    try {\n      // Determine current mode and load appropriate data\n      const currentMode = regionData?.metadata?.mode || 'standard';\n      \n      if (currentMode === 'recommendations') {\n        await loadRecommendationsData(newRegions);\n      } else {\n        await loadRegionData(newRegions);\n      }\n      \n      console.log('✅ Region change completed successfully');\n      \n    } catch (err) {\n      console.error('❌ Error changing regions:', err);\n      setError(err instanceof Error ? err.message : 'Failed to change regions');\n      setGraphData({ nodes: [], edges: [] });\n    }\n  }, [currentRegions, regionData?.metadata?.mode, loadRecommendationsData, loadRegionData, setGraphData]);\n  \n  /**\n   * Apply filters to current region data\n   */\n  const applyFilters = useCallback(async (filters: Partial<FilterCriteria>) => {\n    console.log('🔧 applyFilters() called with filters:', filters);\n    \n    if (initialLoading || filterLoading) {\n      console.warn('⚠️ Cannot apply filters while loading');\n      return;\n    }\n    \n    if (!regionData) {\n      console.warn('⚠️ No region data available to filter');\n      setError('No region data available. Please wait for data to load.');\n      return;\n    }\n    \n    setFilterLoading(true);\n    setError(null);\n    \n    try {\n      const newFilters: FilterCriteria = {\n        regions: currentRegions,\n        nodeTypes: ['CONSULTANT', 'FIELD_CONSULTANT', 'COMPANY', 'PRODUCT', 'INCUMBENT_PRODUCT'],\n        showInactive: true,\n        sales_regions: [],\n        channels: [],\n        ratings: [],\n        influenceLevels: [],\n        assetClasses: [],\n        consultantIds: [],\n        fieldConsultantIds: [],\n        clientIds: [],\n        productIds: [],\n        incumbentProductIds: [],\n        pcaIds: [],\n        acaIds: [],\n        mandateStatuses: [],\n        ...filters\n      };\n      \n      console.log('📋 Final filters being applied:', newFilters);\n      \n      const filteredData = await apiService.applyFiltersToData(regionData, newFilters);\n      const reactFlowData = transformNeo4jToReactFlow(filteredData);\n      const layoutedData = layoutWithDagre(reactFlowData.nodes, reactFlowData.edges);\n      \n      setCurrentFilters(newFilters);\n      \n      console.log('🎯 Setting graph data from applyFilters:', {\n        nodes: layoutedData.nodes.length,\n        edges: layoutedData.edges.length,\n        timestamp: Date.now()\n      });\n      \n      const newGraphData = {\n        nodes: layoutedData.nodes.map(n => ({ ...n })),\n        edges: layoutedData.edges.map(e => ({ ...e }))\n      };\n      \n      setGraphData(newGraphData);\n      \n      console.log('✅ Filters applied successfully');\n      \n    } catch (err) {\n      console.error('❌ Error applying filters:', err);\n      setError(err instanceof Error ? err.message : 'Failed to apply filters');\n    } finally {\n      setFilterLoading(false);\n    }\n  }, [regionData, currentRegions, initialLoading, filterLoading, apiService, setGraphData]);\n  \n  /**\n   * Reset filters to defaults\n   */\n  const resetFilters = useCallback(() => {\n    const currentMode = regionData?.metadata?.mode || 'standard';\n    \n    // 🎯 FIXED: Ensure PRODUCT is always included in both modes\n    const getDefaultNodeTypes = () => {\n      if (currentMode === 'recommendations') {\n        return ['CONSULTANT', 'FIELD_CONSULTANT', 'COMPANY', 'PRODUCT', 'INCUMBENT_PRODUCT'];\n      } else {\n        return ['CONSULTANT', 'FIELD_CONSULTANT', 'COMPANY', 'PRODUCT'];\n      }\n    };\n    \n    const defaultFilters: Partial<FilterCriteria> = {\n      nodeTypes: getDefaultNodeTypes(), // 🎯 FIXED: Use function instead of inline logic\n      showInactive: true,\n      sales_regions: [],\n      channels: [],\n      ratings: [],\n      influenceLevels: [],\n      assetClasses: [],\n      consultantIds: [],\n      fieldConsultantIds: [],\n      clientIds: [],\n      productIds: [],\n      incumbentProductIds: [],\n      pcaIds: [],\n      acaIds: [],\n      mandateStatuses: []\n    };\n    \n    console.log(`🔄 Resetting filters for ${currentMode} mode with nodeTypes:`, defaultFilters.nodeTypes);\n    \n    applyFilters(defaultFilters);\n  }, [applyFilters, regionData?.metadata?.mode]);\n  \n  /**\n   * Get available regions\n   */\n  const getAvailableRegions = useCallback(() => {\n    return ['NAI', 'EMEA', 'APAC'];\n  }, []);\n  \n  // Initial load on mount\n  const [hasInitialized, setHasInitialized] = useState(false);\n  \n  useEffect(() => {\n    if (!hasInitialized) {\n      console.log('🚀 Initial mount - loading NAI data using standard workflow');\n      setHasInitialized(true);\n      loadRegionData(['NAI']);\n    }\n  }, [hasInitialized, loadRegionData]);\n  \n  return {\n    // Data\n    graphData,\n    filterOptions,\n    currentFilters,\n    currentRegions,\n    updateCounter,\n    \n    // Loading states\n    initialLoading,\n    filterLoading,\n    error,\n    \n    // Actions\n    changeRegions,\n    applyFilters,\n    resetFilters,\n    getAvailableRegions,\n    \n    // 🆕 NEW: Recommendations mode actions\n    loadRecommendationsData,\n    switchMode,\n    \n    // Computed properties\n    hasData: graphData.nodes.length > 0,\n    nodeCount: graphData.nodes.length,\n    edgeCount: graphData.edges.length,\n    \n    // 🆕 NEW: Mode detection\n    isRecommendationsMode: regionData?.metadata?.mode === 'recommendations',\n    dataSource: regionData?.metadata?.source || 'unknown',\n    currentMode: regionData?.metadata?.mode || 'standard'\n  };\n};"],"mappings":"AAAA;AACA,OAASA,QAAQ,CAAEC,SAAS,CAAEC,WAAW,KAAQ,OAAO,CAExD,MAAO,CAAAC,eAAe,KAAM,6BAA6B,CACzD,OAAwCC,4BAA4B,KAAQ,sBAAsB,CAElG,MAAO,CAAAC,KAAK,KAAM,OAAO,CAyCzB;AACA,KAAM,CAAAC,MAAM,CAAG,GAAG,CAClB,KAAM,CAAAC,MAAM,CAAG,GAAG,CAElB,KAAM,CAAAC,eAAe,CAAGA,CAACC,KAAa,CAAEC,KAAa,GAAK,CACxD,KAAM,CAAAC,CAAC,CAAG,GAAI,CAAAN,KAAK,CAACO,QAAQ,CAACC,KAAK,CAAC,CAAC,CACpCF,CAAC,CAACG,mBAAmB,CAAC,KAAO,CAAC,CAAC,CAAC,CAAC,CACjCH,CAAC,CAACI,QAAQ,CAAC,CAAEC,OAAO,CAAE,IAAI,CAAEC,OAAO,CAAE,GAAG,CAAEC,OAAO,CAAE,GAAI,CAAC,CAAC,CAEzDT,KAAK,CAACU,OAAO,CAAEC,CAAC,EAAKT,CAAC,CAACU,OAAO,CAACD,CAAC,CAACE,EAAE,CAAE,CAAEC,KAAK,CAAEjB,MAAM,CAAEkB,MAAM,CAAEjB,MAAO,CAAC,CAAC,CAAC,CACxEG,KAAK,CAACS,OAAO,CAAEM,CAAC,EAAKd,CAAC,CAACe,OAAO,CAACD,CAAC,CAACE,MAAM,CAAEF,CAAC,CAACG,MAAM,CAAC,CAAC,CACnDvB,KAAK,CAACwB,MAAM,CAAClB,CAAC,CAAC,CAEf,KAAM,CAAAmB,aAAa,CAAGrB,KAAK,CAACsB,GAAG,CAAEX,CAAC,EAAK,CACrC,KAAM,CAAAY,GAAG,CAAGrB,CAAC,CAACsB,IAAI,CAACb,CAAC,CAACE,EAAE,CAAC,CACxB,MAAO,CAAE,GAAGF,CAAC,CAAEc,QAAQ,CAAE,CAAEC,CAAC,CAAEH,GAAG,CAACG,CAAC,CAAG7B,MAAM,CAAG,CAAC,CAAE8B,CAAC,CAAEJ,GAAG,CAACI,CAAC,CAAG7B,MAAM,CAAG,CAAE,CAAE,CAAC,CAC7E,CAAC,CAAC,CAEF,MAAO,CAAEE,KAAK,CAAEqB,aAAa,CAAEpB,KAAM,CAAC,CACxC,CAAC,CAED;AACA,KAAM,CAAA2B,yBAAyB,CAAIC,IAAiB,EAA8D,CAChHC,OAAO,CAACC,GAAG,CAAC,yEAAyE,CAAE,CACrFC,UAAU,CAAEH,IAAI,CAAC7B,KAAK,CAACiC,MAAM,CAC7BC,kBAAkB,CAAEL,IAAI,CAACM,aAAa,CAACF,MACzC,CAAC,CAAC,CAEF;AACA,KAAM,CAAAG,kBAAkB,CAAGP,IAAI,CAACM,aAAa,CAACE,MAAM,CAACC,GAAG,EAAIA,GAAG,CAACC,IAAI,GAAK,OAAO,CAAC,CACjFT,OAAO,CAACC,GAAG,CAAC,YAAYK,kBAAkB,CAACH,MAAM,sBAAsB,CAAC,CAExE;AACA,KAAM,CAAAO,iBAAiB,CAAG,GAAI,CAAAC,GAAG,CAAsH,CAAC,CAExJ;AACA,KAAM,CAAAC,kBAAkB,CAAIC,KAAa,EAAyD,CAChG,KAAM,CAAAC,UAAU,CAAGD,KAAK,SAALA,KAAK,iBAALA,KAAK,CAAEE,WAAW,CAAC,CAAC,CACvC,OAAQD,UAAU,EAChB,IAAK,UAAU,CAAE,MAAO,UAAU,CAClC,IAAK,UAAU,CAAE,MAAO,UAAU,CAClC,IAAK,YAAY,CAAE,MAAO,YAAY,CACtC,IAAK,SAAS,CAAE,MAAO,SAAS,CAChC,QAAS,MAAO,SAAS,CAAE;AAC7B,CACF,CAAC,CAEDR,kBAAkB,CAAC1B,OAAO,CAAC4B,GAAG,EAAI,CAChC,KAAM,CAAAQ,cAAc,CAAGjB,IAAI,CAAC7B,KAAK,CAAC+C,IAAI,CAACpC,CAAC,EAAIA,CAAC,CAACE,EAAE,GAAKyB,GAAG,CAACU,aAAa,CAAC,CACvE,KAAM,CAAAC,WAAW,CAAGpB,IAAI,CAAC7B,KAAK,CAAC+C,IAAI,CAACpC,CAAC,EAAIA,CAAC,CAACE,EAAE,GAAKyB,GAAG,CAACY,WAAW,CAAC,CAElE,GAAIJ,cAAc,EAAIG,WAAW,CAAE,CACjC,KAAM,CAAAE,cAAc,CAAGL,cAAc,CAACM,UAAU,CAACC,IAAI,EAAIP,cAAc,CAACM,UAAU,CAACE,KAAK,EAAIR,cAAc,CAACjC,EAAE,CAC7G,KAAM,CAAA0C,cAAc,CAAGjB,GAAG,CAACc,UAAU,CAACI,SAAS,EAAIlB,GAAG,CAACc,UAAU,CAACK,MAAM,EAAInB,GAAG,CAACc,UAAU,CAACM,IAAI,EAAI,SAAS,CAC5G,KAAM,CAAAC,mBAAmB,CAAGjB,kBAAkB,CAACa,cAAc,CAAC,CAE9D,KAAM,CAAAE,MAAM,CAAG,CACbG,UAAU,CAAET,cAAc,CAC1BK,SAAS,CAAEG,mBAAmB,CAC9BF,MAAM,CAAEF,cACV,CAAC,CAED,GAAI,CAACf,iBAAiB,CAACqB,GAAG,CAACZ,WAAW,CAACpC,EAAE,CAAC,CAAE,CAC1C2B,iBAAiB,CAACsB,GAAG,CAACb,WAAW,CAACpC,EAAE,CAAE,EAAE,CAAC,CAC3C,CACA2B,iBAAiB,CAACuB,GAAG,CAACd,WAAW,CAACpC,EAAE,CAAC,CAAEmD,IAAI,CAACP,MAAM,CAAC,CAEnD3B,OAAO,CAACC,GAAG,CAAC,wBAAwBoB,cAAc,UAAUF,WAAW,CAACG,UAAU,CAACC,IAAI,EAAIJ,WAAW,CAACpC,EAAE,QAAQ8C,mBAAmB,GAAG,CAAC,CAC1I,CACF,CAAC,CAAC,CAEF7B,OAAO,CAACC,GAAG,CAAC,oCAAoCS,iBAAiB,CAACyB,IAAI,WAAW,CAAC,CAElF;AACA,KAAM,CAAAjE,KAA0B,CAAG6B,IAAI,CAAC7B,KAAK,CAACsB,GAAG,CAAC4C,SAAS,EAAI,CAC7D,KAAM,CAAAC,QAAqB,CAAG,CAC5B,GAAGD,SAAS,CAACd,UAAU,CACvBvC,EAAE,CAAEqD,SAAS,CAACd,UAAU,CAACvC,EAAE,EAAIqD,SAAS,CAACrD,EAAE,CAC3CwC,IAAI,CAAEa,SAAS,CAACd,UAAU,CAACC,IAAI,EAAIa,SAAS,CAACd,UAAU,CAACE,KAAK,EAAIY,SAAS,CAACrD,EAAE,CAC7EyC,KAAK,CAAEY,SAAS,CAACd,UAAU,CAACE,KAAK,EAAIY,SAAS,CAACd,UAAU,CAACC,IAAI,EAAIa,SAAS,CAACrD,EAC9E,CAAC,CAED;AACA,GAAIqD,SAAS,CAACE,MAAM,CAACC,QAAQ,CAAC,SAAS,CAAC,EAAIH,SAAS,CAACE,MAAM,CAACC,QAAQ,CAAC,mBAAmB,CAAC,CAAE,CAC1F,KAAM,CAAAC,gBAAgB,CAAG9B,iBAAiB,CAACuB,GAAG,CAACG,SAAS,CAACrD,EAAE,CAAC,EAAI,EAAE,CAClEsD,QAAQ,CAACI,OAAO,CAAGD,gBAAgB,CAEnCxC,OAAO,CAACC,GAAG,CAAC,eAAeoC,QAAQ,CAACd,IAAI,MAAMa,SAAS,CAACrD,EAAE,aAAayD,gBAAgB,CAACrC,MAAM,UAAU,CAAC,CAC3G,CAEA;AACA,GAAIiC,SAAS,CAACE,MAAM,CAACC,QAAQ,CAAC,kBAAkB,CAAC,EAAI,CAACF,QAAQ,CAACK,kBAAkB,CAAE,CACjF,GAAI,CAAAC,QAAQ,CAAG,EAAE,CACjB,KAAM,CAAAC,MAAM,CAAGR,SAAS,CAACrD,EAAE,EAAI,EAAE,CAEjC,GAAI6D,MAAM,CAACL,QAAQ,CAAC,IAAI,CAAC,CAAE,CACzBI,QAAQ,CAAGC,MAAM,CAACC,OAAO,CAAC,IAAI,CAAE,IAAI,CAAC,CACvC,CAAC,IAAM,IAAIR,QAAQ,CAACS,GAAG,CAAE,CACvBH,QAAQ,CAAGN,QAAQ,CAACS,GAAG,CACzB,CAEA,GAAIH,QAAQ,CAAE,CACZN,QAAQ,CAACK,kBAAkB,CAAGC,QAAQ,CACtC3C,OAAO,CAACC,GAAG,CAAC,8BAA8B0C,QAAQ,wBAAwBC,MAAM,EAAE,CAAC,CACrF,CACF,CAEA,MAAO,CACL7D,EAAE,CAAEqD,SAAS,CAACrD,EAAE,CAChB0B,IAAI,CAAE2B,SAAS,CAACE,MAAM,CAAC,CAAC,CAAC,CACzBvC,IAAI,CAAEsC,QAAQ,CACd1C,QAAQ,CAAE,CAAEC,CAAC,CAAE,CAAC,CAAEC,CAAC,CAAE,CAAE,CACzB,CAAC,CACH,CAAC,CAAC,CAEF;AACA,KAAM,CAAA1B,KAAuB,CAAG4B,IAAI,CAACM,aAAa,CAC/CE,MAAM,CAACC,GAAG,EAAIA,GAAG,CAACC,IAAI,GAAK,OAAO,CAAC,CACnCjB,GAAG,CAACgB,GAAG,EAAI,CACV,KAAM,CAAAuC,QAAkB,CAAG,CACzBC,OAAO,CAAExC,GAAG,CAACC,IAAW,CACxB,GAAGD,GAAG,CAACc,UACT,CAAC,CAED;AACA,GAAId,GAAG,CAACc,UAAU,CAAC2B,cAAc,EAAI,CAACF,QAAQ,CAACG,aAAa,CAAE,CAC5DH,QAAQ,CAACG,aAAa,CAAG1C,GAAG,CAACc,UAAU,CAAC2B,cAAc,CACxD,CAEA,GAAIzC,GAAG,CAACc,UAAU,CAAC6B,kBAAkB,EAAI,CAACJ,QAAQ,CAACK,gBAAgB,CAAE,CACnEL,QAAQ,CAACK,gBAAgB,CAAG5C,GAAG,CAACc,UAAU,CAAC6B,kBAAkB,CAC/D,CAEA,GAAI3C,GAAG,CAACc,UAAU,CAACI,SAAS,EAAI,CAACqB,QAAQ,CAACpB,MAAM,CAAE,CAChDoB,QAAQ,CAACpB,MAAM,CAAGnB,GAAG,CAACc,UAAU,CAACI,SAAS,CAC5C,CAEA;AACAqB,QAAQ,CAACM,QAAQ,CAAG7C,GAAG,CAACU,aAAa,CACrC6B,QAAQ,CAACO,QAAQ,CAAG9C,GAAG,CAACY,WAAW,CAEnC,MAAO,CACLrC,EAAE,CAAEyB,GAAG,CAACzB,EAAE,CACVK,MAAM,CAAEoB,GAAG,CAACU,aAAa,CACzB7B,MAAM,CAAEmB,GAAG,CAACY,WAAW,CACvBX,IAAI,CAAE,QAAQ,CACdV,IAAI,CAAEgD,QACR,CAAC,CACH,CAAC,CAAC,CAEJ;AACA,KAAM,CAAAQ,YAAY,CAAGrF,KAAK,CAACqC,MAAM,CAAC1B,CAAC,EAAIA,CAAC,CAAC4B,IAAI,GAAK,SAAS,EAAI5B,CAAC,CAAC4B,IAAI,GAAK,mBAAmB,CAAC,CAC9F,KAAM,CAAA+C,mBAAmB,CAAGD,YAAY,CAAChD,MAAM,CAAC1B,CAAC,EAAIA,CAAC,CAACkB,IAAI,CAAC0C,OAAO,EAAI5D,CAAC,CAACkB,IAAI,CAAC0C,OAAO,CAACtC,MAAM,CAAG,CAAC,CAAC,CAEjGH,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAE,CACxCwD,aAAa,CAAEF,YAAY,CAACpD,MAAM,CAClCqD,mBAAmB,CAAEA,mBAAmB,CAACrD,MAAM,CAC/CuD,cAAc,CAAEpD,kBAAkB,CAACH,MAAM,CACzCwD,WAAW,CAAEzF,KAAK,CAACiC,MAAM,CACzByD,WAAW,CAAEzF,KAAK,CAACgC,MAAM,CACzB0D,SAAS,CAAEC,KAAK,CAACC,IAAI,CAAC,GAAI,CAAAC,GAAG,CAAC9F,KAAK,CAACsB,GAAG,CAACX,CAAC,EAAIA,CAAC,CAAC4B,IAAI,CAAC,CAACF,MAAM,CAAC0D,OAAO,CAAC,CAAC,CAAC,CACtEC,SAAS,CAAEJ,KAAK,CAACC,IAAI,CAAC,GAAI,CAAAC,GAAG,CAAC7F,KAAK,CAACqB,GAAG,CAACN,CAAC,OAAAiF,OAAA,QAAAA,OAAA,CAAIjF,CAAC,CAACa,IAAI,UAAAoE,OAAA,iBAANA,OAAA,CAAQnB,OAAO,GAAC,CAACzC,MAAM,CAAC0D,OAAO,CAAC,CAAC,CAChF,CAAC,CAAC,CAEF,MAAO,CAAE/F,KAAK,CAAEC,KAAM,CAAC,CACzB,CAAC,CAED,MAAO,MAAM,CAAAiG,YAAY,CAAGA,CAAA,GAAM,KAAAC,qBAAA,CAAAC,qBAAA,CAAAC,qBAAA,CAAAC,qBAAA,CAAAC,qBAAA,CAChC;AACA,KAAM,CAACC,cAAc,CAAEC,iBAAiB,CAAC,CAAGlH,QAAQ,CAAC,IAAI,CAAC,CAC1D,KAAM,CAACmH,aAAa,CAAEC,gBAAgB,CAAC,CAAGpH,QAAQ,CAAC,KAAK,CAAC,CACzD,KAAM,CAACqH,KAAK,CAAEC,QAAQ,CAAC,CAAGtH,QAAQ,CAAgB,IAAI,CAAC,CAEvD;AACA,KAAM,CAACuH,cAAc,CAAEC,iBAAiB,CAAC,CAAGxH,QAAQ,CAAW,CAAC,KAAK,CAAC,CAAC,CACvE,KAAM,CAACyH,UAAU,CAAEC,aAAa,CAAC,CAAG1H,QAAQ,CAAqB,IAAI,CAAC,CACtE,KAAM,CAAC2H,aAAa,CAAEC,gBAAgB,CAAC,CAAG5H,QAAQ,CAAuB,IAAI,CAAC,CAE9E;AACA,KAAM,CAAC6H,SAAS,CAAEC,oBAAoB,CAAC,CAAG9H,QAAQ,CAA0D,CAC1GS,KAAK,CAAE,EAAE,CACTC,KAAK,CAAE,EACT,CAAC,CAAC,CAEF,KAAM,CAACqH,aAAa,CAAEC,gBAAgB,CAAC,CAAGhI,QAAQ,CAAC,CAAC,CAAC,CAErD,KAAM,CAAAiI,YAAY,CAAG/H,WAAW,CAAEgI,OAAgE,EAAK,CACrG3F,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAE,CAChD/B,KAAK,CAAEyH,OAAO,CAACzH,KAAK,CAACiC,MAAM,CAC3BhC,KAAK,CAAEwH,OAAO,CAACxH,KAAK,CAACgC,MAAM,CAC3ByF,SAAS,CAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CACrBN,aAAa,CAAEA,aAAa,CAAG,CACjC,CAAC,CAAC,CAEF;AACA,KAAM,CAAAO,QAAQ,CAAGJ,OAAO,CAACzH,KAAK,CAACqC,MAAM,CAAC1B,CAAC,EAAIA,CAAC,CAAC4B,IAAI,GAAK,SAAS,EAAI5B,CAAC,CAAC4B,IAAI,GAAK,mBAAmB,CAAC,CAClG,KAAM,CAAA+C,mBAAmB,CAAGuC,QAAQ,CAACxF,MAAM,CAACyF,CAAC,EAAIA,CAAC,CAACjG,IAAI,CAAC0C,OAAO,EAAIuD,CAAC,CAACjG,IAAI,CAAC0C,OAAO,CAACtC,MAAM,CAAG,CAAC,CAAC,CAC7FH,OAAO,CAACC,GAAG,CAAC,kBAAkB8F,QAAQ,CAAC5F,MAAM,cAAcqD,mBAAmB,CAACrD,MAAM,eAAe,CAAC,CAErG,KAAM,CAAA8F,WAAW,CAAG,CAClB/H,KAAK,CAAEyH,OAAO,CAACzH,KAAK,CACpBC,KAAK,CAAEwH,OAAO,CAACxH,KAAK,CACpB+H,UAAU,CAAEL,IAAI,CAACC,GAAG,CAAC,CAAC,CACtBK,SAAS,CAAEC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CACtC,CAAC,CAEDf,oBAAoB,CAACU,WAAkB,CAAC,CACxCR,gBAAgB,CAACc,IAAI,EAAIA,IAAI,CAAG,CAAC,CAAC,CACpC,CAAC,CAAE,CAACf,aAAa,CAAC,CAAC,CAEnB;AACA,KAAM,CAACgB,cAAc,CAAEC,iBAAiB,CAAC,CAAGhJ,QAAQ,CAAiB,CACnEiJ,OAAO,CAAE,CAAC,KAAK,CAAC,CAChB7C,SAAS,CAAE,CAAC,YAAY,CAAE,kBAAkB,CAAE,SAAS,CAAE,SAAS,CAAE,mBAAmB,CAAC,CACxF8C,YAAY,CAAE,IAAI,CAClBC,aAAa,CAAE,EAAE,CACjBC,QAAQ,CAAE,EAAE,CACZpE,OAAO,CAAE,EAAE,CACXqE,eAAe,CAAE,EAAE,CACnBC,YAAY,CAAE,EAAE,CAChBC,aAAa,CAAE,EAAE,CACjBC,kBAAkB,CAAE,EAAE,CACtBC,SAAS,CAAE,EAAE,CACbC,UAAU,CAAE,EAAE,CACdC,mBAAmB,CAAE,EAAE,CACvBC,MAAM,CAAE,EAAE,CACVC,MAAM,CAAE,EAAE,CACVC,eAAe,CAAE,EACnB,CAAC,CAAC,CAEF,KAAM,CAAAC,UAAU,CAAG5J,eAAe,CAAC6J,WAAW,CAAC,CAAC,CAEhD;AACF;AACA,KACE,KAAM,CAAAC,cAAc,CAAG/J,WAAW,CAAC,KAAO,CAAA+I,OAAiB,EAAK,CAC9D1G,OAAO,CAACC,GAAG,CAAC,oCAAoCyG,OAAO,CAACiB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CACrEhD,iBAAiB,CAAC,IAAI,CAAC,CACvBI,QAAQ,CAAC,IAAI,CAAC,CAEd,GAAI,CACF;AACA,KAAM,CAAA6C,WAAW,CAAG,KAAM,CAAAJ,UAAU,CAACK,cAAc,CAAC,CAAC,CACrD,GAAI,CAACD,WAAW,CAAE,CAChB,KAAM,IAAI,CAAAE,KAAK,CAAC,iGAAiG,CAAC,CACpH,CAEA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGR,UAAU,CAACS,OAAO,+BAA+BvB,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAEvG,GAAI,CAACqB,QAAQ,CAACG,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAJ,KAAK,CAAC,QAAQC,QAAQ,CAACI,MAAM,KAAKJ,QAAQ,CAACK,UAAU,EAAE,CAAC,CACpE,CAEA,KAAM,CAAAC,gBAAsC,CAAG,KAAM,CAAAN,QAAQ,CAACO,IAAI,CAAC,CAAC,CAEpE,GAAI,CAACD,gBAAgB,CAACE,OAAO,EAAI,CAACF,gBAAgB,CAACtI,IAAI,CAAE,CACvD,KAAM,IAAI,CAAA+H,KAAK,CAACO,gBAAgB,CAACvD,KAAK,EAAI,iCAAiC,CAAC,CAC9E,CAEA9E,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAE,CACtCuI,UAAU,CAAEH,gBAAgB,CAACtI,IAAI,CAAC0I,UAAU,CAACvK,KAAK,CAACiC,MAAM,CACzDuI,kBAAkB,CAAEL,gBAAgB,CAACtI,IAAI,CAAC0I,UAAU,CAACpI,aAAa,CAACF,MAAM,CACzEwI,kBAAkB,CAAEN,gBAAgB,CAACtI,IAAI,CAAC6I,UAAU,CAACC,oBACvD,CAAC,CAAC,CAEF;AACA,KAAM,CAAA9I,IAAiB,CAAG,CACxB7B,KAAK,CAAEmK,gBAAgB,CAACtI,IAAI,CAAC0I,UAAU,CAACvK,KAAK,CAC7CmC,aAAa,CAAEgI,gBAAgB,CAACtI,IAAI,CAAC0I,UAAU,CAACpI,aAAa,CAC7DyI,QAAQ,CAAE,CACRC,MAAM,CAAEV,gBAAgB,CAACtI,IAAI,CAACgJ,MAAM,CACpCH,UAAU,CAAEP,gBAAgB,CAACtI,IAAI,CAAC6I,UAAU,CAC5CxJ,MAAM,CAAE,gCAAgC,CACxC4J,IAAI,CAAE,UACR,CACF,CAAC,CAED7D,aAAa,CAACpF,IAAI,CAAC,CACnBkF,iBAAiB,CAACyB,OAAO,CAAC,CAE1B,KAAM,CAAAuC,kBAAkB,CAAGpL,4BAA4B,CAACwK,gBAAgB,CAACtI,IAAI,CAACmJ,cAAc,EAAI,CAAC,CAAC,CAAC,CACnG7D,gBAAgB,CAAC4D,kBAAkB,CAAC,CAEpC;AACA,KAAM,CAAAE,cAA8B,CAAG,CACrCzC,OAAO,CACP7C,SAAS,CAAE,CAAC,YAAY,CAAE,kBAAkB,CAAE,SAAS,CAAE,SAAS,CAAC,CACnE8C,YAAY,CAAE,IAAI,CAClBC,aAAa,CAAE,EAAE,CACjBC,QAAQ,CAAE,EAAE,CACZpE,OAAO,CAAE,EAAE,CACXqE,eAAe,CAAE,EAAE,CACnBC,YAAY,CAAE,EAAE,CAChBC,aAAa,CAAE,EAAE,CACjBC,kBAAkB,CAAE,EAAE,CACtBC,SAAS,CAAE,EAAE,CACbC,UAAU,CAAE,EAAE,CACdC,mBAAmB,CAAE,EAAE,CACvBC,MAAM,CAAE,EAAE,CACVC,MAAM,CAAE,EAAE,CACVC,eAAe,CAAE,EACnB,CAAC,CAEDvH,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC,CAE3D,KAAM,CAAAmJ,YAAY,CAAG,KAAM,CAAA5B,UAAU,CAAC6B,kBAAkB,CAACtJ,IAAI,CAAEoJ,cAAc,CAAC,CAC9E,KAAM,CAAAG,aAAa,CAAGxJ,yBAAyB,CAACsJ,YAAY,CAAC,CAC7D,KAAM,CAAAG,YAAY,CAAGtL,eAAe,CAACqL,aAAa,CAACpL,KAAK,CAAEoL,aAAa,CAACnL,KAAK,CAAC,CAE9E6B,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAE,CAC7C/B,KAAK,CAAEqL,YAAY,CAACrL,KAAK,CAACiC,MAAM,CAChChC,KAAK,CAAEoL,YAAY,CAACpL,KAAK,CAACgC,MAAM,CAChCyF,SAAS,CAAEC,IAAI,CAACC,GAAG,CAAC,CACtB,CAAC,CAAC,CAEF,KAAM,CAAA0D,YAAY,CAAG,CACnBtL,KAAK,CAAEqL,YAAY,CAACrL,KAAK,CAACsB,GAAG,CAACX,CAAC,GAAK,CAAE,GAAGA,CAAE,CAAC,CAAC,CAAC,CAC9CV,KAAK,CAAEoL,YAAY,CAACpL,KAAK,CAACqB,GAAG,CAACN,CAAC,GAAK,CAAE,GAAGA,CAAE,CAAC,CAAC,CAC/C,CAAC,CAEDwG,YAAY,CAAC8D,YAAY,CAAC,CAC1B/C,iBAAiB,CAAC0C,cAAc,CAAC,CAEjCnJ,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC,CAE3D,CAAE,MAAOwJ,GAAG,CAAE,CACZzJ,OAAO,CAAC8E,KAAK,CAAC,uCAAuC,CAAE2E,GAAG,CAAC,CAC3D1E,QAAQ,CAAC0E,GAAG,WAAY,CAAA3B,KAAK,CAAG2B,GAAG,CAACC,OAAO,CAAG,4BAA4B,CAAC,CAC3EhE,YAAY,CAAC,CAAExH,KAAK,CAAE,EAAE,CAAEC,KAAK,CAAE,EAAG,CAAC,CAAC,CACxC,CAAC,OAAS,CACRwG,iBAAiB,CAAC,KAAK,CAAC,CAC1B,CACF,CAAC,CAAE,CAAC6C,UAAU,CAAE9B,YAAY,CAAC,CAAC,CAE9B;AACF;AACA,KACE,KAAM,CAAAiE,uBAAuB,CAAGhM,WAAW,CAAC,KAAO,CAAA+I,OAAiB,EAAK,CACvE1G,OAAO,CAACC,GAAG,CAAC,wCAAwCyG,OAAO,CAACiB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CACzEhD,iBAAiB,CAAC,IAAI,CAAC,CACvBI,QAAQ,CAAC,IAAI,CAAC,CAEd,GAAI,CACF;AACA,KAAM,CAAA6C,WAAW,CAAG,KAAM,CAAAJ,UAAU,CAACK,cAAc,CAAC,CAAC,CACrD,GAAI,CAACD,WAAW,CAAE,CAChB,KAAM,IAAI,CAAAE,KAAK,CAAC,iGAAiG,CAAC,CACpH,CAEA;AACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGR,UAAU,CAACS,OAAO,+BAA+BvB,OAAO,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAE9G,GAAI,CAACqB,QAAQ,CAACG,EAAE,CAAE,CAChB;AACA,GAAIH,QAAQ,CAACI,MAAM,GAAK,GAAG,CAAE,CAC3BnI,OAAO,CAAC4J,IAAI,CAAC,gFAAgF,CAAC,CAC9F7E,QAAQ,CAAC,4EAA4E,CAAC,CACtF,KAAM,CAAA2C,cAAc,CAAChB,OAAO,CAAC,CAC7B,OACF,CACA,KAAM,IAAI,CAAAoB,KAAK,CAAC,QAAQC,QAAQ,CAACI,MAAM,KAAKJ,QAAQ,CAACK,UAAU,EAAE,CAAC,CACpE,CAEA,KAAM,CAAAC,gBAAsC,CAAG,KAAM,CAAAN,QAAQ,CAACO,IAAI,CAAC,CAAC,CAEpE,GAAI,CAACD,gBAAgB,CAACE,OAAO,EAAI,CAACF,gBAAgB,CAACtI,IAAI,CAAE,CACvD,KAAM,IAAI,CAAA+H,KAAK,CAACO,gBAAgB,CAACvD,KAAK,EAAI,oCAAoC,CAAC,CACjF,CAEA9E,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAE,CAC7CuI,UAAU,CAAEH,gBAAgB,CAACtI,IAAI,CAAC0I,UAAU,CAACvK,KAAK,CAACiC,MAAM,CACzDuI,kBAAkB,CAAEL,gBAAgB,CAACtI,IAAI,CAAC0I,UAAU,CAACpI,aAAa,CAACF,MAAM,CACzE0J,iBAAiB,CAAExB,gBAAgB,CAACtI,IAAI,CAAC0I,UAAU,CAACvK,KAAK,CAACqC,MAAM,CAAC1B,CAAC,OAAAiL,SAAA,QAAAA,SAAA,CAAIjL,CAAC,CAACyD,MAAM,UAAAwH,SAAA,iBAARA,SAAA,CAAUvH,QAAQ,CAAC,mBAAmB,CAAC,GAAC,CAACpC,MAAM,CACrH4J,YAAY,CAAE1B,gBAAgB,CAACtI,IAAI,CAAC0I,UAAU,CAACpI,aAAa,CAACE,MAAM,CAACyJ,CAAC,EAAIA,CAAC,CAACvJ,IAAI,GAAK,eAAe,CAAC,CAACN,MACvG,CAAC,CAAC,CAEF;AACA,KAAM,CAAAJ,IAAiB,CAAG,CACxB7B,KAAK,CAAEmK,gBAAgB,CAACtI,IAAI,CAAC0I,UAAU,CAACvK,KAAK,CAC7CmC,aAAa,CAAEgI,gBAAgB,CAACtI,IAAI,CAAC0I,UAAU,CAACpI,aAAa,CAC7DyI,QAAQ,CAAE,CACRC,MAAM,CAAEV,gBAAgB,CAACtI,IAAI,CAACgJ,MAAM,CACpCH,UAAU,CAAEP,gBAAgB,CAACtI,IAAI,CAAC6I,UAAU,CAC5CxJ,MAAM,CAAE,8BAA8B,CACtC4J,IAAI,CAAE,iBACR,CACF,CAAC,CAED7D,aAAa,CAACpF,IAAI,CAAC,CACnBkF,iBAAiB,CAACyB,OAAO,CAAC,CAE1B,KAAM,CAAAuC,kBAAkB,CAAGpL,4BAA4B,CAACwK,gBAAgB,CAACtI,IAAI,CAACmJ,cAAc,EAAI,CAAC,CAAC,CAAC,CACnG7D,gBAAgB,CAAC4D,kBAAkB,CAAC,CAEpC;AACA,KAAM,CAAAE,cAA8B,CAAG,CACrCzC,OAAO,CACP7C,SAAS,CAAE,CAAC,YAAY,CAAE,kBAAkB,CAAE,SAAS,CAAE,SAAS,CAAE,mBAAmB,CAAC,CACxF8C,YAAY,CAAE,IAAI,CAClBC,aAAa,CAAE,EAAE,CACjBC,QAAQ,CAAE,EAAE,CACZpE,OAAO,CAAE,EAAE,CACXqE,eAAe,CAAE,EAAE,CACnBC,YAAY,CAAE,EAAE,CAChBC,aAAa,CAAE,EAAE,CACjBC,kBAAkB,CAAE,EAAE,CACtBC,SAAS,CAAE,EAAE,CACbC,UAAU,CAAE,EAAE,CACdC,mBAAmB,CAAE,EAAE,CACvBC,MAAM,CAAE,EAAE,CACVC,MAAM,CAAE,EAAE,CACVC,eAAe,CAAE,EACnB,CAAC,CAEDvH,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC,CAElE,KAAM,CAAAmJ,YAAY,CAAG,KAAM,CAAA5B,UAAU,CAAC6B,kBAAkB,CAACtJ,IAAI,CAAEoJ,cAAc,CAAC,CAC9E,KAAM,CAAAG,aAAa,CAAGxJ,yBAAyB,CAACsJ,YAAY,CAAC,CAC7D,KAAM,CAAAG,YAAY,CAAGtL,eAAe,CAACqL,aAAa,CAACpL,KAAK,CAAEoL,aAAa,CAACnL,KAAK,CAAC,CAE9E6B,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAE,CACpD/B,KAAK,CAAEqL,YAAY,CAACrL,KAAK,CAACiC,MAAM,CAChChC,KAAK,CAAEoL,YAAY,CAACpL,KAAK,CAACgC,MAAM,CAChC0J,iBAAiB,CAAEN,YAAY,CAACrL,KAAK,CAACqC,MAAM,CAAC1B,CAAC,EAAIA,CAAC,CAAC4B,IAAI,GAAK,mBAAmB,CAAC,CAACN,MAAM,CACxF4J,YAAY,CAAER,YAAY,CAACpL,KAAK,CAACoC,MAAM,CAACrB,CAAC,OAAA+K,QAAA,OAAI,EAAAA,QAAA,CAAA/K,CAAC,CAACa,IAAI,UAAAkK,QAAA,iBAANA,QAAA,CAAQjH,OAAO,IAAK,eAAe,GAAC,CAAC7C,MAAM,CACxFyF,SAAS,CAAEC,IAAI,CAACC,GAAG,CAAC,CACtB,CAAC,CAAC,CAEF,KAAM,CAAA0D,YAAY,CAAG,CACnBtL,KAAK,CAAEqL,YAAY,CAACrL,KAAK,CAACsB,GAAG,CAACX,CAAC,GAAK,CAAE,GAAGA,CAAE,CAAC,CAAC,CAAC,CAC9CV,KAAK,CAAEoL,YAAY,CAACpL,KAAK,CAACqB,GAAG,CAACN,CAAC,GAAK,CAAE,GAAGA,CAAE,CAAC,CAAC,CAC/C,CAAC,CAEDwG,YAAY,CAAC8D,YAAY,CAAC,CAC1B/C,iBAAiB,CAAC0C,cAAc,CAAC,CAEjCnJ,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC,CAE3D,CAAE,MAAOwJ,GAAG,CAAE,CACZzJ,OAAO,CAAC8E,KAAK,CAAC,uCAAuC,CAAE2E,GAAG,CAAC,CAC3D1E,QAAQ,CAAC0E,GAAG,WAAY,CAAA3B,KAAK,CAAG2B,GAAG,CAACC,OAAO,CAAG,qCAAqC,CAAC,CACpFhE,YAAY,CAAC,CAAExH,KAAK,CAAE,EAAE,CAAEC,KAAK,CAAE,EAAG,CAAC,CAAC,CACxC,CAAC,OAAS,CACRwG,iBAAiB,CAAC,KAAK,CAAC,CAC1B,CACF,CAAC,CAAE,CAAC6C,UAAU,CAAE9B,YAAY,CAAEgC,cAAc,CAAC,CAAC,CAE9C;AACF;AACA,KACE,KAAM,CAAAwC,UAAU,CAAGvM,WAAW,CAAC,eAAOqL,IAAoC,CAAyC,IAAvC,CAAAtC,OAAiB,CAAAyD,SAAA,CAAAhK,MAAA,IAAAgK,SAAA,MAAAC,SAAA,CAAAD,SAAA,IAAGnF,cAAc,CAC5GhF,OAAO,CAACC,GAAG,CAAC,mBAAmB+I,IAAI,sBAAsBtC,OAAO,CAACiB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAE9E,GAAIqB,IAAI,GAAK,iBAAiB,CAAE,CAC9B,KAAM,CAAAW,uBAAuB,CAACjD,OAAO,CAAC,CACxC,CAAC,IAAM,CACL,KAAM,CAAAgB,cAAc,CAAChB,OAAO,CAAC,CAC/B,CACF,CAAC,CAAE,CAAC1B,cAAc,CAAE2E,uBAAuB,CAAEjC,cAAc,CAAC,CAAC,CAE7D;AACF;AACA,KACE,KAAM,CAAA2C,aAAa,CAAG1M,WAAW,CAAC,KAAO,CAAA2M,UAAoB,EAAK,CAChE,GAAIC,IAAI,CAACC,SAAS,CAACF,UAAU,CAACG,IAAI,CAAC,CAAC,CAAC,GAAKF,IAAI,CAACC,SAAS,CAACxF,cAAc,CAACyF,IAAI,CAAC,CAAC,CAAC,CAAE,CAC/E,OAAQ;AACV,CAEAzK,OAAO,CAACC,GAAG,CAAC,wBAAwB+E,cAAc,MAAMsF,UAAU,EAAE,CAAC,CAErE;AACA5E,YAAY,CAAC,CAAExH,KAAK,CAAE,EAAE,CAAEC,KAAK,CAAE,EAAG,CAAC,CAAC,CACtCwG,iBAAiB,CAAC,IAAI,CAAC,CACvBI,QAAQ,CAAC,IAAI,CAAC,CAEd,GAAI,KAAA2F,oBAAA,CACF;AACA,KAAM,CAAAC,WAAW,CAAG,CAAAzF,UAAU,SAAVA,UAAU,kBAAAwF,oBAAA,CAAVxF,UAAU,CAAE4D,QAAQ,UAAA4B,oBAAA,iBAApBA,oBAAA,CAAsB1B,IAAI,GAAI,UAAU,CAE5D,GAAI2B,WAAW,GAAK,iBAAiB,CAAE,CACrC,KAAM,CAAAhB,uBAAuB,CAACW,UAAU,CAAC,CAC3C,CAAC,IAAM,CACL,KAAM,CAAA5C,cAAc,CAAC4C,UAAU,CAAC,CAClC,CAEAtK,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC,CAEvD,CAAE,MAAOwJ,GAAG,CAAE,CACZzJ,OAAO,CAAC8E,KAAK,CAAC,2BAA2B,CAAE2E,GAAG,CAAC,CAC/C1E,QAAQ,CAAC0E,GAAG,WAAY,CAAA3B,KAAK,CAAG2B,GAAG,CAACC,OAAO,CAAG,0BAA0B,CAAC,CACzEhE,YAAY,CAAC,CAAExH,KAAK,CAAE,EAAE,CAAEC,KAAK,CAAE,EAAG,CAAC,CAAC,CACxC,CACF,CAAC,CAAE,CAAC6G,cAAc,CAAEE,UAAU,SAAVA,UAAU,kBAAAb,qBAAA,CAAVa,UAAU,CAAE4D,QAAQ,UAAAzE,qBAAA,iBAApBA,qBAAA,CAAsB2E,IAAI,CAAEW,uBAAuB,CAAEjC,cAAc,CAAEhC,YAAY,CAAC,CAAC,CAEvG;AACF;AACA,KACE,KAAM,CAAAkF,YAAY,CAAGjN,WAAW,CAAC,KAAO,CAAAkN,OAAgC,EAAK,CAC3E7K,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAE4K,OAAO,CAAC,CAE9D,GAAInG,cAAc,EAAIE,aAAa,CAAE,CACnC5E,OAAO,CAAC4J,IAAI,CAAC,uCAAuC,CAAC,CACrD,OACF,CAEA,GAAI,CAAC1E,UAAU,CAAE,CACflF,OAAO,CAAC4J,IAAI,CAAC,uCAAuC,CAAC,CACrD7E,QAAQ,CAAC,yDAAyD,CAAC,CACnE,OACF,CAEAF,gBAAgB,CAAC,IAAI,CAAC,CACtBE,QAAQ,CAAC,IAAI,CAAC,CAEd,GAAI,CACF,KAAM,CAAA+F,UAA0B,CAAG,CACjCpE,OAAO,CAAE1B,cAAc,CACvBnB,SAAS,CAAE,CAAC,YAAY,CAAE,kBAAkB,CAAE,SAAS,CAAE,SAAS,CAAE,mBAAmB,CAAC,CACxF8C,YAAY,CAAE,IAAI,CAClBC,aAAa,CAAE,EAAE,CACjBC,QAAQ,CAAE,EAAE,CACZpE,OAAO,CAAE,EAAE,CACXqE,eAAe,CAAE,EAAE,CACnBC,YAAY,CAAE,EAAE,CAChBC,aAAa,CAAE,EAAE,CACjBC,kBAAkB,CAAE,EAAE,CACtBC,SAAS,CAAE,EAAE,CACbC,UAAU,CAAE,EAAE,CACdC,mBAAmB,CAAE,EAAE,CACvBC,MAAM,CAAE,EAAE,CACVC,MAAM,CAAE,EAAE,CACVC,eAAe,CAAE,EAAE,CACnB,GAAGsD,OACL,CAAC,CAED7K,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAE6K,UAAU,CAAC,CAE1D,KAAM,CAAA1B,YAAY,CAAG,KAAM,CAAA5B,UAAU,CAAC6B,kBAAkB,CAACnE,UAAU,CAAE4F,UAAU,CAAC,CAChF,KAAM,CAAAxB,aAAa,CAAGxJ,yBAAyB,CAACsJ,YAAY,CAAC,CAC7D,KAAM,CAAAG,YAAY,CAAGtL,eAAe,CAACqL,aAAa,CAACpL,KAAK,CAAEoL,aAAa,CAACnL,KAAK,CAAC,CAE9EsI,iBAAiB,CAACqE,UAAU,CAAC,CAE7B9K,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAE,CACtD/B,KAAK,CAAEqL,YAAY,CAACrL,KAAK,CAACiC,MAAM,CAChChC,KAAK,CAAEoL,YAAY,CAACpL,KAAK,CAACgC,MAAM,CAChCyF,SAAS,CAAEC,IAAI,CAACC,GAAG,CAAC,CACtB,CAAC,CAAC,CAEF,KAAM,CAAA0D,YAAY,CAAG,CACnBtL,KAAK,CAAEqL,YAAY,CAACrL,KAAK,CAACsB,GAAG,CAACX,CAAC,GAAK,CAAE,GAAGA,CAAE,CAAC,CAAC,CAAC,CAC9CV,KAAK,CAAEoL,YAAY,CAACpL,KAAK,CAACqB,GAAG,CAACN,CAAC,GAAK,CAAE,GAAGA,CAAE,CAAC,CAAC,CAC/C,CAAC,CAEDwG,YAAY,CAAC8D,YAAY,CAAC,CAE1BxJ,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC,CAE/C,CAAE,MAAOwJ,GAAG,CAAE,CACZzJ,OAAO,CAAC8E,KAAK,CAAC,2BAA2B,CAAE2E,GAAG,CAAC,CAC/C1E,QAAQ,CAAC0E,GAAG,WAAY,CAAA3B,KAAK,CAAG2B,GAAG,CAACC,OAAO,CAAG,yBAAyB,CAAC,CAC1E,CAAC,OAAS,CACR7E,gBAAgB,CAAC,KAAK,CAAC,CACzB,CACF,CAAC,CAAE,CAACK,UAAU,CAAEF,cAAc,CAAEN,cAAc,CAAEE,aAAa,CAAE4C,UAAU,CAAE9B,YAAY,CAAC,CAAC,CAEzF;AACF;AACA,KACE,KAAM,CAAAqF,YAAY,CAAGpN,WAAW,CAAC,IAAM,KAAAqN,qBAAA,CACrC,KAAM,CAAAL,WAAW,CAAG,CAAAzF,UAAU,SAAVA,UAAU,kBAAA8F,qBAAA,CAAV9F,UAAU,CAAE4D,QAAQ,UAAAkC,qBAAA,iBAApBA,qBAAA,CAAsBhC,IAAI,GAAI,UAAU,CAE5D;AACA,KAAM,CAAAiC,mBAAmB,CAAGA,CAAA,GAAM,CAChC,GAAIN,WAAW,GAAK,iBAAiB,CAAE,CACrC,MAAO,CAAC,YAAY,CAAE,kBAAkB,CAAE,SAAS,CAAE,SAAS,CAAE,mBAAmB,CAAC,CACtF,CAAC,IAAM,CACL,MAAO,CAAC,YAAY,CAAE,kBAAkB,CAAE,SAAS,CAAE,SAAS,CAAC,CACjE,CACF,CAAC,CAED,KAAM,CAAAxB,cAAuC,CAAG,CAC9CtF,SAAS,CAAEoH,mBAAmB,CAAC,CAAC,CAAE;AAClCtE,YAAY,CAAE,IAAI,CAClBC,aAAa,CAAE,EAAE,CACjBC,QAAQ,CAAE,EAAE,CACZpE,OAAO,CAAE,EAAE,CACXqE,eAAe,CAAE,EAAE,CACnBC,YAAY,CAAE,EAAE,CAChBC,aAAa,CAAE,EAAE,CACjBC,kBAAkB,CAAE,EAAE,CACtBC,SAAS,CAAE,EAAE,CACbC,UAAU,CAAE,EAAE,CACdC,mBAAmB,CAAE,EAAE,CACvBC,MAAM,CAAE,EAAE,CACVC,MAAM,CAAE,EAAE,CACVC,eAAe,CAAE,EACnB,CAAC,CAEDvH,OAAO,CAACC,GAAG,CAAC,4BAA4B0K,WAAW,uBAAuB,CAAExB,cAAc,CAACtF,SAAS,CAAC,CAErG+G,YAAY,CAACzB,cAAc,CAAC,CAC9B,CAAC,CAAE,CAACyB,YAAY,CAAE1F,UAAU,SAAVA,UAAU,kBAAAZ,qBAAA,CAAVY,UAAU,CAAE4D,QAAQ,UAAAxE,qBAAA,iBAApBA,qBAAA,CAAsB0E,IAAI,CAAC,CAAC,CAE9C;AACF;AACA,KACE,KAAM,CAAAkC,mBAAmB,CAAGvN,WAAW,CAAC,IAAM,CAC5C,MAAO,CAAC,KAAK,CAAE,MAAM,CAAE,MAAM,CAAC,CAChC,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAACwN,cAAc,CAAEC,iBAAiB,CAAC,CAAG3N,QAAQ,CAAC,KAAK,CAAC,CAE3DC,SAAS,CAAC,IAAM,CACd,GAAI,CAACyN,cAAc,CAAE,CACnBnL,OAAO,CAACC,GAAG,CAAC,6DAA6D,CAAC,CAC1EmL,iBAAiB,CAAC,IAAI,CAAC,CACvB1D,cAAc,CAAC,CAAC,KAAK,CAAC,CAAC,CACzB,CACF,CAAC,CAAE,CAACyD,cAAc,CAAEzD,cAAc,CAAC,CAAC,CAEpC,MAAO,CACL;AACApC,SAAS,CACTF,aAAa,CACboB,cAAc,CACdxB,cAAc,CACdQ,aAAa,CAEb;AACAd,cAAc,CACdE,aAAa,CACbE,KAAK,CAEL;AACAuF,aAAa,CACbO,YAAY,CACZG,YAAY,CACZG,mBAAmB,CAEnB;AACAvB,uBAAuB,CACvBO,UAAU,CAEV;AACAmB,OAAO,CAAE/F,SAAS,CAACpH,KAAK,CAACiC,MAAM,CAAG,CAAC,CACnCmL,SAAS,CAAEhG,SAAS,CAACpH,KAAK,CAACiC,MAAM,CACjCoL,SAAS,CAAEjG,SAAS,CAACnH,KAAK,CAACgC,MAAM,CAEjC;AACAqL,qBAAqB,CAAE,CAAAtG,UAAU,SAAVA,UAAU,kBAAAX,qBAAA,CAAVW,UAAU,CAAE4D,QAAQ,UAAAvE,qBAAA,iBAApBA,qBAAA,CAAsByE,IAAI,IAAK,iBAAiB,CACvEyC,UAAU,CAAE,CAAAvG,UAAU,SAAVA,UAAU,kBAAAV,qBAAA,CAAVU,UAAU,CAAE4D,QAAQ,UAAAtE,qBAAA,iBAApBA,qBAAA,CAAsBpF,MAAM,GAAI,SAAS,CACrDuL,WAAW,CAAE,CAAAzF,UAAU,SAAVA,UAAU,kBAAAT,qBAAA,CAAVS,UAAU,CAAE4D,QAAQ,UAAArE,qBAAA,iBAApBA,qBAAA,CAAsBuE,IAAI,GAAI,UAC7C,CAAC,CACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}