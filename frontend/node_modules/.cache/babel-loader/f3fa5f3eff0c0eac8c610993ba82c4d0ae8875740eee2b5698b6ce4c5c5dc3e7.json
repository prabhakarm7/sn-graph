{"ast":null,"code":"var _ApiNeo4jService;// services/ApiNeo4jService.ts - COMPLETE with orphan removal functionality\nimport{transformHierarchicalOptions}from'../types/FitlerTypes';export class ApiNeo4jService{constructor(){this.baseUrl=void 0;this.regionDataCache=new Map();this.filterOptionsCache=new Map();this.baseUrl=process.env.NEXT_PUBLIC_API_URL||'http://localhost:8000';console.log(`üîå ApiNeo4jService initialized with base URL: ${this.baseUrl}`);}static getInstance(){if(!ApiNeo4jService.instance){ApiNeo4jService.instance=new ApiNeo4jService();}return ApiNeo4jService.instance;}async testConnection(){try{const response=await fetch(`${this.baseUrl}/health`);const data=await response.json();console.log('üîç API Health Check:',data);return data.status==='healthy'&&data.database_connected;}catch(error){console.error('‚ùå API connection test failed:',error);return false;}}async getDatabaseStats(){try{const response=await fetch(`${this.baseUrl}/api/v1/hierarchical/health`);if(!response.ok){throw new Error(`HTTP ${response.status}: ${response.statusText}`);}const stats=await response.json();console.log('üìä Hierarchical service stats retrieved:',stats);return stats;}catch(error){console.error('‚ùå Failed to get database stats:',error);// Fallback to regular stats endpoint\ntry{const response=await fetch(`${this.baseUrl}/api/v1/graph/stats`);if(response.ok){return await response.json();}}catch(fallbackError){console.error('‚ùå Fallback stats also failed:',fallbackError);}throw error;}}async getAvailableRegions(){try{const response=await fetch(`${this.baseUrl}/api/v1/hierarchical/regions`);if(!response.ok){throw new Error(`HTTP ${response.status}: ${response.statusText}`);}const data=await response.json();console.log('üåç Available regions:',data.regions);return data.regions||['NAI','EMEA','APAC'];}catch(error){console.error('‚ùå Failed to get available regions:',error);return['NAI','EMEA','APAC'];}}async getRegionData(){let regions=arguments.length>0&&arguments[0]!==undefined?arguments[0]:['NAI'];console.log(`üåç Loading data for regions using hierarchical endpoint: ${regions.join(', ')}`);try{const region=regions[0];const cacheKey=regions.sort().join(',');if(this.regionDataCache.has(cacheKey)){console.log(`üìã Using cached data for ${cacheKey}`);return this.regionDataCache.get(cacheKey);}const response=await fetch(`${this.baseUrl}/api/v1/hierarchical/region/${region}/complete`);if(!response.ok){throw new Error(`HTTP ${response.status}: ${response.statusText}`);}const hierarchicalData=await response.json();if(!hierarchicalData.success||!hierarchicalData.data){throw new Error(hierarchicalData.error||'Failed to get hierarchical data');}console.log(`‚úÖ Retrieved hierarchical data for ${region}:`,{nodes:hierarchicalData.data.graph_data.nodes.length,relationships:hierarchicalData.data.graph_data.relationships.length,filterOptions:hierarchicalData.data.statistics.total_filter_options});const transformedData={nodes:hierarchicalData.data.graph_data.nodes,relationships:hierarchicalData.data.graph_data.relationships,metadata:{region:hierarchicalData.data.region,statistics:hierarchicalData.data.statistics,source:'hierarchical_complete_workflow'}};this.filterOptionsCache.set(region,transformHierarchicalOptions(hierarchicalData.data.filter_options||{}));this.regionDataCache.set(cacheKey,transformedData);return transformedData;}catch(error){console.error('‚ùå Failed to fetch region data:',error);throw new Error(`Failed to fetch region data: ${error instanceof Error?error.message:'Unknown error'}`);}}async changeRegion(newRegion,currentRegion){console.log(`üîÑ Changing region from ${currentRegion||'unknown'} to ${newRegion}`);try{const response=await fetch(`${this.baseUrl}/api/v1/hierarchical/region/change/${newRegion}?current_region=${currentRegion||''}`,{method:'PUT'});if(!response.ok){throw new Error(`HTTP ${response.status}: ${response.statusText}`);}const hierarchicalData=await response.json();if(!hierarchicalData.success||!hierarchicalData.data){throw new Error(hierarchicalData.error||'Failed to change region');}console.log(`‚úÖ Region changed to ${newRegion}:`,{nodes:hierarchicalData.data.graph_data.nodes.length,relationships:hierarchicalData.data.graph_data.relationships.length});this.regionDataCache.clear();const transformedData={nodes:hierarchicalData.data.graph_data.nodes,relationships:hierarchicalData.data.graph_data.relationships,metadata:{region:hierarchicalData.data.region,statistics:hierarchicalData.data.statistics,source:'hierarchical_region_change'}};this.filterOptionsCache.set(newRegion,transformHierarchicalOptions(hierarchicalData.data.filter_options||{}));this.regionDataCache.set(newRegion,transformedData);return transformedData;}catch(error){console.error('‚ùå Failed to change region:',error);throw new Error(`Failed to change region: ${error instanceof Error?error.message:'Unknown error'}`);}}async getFilterOptionsFromData(data){console.log('üìä Getting filter options from hierarchical data...');try{var _data$metadata;const region=(_data$metadata=data.metadata)===null||_data$metadata===void 0?void 0:_data$metadata.region;if(region&&this.filterOptionsCache.has(region)){console.log(`üìã Using cached filter options for ${region}`);return this.filterOptionsCache.get(region);}return this.extractFilterOptionsFromData(data);}catch(error){console.error('‚ùå Failed to get filter options:',error);return this.getEmptyFilterOptions();}}// üÜï ENHANCED: Main filtering method with orphan removal\nasync applyFiltersToData(data,filters){var _data$nodes,_data$relationships,_filters$clientAdviso,_filters$consultantAd,_filters$clientAdviso2,_filters$consultantAd2,_data$nodes2,_filteredData$nodes,_filters$clientAdviso3,_filters$consultantAd3;console.log('üîç Enhanced applyFiltersToData with advisor filtering:',{nodeCount:((_data$nodes=data.nodes)===null||_data$nodes===void 0?void 0:_data$nodes.length)||0,relationshipCount:((_data$relationships=data.relationships)===null||_data$relationships===void 0?void 0:_data$relationships.length)||0,clientAdvisorIds:((_filters$clientAdviso=filters.clientAdvisorIds)===null||_filters$clientAdviso===void 0?void 0:_filters$clientAdviso.length)||0,consultantAdvisorIds:((_filters$consultantAd=filters.consultantAdvisorIds)===null||_filters$consultantAd===void 0?void 0:_filters$consultantAd.length)||0});// üÜï STEP 1: Apply advisor filters FIRST (most selective)\nlet filteredData={...data};if((_filters$clientAdviso2=filters.clientAdvisorIds)!==null&&_filters$clientAdviso2!==void 0&&_filters$clientAdviso2.length||(_filters$consultantAd2=filters.consultantAdvisorIds)!==null&&_filters$consultantAd2!==void 0&&_filters$consultantAd2.length){console.log('üë• Applying advisor filters first...');filteredData=this.applyAdvisorFilters(filteredData,filters);}// üÜï STEP 2: Apply existing filtering logic\nfilteredData=this.applyFiltersLocallyWithOrphanRemoval(filteredData,filters);console.log('‚úÖ Enhanced filtering complete:',{originalNodes:((_data$nodes2=data.nodes)===null||_data$nodes2===void 0?void 0:_data$nodes2.length)||0,filteredNodes:((_filteredData$nodes=filteredData.nodes)===null||_filteredData$nodes===void 0?void 0:_filteredData$nodes.length)||0,advisorFilterApplied:!!((_filters$clientAdviso3=filters.clientAdvisorIds)!==null&&_filters$clientAdviso3!==void 0&&_filters$clientAdviso3.length||(_filters$consultantAd3=filters.consultantAdvisorIds)!==null&&_filters$consultantAd3!==void 0&&_filters$consultantAd3.length)});return filteredData;}// üîß FIXED: Enhanced advisor filtering with CORRECT relationship directions\napplyAdvisorFilters(data,filters){const nodes=data.nodes||[];const relationships=data.relationships||[];const clientAdvisorIds=filters.clientAdvisorIds||[];const consultantAdvisorIds=filters.consultantAdvisorIds||[];console.log('üë• Applying FIXED advisor filters with correct relationship directions:',{clientAdvisors:clientAdvisorIds.length,consultantAdvisors:consultantAdvisorIds.length,totalNodes:nodes.length,totalRelationships:relationships.length});if(!clientAdvisorIds.length&&!consultantAdvisorIds.length){return data;}// Step 1: Find anchor nodes (companies/consultants matching advisor criteria)\nconst anchorNodeIds=new Set();// Client Advisor filtering (Company PCA/ACA) - Find matching companies\nif(clientAdvisorIds.length>0){console.log('üè¢ Finding companies with Client Advisors:',clientAdvisorIds);nodes.forEach(node=>{var _node$labels;if((_node$labels=node.labels)!==null&&_node$labels!==void 0&&_node$labels.includes('COMPANY')){const props=node.properties||{};const companyPca=props.pca||'';const companyAca=props.aca||'';if(clientAdvisorIds.includes(companyPca)||clientAdvisorIds.includes(companyAca)){anchorNodeIds.add(node.id);console.log(`   ‚úÖ Company \"${props.name||node.id}\" matches (PCA: ${companyPca}, ACA: ${companyAca})`);}}});}// Consultant Advisor filtering (Consultant PCA/Advisor) - Find matching consultants\nif(consultantAdvisorIds.length>0){console.log('üë®‚Äçüíº Finding consultants with Consultant Advisors:',consultantAdvisorIds);nodes.forEach(node=>{var _node$labels2;if((_node$labels2=node.labels)!==null&&_node$labels2!==void 0&&_node$labels2.includes('CONSULTANT')){const props=node.properties||{};const consultantPca=props.pca||'';const consultantAdvisor=props.consultant_advisor||'';if(consultantAdvisorIds.includes(consultantPca)||consultantAdvisorIds.includes(consultantAdvisor)){anchorNodeIds.add(node.id);console.log(`   ‚úÖ Consultant \"${props.name||node.id}\" matches (PCA: ${consultantPca}, Advisor: ${consultantAdvisor})`);}}});}console.log(`üìä Found ${anchorNodeIds.size} anchor nodes (companies/consultants)`);if(anchorNodeIds.size===0){console.log('‚ùå No matching advisor nodes found');return{...data,nodes:[],relationships:[]};}// Step 2: CORRECTED - Build complete subgraph following correct relationship paths\nconst relevantNodeIds=new Set(anchorNodeIds);// üîß FIXED: Specific path expansion based on anchor type\nif(clientAdvisorIds.length>0){console.log('üè¢ Client Advisor path: Company ‚Üí Field Consultant ‚Üí Consultant ‚Üí Products');this.expandFromCompanies(relevantNodeIds,nodes,relationships);}if(consultantAdvisorIds.length>0){console.log('üë®‚Äçüíº Consultant Advisor path: Consultant ‚Üí Field Consultant ‚Üí Company ‚Üí Products');this.expandFromConsultants(relevantNodeIds,nodes,relationships);}console.log(`‚úÖ Final expansion: ${relevantNodeIds.size} total nodes in subgraph`);// Step 3: Filter nodes and relationships\nconst filteredNodes=nodes.filter(node=>relevantNodeIds.has(node.id));const filteredRelationships=relationships.filter(rel=>relevantNodeIds.has(rel.start_node_id)&&relevantNodeIds.has(rel.end_node_id));// Step 4: Debug output - show what types of nodes we got\nconst nodeTypeCounts={};filteredNodes.forEach(node=>{var _node$labels3;(_node$labels3=node.labels)===null||_node$labels3===void 0?void 0:_node$labels3.forEach(label=>{nodeTypeCounts[label]=(nodeTypeCounts[label]||0)+1;});});console.log('üìà Filtered subgraph composition:',nodeTypeCounts);console.log(`‚úÖ Advisor filtering result: ${filteredNodes.length} nodes, ${filteredRelationships.length} relationships`);return{...data,nodes:filteredNodes,relationships:filteredRelationships,metadata:{...data.metadata,advisor_filter_applied:true,client_advisors_selected:clientAdvisorIds.length,consultant_advisors_selected:consultantAdvisorIds.length,original_node_count:nodes.length,filtered_node_count:filteredNodes.length,anchor_nodes_found:anchorNodeIds.size,subgraph_composition:nodeTypeCounts}};}// üÜï Helper: Expand from companies following: Company ‚Üê Field Consultant ‚Üê Consultant\nexpandFromCompanies(nodeIds,nodes,relationships){const companies=Array.from(nodeIds).filter(id=>{var _node$labels4;const node=nodes.find(n=>n.id===id);return node===null||node===void 0?void 0:(_node$labels4=node.labels)===null||_node$labels4===void 0?void 0:_node$labels4.includes('COMPANY');});console.log(`üè¢ Expanding from ${companies.length} companies...`);// Step 1: Company ‚Üí Products (OWNS relationship)\nrelationships.forEach(rel=>{if(rel.type==='OWNS'&&companies.includes(rel.start_node_id)){var _product$properties;nodeIds.add(rel.end_node_id);// Add product\nconst product=nodes.find(n=>n.id===rel.end_node_id);console.log(`   üì¶ Added Product: ${(product===null||product===void 0?void 0:(_product$properties=product.properties)===null||_product$properties===void 0?void 0:_product$properties.name)||rel.end_node_id}`);}});// Step 2: Company ‚Üê Field Consultant (COVERS relationship: FC -COVERS-> Company)\nconst fieldConsultants=new Set();relationships.forEach(rel=>{if(rel.type==='COVERS'&&companies.includes(rel.end_node_id)){var _fc$properties;nodeIds.add(rel.start_node_id);// Add field consultant\nfieldConsultants.add(rel.start_node_id);const fc=nodes.find(n=>n.id===rel.start_node_id);console.log(`   üë• Added Field Consultant: ${(fc===null||fc===void 0?void 0:(_fc$properties=fc.properties)===null||_fc$properties===void 0?void 0:_fc$properties.name)||rel.start_node_id}`);}});// Step 3: Field Consultant ‚Üê Consultant (EMPLOYS relationship: Consultant -EMPLOYS-> FC)\nrelationships.forEach(rel=>{if(rel.type==='EMPLOYS'&&fieldConsultants.has(rel.end_node_id)){var _consultant$propertie;nodeIds.add(rel.start_node_id);// Add consultant\nconst consultant=nodes.find(n=>n.id===rel.start_node_id);console.log(`   üë®‚Äçüíº Added Consultant: ${(consultant===null||consultant===void 0?void 0:(_consultant$propertie=consultant.properties)===null||_consultant$propertie===void 0?void 0:_consultant$propertie.name)||rel.start_node_id}`);}});}// üÜï Helper: Expand from consultants following: Consultant ‚Üí Field Consultant ‚Üí Company ‚Üí Products\nexpandFromConsultants(nodeIds,nodes,relationships){const consultants=Array.from(nodeIds).filter(id=>{var _node$labels5;const node=nodes.find(n=>n.id===id);return node===null||node===void 0?void 0:(_node$labels5=node.labels)===null||_node$labels5===void 0?void 0:_node$labels5.includes('CONSULTANT');});console.log(`üë®‚Äçüíº Expanding from ${consultants.length} consultants...`);// Step 1: Consultant ‚Üí Field Consultant (EMPLOYS relationship)\nconst fieldConsultants=new Set();relationships.forEach(rel=>{if(rel.type==='EMPLOYS'&&consultants.includes(rel.start_node_id)){var _fc$properties2;nodeIds.add(rel.end_node_id);// Add field consultant\nfieldConsultants.add(rel.end_node_id);const fc=nodes.find(n=>n.id===rel.end_node_id);console.log(`   üë• Added Field Consultant: ${(fc===null||fc===void 0?void 0:(_fc$properties2=fc.properties)===null||_fc$properties2===void 0?void 0:_fc$properties2.name)||rel.end_node_id}`);}});// Step 2: Field Consultant ‚Üí Company (COVERS relationship)\nconst companies=new Set();relationships.forEach(rel=>{if(rel.type==='COVERS'&&fieldConsultants.has(rel.start_node_id)){var _company$properties;nodeIds.add(rel.end_node_id);// Add company\ncompanies.add(rel.end_node_id);const company=nodes.find(n=>n.id===rel.end_node_id);console.log(`   üè¢ Added Company: ${(company===null||company===void 0?void 0:(_company$properties=company.properties)===null||_company$properties===void 0?void 0:_company$properties.name)||rel.end_node_id}`);}});// Step 3: Company ‚Üí Products (OWNS relationship)\nrelationships.forEach(rel=>{if(rel.type==='OWNS'&&companies.has(rel.start_node_id)){var _product$properties2;nodeIds.add(rel.end_node_id);// Add product\nconst product=nodes.find(n=>n.id===rel.end_node_id);console.log(`   üì¶ Added Product: ${(product===null||product===void 0?void 0:(_product$properties2=product.properties)===null||_product$properties2===void 0?void 0:_product$properties2.name)||rel.end_node_id}`);}});}// üÜï ENHANCED: Core filtering logic with smart orphan removal\napplyFiltersLocallyWithOrphanRemoval(data,filters){let filteredNodes=[...data.nodes];let filteredRelationships=[...data.relationships];console.log(`üîç Starting with ${filteredNodes.length} nodes, ${filteredRelationships.length} relationships`);// Step 1: Apply node type filters\nif(filters.nodeTypes&&filters.nodeTypes.length>0){filteredNodes=filteredNodes.filter(node=>filters.nodeTypes.some(type=>node.labels.includes(type)));console.log(`üìä After node type filter: ${filteredNodes.length} nodes`);}// Step 2: Apply geographic filters\nif(filters.sales_regions&&filters.sales_regions.length>0){filteredNodes=filteredNodes.filter(node=>!node.properties.sales_region||filters.sales_regions.includes(node.properties.sales_region));console.log(`üåç After sales region filter: ${filteredNodes.length} nodes`);}if(filters.channels&&filters.channels.length>0){filteredNodes=filteredNodes.filter(node=>!node.properties.channel||filters.channels.includes(node.properties.channel));console.log(`üì° After channel filter: ${filteredNodes.length} nodes`);}// Step 3: Apply entity-specific filters (these create focused subgraphs)\nlet focusedFiltering=false;// üéØ CONSULTANT FILTERING with connected subgraph\nif(filters.consultantIds&&filters.consultantIds.length>0){console.log(`üëî Filtering to specific consultants: ${filters.consultantIds.join(', ')}`);focusedFiltering=true;const connectedNodeIds=this.getConsultantSubgraph(filteredNodes,filteredRelationships,filters.consultantIds);filteredNodes=filteredNodes.filter(node=>connectedNodeIds.has(node.id));console.log(`üîó After consultant subgraph filtering: ${filteredNodes.length} nodes`);}// üéØ COMPANY FILTERING with connected subgraph\nif(filters.clientIds&&filters.clientIds.length>0){console.log(`üè¢ Filtering to specific companies: ${filters.clientIds.join(', ')}`);focusedFiltering=true;const connectedNodeIds=this.getCompanySubgraph(filteredNodes,filteredRelationships,filters.clientIds);filteredNodes=filteredNodes.filter(node=>connectedNodeIds.has(node.id));console.log(`üîó After company subgraph filtering: ${filteredNodes.length} nodes`);}// üéØ FIELD CONSULTANT FILTERING with connected subgraph\nif(filters.fieldConsultantIds&&filters.fieldConsultantIds.length>0){console.log(`üìã Filtering to specific field consultants: ${filters.fieldConsultantIds.join(', ')}`);focusedFiltering=true;const connectedNodeIds=this.getFieldConsultantSubgraph(filteredNodes,filteredRelationships,filters.fieldConsultantIds);filteredNodes=filteredNodes.filter(node=>connectedNodeIds.has(node.id));console.log(`üîó After field consultant subgraph filtering: ${filteredNodes.length} nodes`);}// üéØ PRODUCT FILTERING with connected subgraph\nif(filters.productIds&&filters.productIds.length>0){console.log(`üè¶ Filtering to specific products: ${filters.productIds.join(', ')}`);focusedFiltering=true;const connectedNodeIds=this.getProductSubgraph(filteredNodes,filteredRelationships,filters.productIds);filteredNodes=filteredNodes.filter(node=>connectedNodeIds.has(node.id));console.log(`üîó After product subgraph filtering: ${filteredNodes.length} nodes`);}// Step 4: Filter relationships based on remaining nodes\nconst nodeIds=new Set(filteredNodes.map(n=>n.id));filteredRelationships=filteredRelationships.filter(rel=>nodeIds.has(rel.start_node_id)&&nodeIds.has(rel.end_node_id));console.log(`üîó After node filtering, relationships: ${filteredRelationships.length}`);// Step 5: Apply relationship-specific filters\nif(filters.mandateStatuses&&filters.mandateStatuses.length>0){filteredRelationships=filteredRelationships.filter(rel=>rel.type!=='OWNS'||!rel.properties.mandate_status||filters.mandateStatuses.includes(rel.properties.mandate_status));console.log(`üìã After mandate status filter: ${filteredRelationships.length} relationships`);}if(filters.influenceLevels&&filters.influenceLevels.length>0){filteredRelationships=filteredRelationships.filter(rel=>rel.type!=='COVERS'||!rel.properties.level_of_influence||filters.influenceLevels.includes(String(rel.properties.level_of_influence)));console.log(`‚≠ê After influence level filter: ${filteredRelationships.length} relationships`);}// üÜï NEW: INCUMBENT PRODUCT FILTERING with connected subgraph\nif(filters.incumbentProductIds&&filters.incumbentProductIds.length>0){console.log(`üéØ Filtering to specific incumbent products: ${filters.incumbentProductIds.join(', ')}`);focusedFiltering=true;const connectedNodeIds=this.getIncumbentProductSubgraph(filteredNodes,filteredRelationships,filters.incumbentProductIds);filteredNodes=filteredNodes.filter(node=>connectedNodeIds.has(node.id));console.log(`üîó After incumbent product subgraph filtering: ${filteredNodes.length} nodes`);}console.log(`üîó After node filtering, relationships: ${filteredRelationships.length}`);// Step 6: Final orphan removal (unless we did focused filtering)\nif(!focusedFiltering&&!filters.showInactive){const connectedNodeIds=new Set([...filteredRelationships.map(r=>r.start_node_id),...filteredRelationships.map(r=>r.end_node_id)]);const beforeCount=filteredNodes.length;filteredNodes=filteredNodes.filter(node=>connectedNodeIds.has(node.id));console.log(`üßπ Removed ${beforeCount-filteredNodes.length} orphaned nodes (showInactive=false)`);}const result={nodes:filteredNodes,relationships:filteredRelationships,metadata:{originalNodeCount:data.nodes.length,originalRelationshipCount:data.relationships.length,filteredNodeCount:filteredNodes.length,filteredRelationshipCount:filteredRelationships.length,filtersApplied:filters,focusedFiltering:focusedFiltering}};console.log(`‚úÖ Final result: ${result.nodes.length} nodes, ${result.relationships.length} relationships`);console.log(`üìä Filtering mode: ${focusedFiltering?'Focused Subgraph':'General Filtering'}`);return result;}// üÜï Helper method: Get consultant and connected subgraph\ngetConsultantSubgraph(nodes,relationships,consultantNames){const connectedNodeIds=new Set();// Find selected consultants\nconst selectedConsultants=nodes.filter(node=>node.labels.includes('CONSULTANT')&&consultantNames.includes(node.properties.name));// Add selected consultants\nselectedConsultants.forEach(consultant=>{connectedNodeIds.add(consultant.id);console.log(`üéØ Selected consultant: ${consultant.properties.name} (${consultant.id})`);});// Find field consultants employed by selected consultants\nconst employmentEdges=relationships.filter(rel=>rel.type==='EMPLOYS'&&selectedConsultants.some(c=>c.id===rel.start_node_id));employmentEdges.forEach(edge=>{connectedNodeIds.add(edge.end_node_id);const fieldConsultant=nodes.find(n=>n.id===edge.end_node_id);console.log(`  üìã Field consultant: ${fieldConsultant===null||fieldConsultant===void 0?void 0:fieldConsultant.properties.name} (${edge.end_node_id})`);});// Find companies covered by these field consultants\nconst coverageEdges=relationships.filter(rel=>rel.type==='COVERS'&&connectedNodeIds.has(rel.start_node_id));coverageEdges.forEach(edge=>{connectedNodeIds.add(edge.end_node_id);const company=nodes.find(n=>n.id===edge.end_node_id);console.log(`    üè¢ Company: ${company===null||company===void 0?void 0:company.properties.name} (${edge.end_node_id})`);});// Find products owned by these companies (standard path)\nconst ownershipEdges=relationships.filter(rel=>rel.type==='OWNS'&&connectedNodeIds.has(rel.start_node_id));ownershipEdges.forEach(edge=>{connectedNodeIds.add(edge.end_node_id);const product=nodes.find(n=>n.id===edge.end_node_id);// Check if this is an INCUMBENT_PRODUCT or regular PRODUCT\nif(product!==null&&product!==void 0&&product.labels.includes('INCUMBENT_PRODUCT')){console.log(`      üéØ Incumbent Product: ${product===null||product===void 0?void 0:product.properties.name} (${edge.end_node_id})`);// üÜï NEW: Find products recommended by this incumbent product via BI_RECOMMENDS\nconst recommendationEdges=relationships.filter(rel=>rel.type==='BI_RECOMMENDS'&&rel.start_node_id===edge.end_node_id);recommendationEdges.forEach(recEdge=>{connectedNodeIds.add(recEdge.end_node_id);const recommendedProduct=nodes.find(n=>n.id===recEdge.end_node_id);console.log(`        üì¶ ‚Üí Recommended Product: ${recommendedProduct===null||recommendedProduct===void 0?void 0:recommendedProduct.properties.name} (${recEdge.end_node_id})`);});}else if(product!==null&&product!==void 0&&product.labels.includes('PRODUCT')){console.log(`      üì¶ Product: ${product===null||product===void 0?void 0:product.properties.name} (${edge.end_node_id})`);}});return connectedNodeIds;}// üÜï Helper method: Get company and connected subgraph\ngetCompanySubgraph(nodes,relationships,companyNames){const connectedNodeIds=new Set();// Find selected companies\nconst selectedCompanies=nodes.filter(node=>node.labels.includes('COMPANY')&&companyNames.includes(node.properties.name));// Add selected companies\nselectedCompanies.forEach(company=>{connectedNodeIds.add(company.id);console.log(`üéØ Selected company: ${company.properties.name} (${company.id})`);});// Find field consultants covering these companies\nconst coverageEdges=relationships.filter(rel=>rel.type==='COVERS'&&selectedCompanies.some(c=>c.id===rel.end_node_id));coverageEdges.forEach(edge=>{connectedNodeIds.add(edge.start_node_id);const fieldConsultant=nodes.find(n=>n.id===edge.start_node_id);console.log(`  üìã Field consultant: ${fieldConsultant===null||fieldConsultant===void 0?void 0:fieldConsultant.properties.name} (${edge.start_node_id})`);});// Find consultants employing these field consultants\nconst employmentEdges=relationships.filter(rel=>rel.type==='EMPLOYS'&&connectedNodeIds.has(rel.end_node_id));employmentEdges.forEach(edge=>{connectedNodeIds.add(edge.start_node_id);const consultant=nodes.find(n=>n.id===edge.start_node_id);console.log(`üë®‚Äçüíº Consultant: ${consultant===null||consultant===void 0?void 0:consultant.properties.name} (${edge.start_node_id})`);});// Find products owned by selected companies\nconst ownershipEdges=relationships.filter(rel=>rel.type==='OWNS'&&selectedCompanies.some(c=>c.id===rel.start_node_id));ownershipEdges.forEach(edge=>{connectedNodeIds.add(edge.end_node_id);const product=nodes.find(n=>n.id===edge.end_node_id);// Check if this is an INCUMBENT_PRODUCT or regular PRODUCT\nif(product!==null&&product!==void 0&&product.labels.includes('INCUMBENT_PRODUCT')){console.log(`  üéØ Incumbent Product: ${product===null||product===void 0?void 0:product.properties.name} (${edge.end_node_id})`);// üÜï NEW: Find products recommended by this incumbent product via BI_RECOMMENDS\nconst recommendationEdges=relationships.filter(rel=>rel.type==='BI_RECOMMENDS'&&rel.start_node_id===edge.end_node_id);recommendationEdges.forEach(recEdge=>{connectedNodeIds.add(recEdge.end_node_id);const recommendedProduct=nodes.find(n=>n.id===recEdge.end_node_id);console.log(`    üì¶ ‚Üí Recommended Product: ${recommendedProduct===null||recommendedProduct===void 0?void 0:recommendedProduct.properties.name} (${recEdge.end_node_id})`);});}else if(product!==null&&product!==void 0&&product.labels.includes('PRODUCT')){console.log(`  üì¶ Product: ${product===null||product===void 0?void 0:product.properties.name} (${edge.end_node_id})`);}});return connectedNodeIds;}// üÜï Helper method: Get field consultant and connected subgraph\ngetFieldConsultantSubgraph(nodes,relationships,fieldConsultantNames){const connectedNodeIds=new Set();const selectedFieldConsultants=nodes.filter(node=>node.labels.includes('FIELD_CONSULTANT')&&fieldConsultantNames.includes(node.properties.name));// Add selected field consultants\nselectedFieldConsultants.forEach(fc=>{connectedNodeIds.add(fc.id);console.log(`üéØ Selected field consultant: ${fc.properties.name} (${fc.id})`);});// Find their parent consultants\nconst employmentEdges=relationships.filter(rel=>rel.type==='EMPLOYS'&&selectedFieldConsultants.some(fc=>fc.id===rel.end_node_id));employmentEdges.forEach(edge=>{connectedNodeIds.add(edge.start_node_id);const consultant=nodes.find(n=>n.id===edge.start_node_id);console.log(`üë®‚Äçüíº Consultant: ${consultant===null||consultant===void 0?void 0:consultant.properties.name} (${edge.start_node_id})`);});// Find companies covered by selected field consultants\nconst coverageEdges=relationships.filter(rel=>rel.type==='COVERS'&&selectedFieldConsultants.some(fc=>fc.id===rel.start_node_id));coverageEdges.forEach(edge=>{connectedNodeIds.add(edge.end_node_id);const company=nodes.find(n=>n.id===edge.end_node_id);console.log(`  üè¢ Company: ${company===null||company===void 0?void 0:company.properties.name} (${edge.end_node_id})`);});// Find products owned by covered companies\nconst companies=Array.from(connectedNodeIds).filter(id=>{const node=nodes.find(n=>n.id===id);return node===null||node===void 0?void 0:node.labels.includes('COMPANY');});const ownershipEdges=relationships.filter(rel=>rel.type==='OWNS'&&companies.includes(rel.start_node_id));ownershipEdges.forEach(edge=>{connectedNodeIds.add(edge.end_node_id);const product=nodes.find(n=>n.id===edge.end_node_id);// üîß NEW: Check if this is an INCUMBENT_PRODUCT or regular PRODUCT\nif(product!==null&&product!==void 0&&product.labels.includes('INCUMBENT_PRODUCT')){console.log(`    üéØ Incumbent Product: ${product===null||product===void 0?void 0:product.properties.name} (${edge.end_node_id})`);// üÜï NEW: Find products recommended by this incumbent product via BI_RECOMMENDS\nconst recommendationEdges=relationships.filter(rel=>rel.type==='BI_RECOMMENDS'&&rel.start_node_id===edge.end_node_id);recommendationEdges.forEach(recEdge=>{connectedNodeIds.add(recEdge.end_node_id);const recommendedProduct=nodes.find(n=>n.id===recEdge.end_node_id);console.log(`      üì¶ ‚Üí Recommended Product: ${recommendedProduct===null||recommendedProduct===void 0?void 0:recommendedProduct.properties.name} (${recEdge.end_node_id})`);});}else if(product!==null&&product!==void 0&&product.labels.includes('PRODUCT')){console.log(`    üì¶ Product: ${product===null||product===void 0?void 0:product.properties.name} (${edge.end_node_id})`);}});return connectedNodeIds;}// üÜï Helper method: Get product and connected subgraph\ngetProductSubgraph(nodes,relationships,productNames){const connectedNodeIds=new Set();const selectedProducts=nodes.filter(node=>(node.labels.includes('PRODUCT')||node.labels.includes('INCUMBENT_PRODUCT'))&&productNames.includes(node.properties.name));// Add selected products\nselectedProducts.forEach(product=>{connectedNodeIds.add(product.id);console.log(`üéØ Selected product: ${product.properties.name} (${product.id})`);});// üÜï NEW: Handle BI_RECOMMENDS relationships for both directions\n// Find incumbent products that recommend selected products (reverse BI_RECOMMENDS)\nconst reverseRecommendationEdges=relationships.filter(rel=>rel.type==='BI_RECOMMENDS'&&selectedProducts.some(p=>p.id===rel.end_node_id));reverseRecommendationEdges.forEach(edge=>{connectedNodeIds.add(edge.start_node_id);const incumbentProduct=nodes.find(n=>n.id===edge.start_node_id);console.log(`  üéØ ‚Üê Incumbent Product (recommends this): ${incumbentProduct===null||incumbentProduct===void 0?void 0:incumbentProduct.properties.name} (${edge.start_node_id})`);});// Find products recommended by selected incumbent products (forward BI_RECOMMENDS)\nconst forwardRecommendationEdges=relationships.filter(rel=>rel.type==='BI_RECOMMENDS'&&selectedProducts.some(p=>p.id===rel.start_node_id));forwardRecommendationEdges.forEach(edge=>{connectedNodeIds.add(edge.end_node_id);const recommendedProduct=nodes.find(n=>n.id===edge.end_node_id);console.log(`  üì¶ ‚Üí Recommended Product: ${recommendedProduct===null||recommendedProduct===void 0?void 0:recommendedProduct.properties.name} (${edge.end_node_id})`);});// Find companies owning these products (including incumbent products)\nconst ownershipEdges=relationships.filter(rel=>rel.type==='OWNS'&&connectedNodeIds.has(rel.end_node_id));ownershipEdges.forEach(edge=>{connectedNodeIds.add(edge.start_node_id);const company=nodes.find(n=>n.id===edge.start_node_id);console.log(`  üè¢ Company: ${company===null||company===void 0?void 0:company.properties.name} (${edge.start_node_id})`);});// Find field consultants covering these companies\nconst companies=Array.from(connectedNodeIds).filter(id=>{const node=nodes.find(n=>n.id===id);return node===null||node===void 0?void 0:node.labels.includes('COMPANY');});const coverageEdges=relationships.filter(rel=>rel.type==='COVERS'&&companies.includes(rel.end_node_id));coverageEdges.forEach(edge=>{connectedNodeIds.add(edge.start_node_id);const fieldConsultant=nodes.find(n=>n.id===edge.start_node_id);console.log(`    üìã Field consultant: ${fieldConsultant===null||fieldConsultant===void 0?void 0:fieldConsultant.properties.name} (${edge.start_node_id})`);});// Find consultants employing these field consultants\nconst fieldConsultants=Array.from(connectedNodeIds).filter(id=>{const node=nodes.find(n=>n.id===id);return node===null||node===void 0?void 0:node.labels.includes('FIELD_CONSULTANT');});const employmentEdges=relationships.filter(rel=>rel.type==='EMPLOYS'&&fieldConsultants.includes(rel.end_node_id));employmentEdges.forEach(edge=>{connectedNodeIds.add(edge.start_node_id);const consultant=nodes.find(n=>n.id===edge.start_node_id);console.log(`      üë®‚Äçüíº Consultant: ${consultant===null||consultant===void 0?void 0:consultant.properties.name} (${edge.start_node_id})`);});return connectedNodeIds;}getIncumbentProductSubgraph(nodes,relationships,incumbentProductNames){const connectedNodeIds=new Set();const selectedIncumbentProducts=nodes.filter(node=>node.labels.includes('INCUMBENT_PRODUCT')&&incumbentProductNames.includes(node.properties.name));// Add selected incumbent products\nselectedIncumbentProducts.forEach(product=>{connectedNodeIds.add(product.id);console.log(`üéØ Selected incumbent product: ${product.properties.name} (${product.id})`);});// Find products recommended by these incumbent products\nconst recommendationEdges=relationships.filter(rel=>rel.type==='BI_RECOMMENDS'&&selectedIncumbentProducts.some(p=>p.id===rel.start_node_id));recommendationEdges.forEach(edge=>{connectedNodeIds.add(edge.end_node_id);const recommendedProduct=nodes.find(n=>n.id===edge.end_node_id);console.log(`  üì¶ ‚Üí Recommended Product: ${recommendedProduct===null||recommendedProduct===void 0?void 0:recommendedProduct.properties.name} (${edge.end_node_id})`);});// Find companies owning these incumbent products\nconst ownershipEdges=relationships.filter(rel=>rel.type==='OWNS'&&selectedIncumbentProducts.some(p=>p.id===rel.end_node_id));ownershipEdges.forEach(edge=>{connectedNodeIds.add(edge.start_node_id);const company=nodes.find(n=>n.id===edge.start_node_id);console.log(`  üè¢ Company: ${company===null||company===void 0?void 0:company.properties.name} (${edge.start_node_id})`);});// Continue with standard path (field consultants, consultants)\nconst companies=Array.from(connectedNodeIds).filter(id=>{const node=nodes.find(n=>n.id===id);return node===null||node===void 0?void 0:node.labels.includes('COMPANY');});const coverageEdges=relationships.filter(rel=>rel.type==='COVERS'&&companies.includes(rel.end_node_id));coverageEdges.forEach(edge=>{connectedNodeIds.add(edge.start_node_id);const fieldConsultant=nodes.find(n=>n.id===edge.start_node_id);console.log(`    üìã Field consultant: ${fieldConsultant===null||fieldConsultant===void 0?void 0:fieldConsultant.properties.name} (${edge.start_node_id})`);});const fieldConsultants=Array.from(connectedNodeIds).filter(id=>{const node=nodes.find(n=>n.id===id);return node===null||node===void 0?void 0:node.labels.includes('FIELD_CONSULTANT');});const employmentEdges=relationships.filter(rel=>rel.type==='EMPLOYS'&&fieldConsultants.includes(rel.end_node_id));employmentEdges.forEach(edge=>{connectedNodeIds.add(edge.start_node_id);const consultant=nodes.find(n=>n.id===edge.start_node_id);console.log(`      üë®‚Äçüíº Consultant: ${consultant===null||consultant===void 0?void 0:consultant.properties.name} (${edge.start_node_id})`);});return connectedNodeIds;}extractFilterOptionsFromData(data){const options={regions:new Set(['NAI','EMEA','APAC']),sales_regions:new Set(),channels:new Set(),assetClasses:new Set(),consultants:new Set(),fieldConsultants:new Set(),clients:new Set(),products:new Set(),incumbent_products:new Set(),pcas:new Set(),acas:new Set(),ratings:new Set(['Positive','Negative','Neutral','Introduced']),mandateStatuses:new Set(['Active','At Risk','Conversion in Progress']),jpm_flags:new Set(['Y','N']),privacy_levels:new Set(['Public','Private','Confidential']),influenceLevels:new Set(['1','2','3','4'])};data.nodes.forEach(node=>{const props=node.properties;if(props.sales_region)options.sales_regions.add(props.sales_region);if(props.channel)options.channels.add(props.channel);if(props.asset_class)options.assetClasses.add(props.asset_class);if(props.pca)options.pcas.add(props.pca);if(props.aca)options.acas.add(props.aca);if(props.jpm_flag)options.jpm_flags.add(props.jpm_flag);if(props.privacy)options.privacy_levels.add(props.privacy);if(node.labels.includes('CONSULTANT')&&props.name){options.consultants.add(props.name);}if(node.labels.includes('FIELD_CONSULTANT')&&props.name){options.fieldConsultants.add(props.name);}if(node.labels.includes('COMPANY')&&props.name){options.clients.add(props.name);}if(node.labels.includes('PRODUCT')&&props.name){options.products.add(props.name);}if(node.labels.includes('INCUMBENT_PRODUCT')&&props.name){options.incumbent_products.add(props.name);}});data.relationships.forEach(rel=>{if(rel.type==='RATES'&&rel.properties.rankgroup){options.ratings.add(rel.properties.rankgroup);}if(rel.type==='OWNS'&&rel.properties.mandate_status){options.mandateStatuses.add(rel.properties.mandate_status);}if(rel.type==='COVERS'&&rel.properties.level_of_influence){options.influenceLevels.add(String(rel.properties.level_of_influence));}});const result={};Object.entries(options).forEach(_ref=>{let[key,set]=_ref;result[key]=Array.from(set).sort();});console.log('‚úÖ Local filter options extracted:',{regions:result.regions.length,sales_regions:result.sales_regions.length,channels:result.channels.length,consultants:result.consultants.length,products:result.products.length});return result;}getEmptyFilterOptions(){return{regions:['NAI','EMEA','APAC'],sales_regions:[],channels:[],assetClasses:[],consultants:[],fieldConsultants:[],clients:[],products:[],incumbent_products:[],pcas:[],acas:[],clientAdvisors:[],// Company PCA + ACA combined\nconsultantAdvisors:[],// Consultant PCA + Advisor combined\nratings:['Positive','Negative','Neutral','Introduced'],mandateStatuses:['Active','At Risk','Conversion in Progress'],jpm_flags:['Y','N'],privacy_levels:['Public','Private','Confidential'],influenceLevels:['1','2','3','4','UNK','High','medium','low']};}clearCache(){this.regionDataCache.clear();this.filterOptionsCache.clear();console.log('üßπ API service cache cleared');}}_ApiNeo4jService=ApiNeo4jService;ApiNeo4jService.instance=void 0;export default ApiNeo4jService;","map":{"version":3,"names":["transformHierarchicalOptions","ApiNeo4jService","constructor","baseUrl","regionDataCache","Map","filterOptionsCache","process","env","NEXT_PUBLIC_API_URL","console","log","getInstance","instance","testConnection","response","fetch","data","json","status","database_connected","error","getDatabaseStats","ok","Error","statusText","stats","fallbackError","getAvailableRegions","regions","getRegionData","arguments","length","undefined","join","region","cacheKey","sort","has","get","hierarchicalData","success","nodes","graph_data","relationships","filterOptions","statistics","total_filter_options","transformedData","metadata","source","set","filter_options","message","changeRegion","newRegion","currentRegion","method","clear","getFilterOptionsFromData","_data$metadata","extractFilterOptionsFromData","getEmptyFilterOptions","applyFiltersToData","filters","_data$nodes","_data$relationships","_filters$clientAdviso","_filters$consultantAd","_filters$clientAdviso2","_filters$consultantAd2","_data$nodes2","_filteredData$nodes","_filters$clientAdviso3","_filters$consultantAd3","nodeCount","relationshipCount","clientAdvisorIds","consultantAdvisorIds","filteredData","applyAdvisorFilters","applyFiltersLocallyWithOrphanRemoval","originalNodes","filteredNodes","advisorFilterApplied","clientAdvisors","consultantAdvisors","totalNodes","totalRelationships","anchorNodeIds","Set","forEach","node","_node$labels","labels","includes","props","properties","companyPca","pca","companyAca","aca","add","id","name","_node$labels2","consultantPca","consultantAdvisor","consultant_advisor","size","relevantNodeIds","expandFromCompanies","expandFromConsultants","filter","filteredRelationships","rel","start_node_id","end_node_id","nodeTypeCounts","_node$labels3","label","advisor_filter_applied","client_advisors_selected","consultant_advisors_selected","original_node_count","filtered_node_count","anchor_nodes_found","subgraph_composition","nodeIds","companies","Array","from","_node$labels4","find","n","type","_product$properties","product","fieldConsultants","_fc$properties","fc","_consultant$propertie","consultant","consultants","_node$labels5","_fc$properties2","_company$properties","company","_product$properties2","nodeTypes","some","sales_regions","sales_region","channels","channel","focusedFiltering","consultantIds","connectedNodeIds","getConsultantSubgraph","clientIds","getCompanySubgraph","fieldConsultantIds","getFieldConsultantSubgraph","productIds","getProductSubgraph","map","mandateStatuses","mandate_status","influenceLevels","level_of_influence","String","incumbentProductIds","getIncumbentProductSubgraph","showInactive","r","beforeCount","result","originalNodeCount","originalRelationshipCount","filteredNodeCount","filteredRelationshipCount","filtersApplied","consultantNames","selectedConsultants","employmentEdges","c","edge","fieldConsultant","coverageEdges","ownershipEdges","recommendationEdges","recEdge","recommendedProduct","companyNames","selectedCompanies","fieldConsultantNames","selectedFieldConsultants","productNames","selectedProducts","reverseRecommendationEdges","p","incumbentProduct","forwardRecommendationEdges","incumbentProductNames","selectedIncumbentProducts","options","assetClasses","clients","products","incumbent_products","pcas","acas","ratings","jpm_flags","privacy_levels","asset_class","jpm_flag","privacy","rankgroup","Object","entries","_ref","key","clearCache","_ApiNeo4jService"],"sources":["/Users/prabhakarmudliyar/text-to-cypher-mui/frontend/src/components/services/ApiNeo4jService.ts"],"sourcesContent":["// services/ApiNeo4jService.ts - COMPLETE with orphan removal functionality\nimport { FilterCriteria, FilterOptions, transformHierarchicalOptions } from '../types/FitlerTypes';\n\ninterface Neo4jNode {\n  id: string;\n  labels: string[];\n  properties: Record<string, any>;\n}\n\ninterface Neo4jRelationship {\n  id: string;\n  type: string;\n  start_node_id: string;\n  end_node_id: string;\n  properties: Record<string, any>;\n}\n\ninterface Neo4jResult {\n  nodes: Neo4jNode[];\n  relationships: Neo4jRelationship[];\n  metadata?: Record<string, any>;\n}\n\ninterface HierarchicalResponse {\n  success: boolean;\n  data?: {\n    region: string;\n    graph_data: {\n      nodes: Neo4jNode[];\n      relationships: Neo4jRelationship[];\n    };\n    filter_options: Record<string, any>;\n    statistics: {\n      total_nodes: number;\n      total_relationships: number;\n      total_filter_options: number;\n    };\n  };\n  message?: string;\n  error?: string;\n}\n\nexport class ApiNeo4jService {\n  private static instance: ApiNeo4jService;\n  public readonly baseUrl: string;\n  private regionDataCache: Map<string, Neo4jResult> = new Map();\n  private filterOptionsCache: Map<string, FilterOptions> = new Map();\n  \n  private constructor() {\n    this.baseUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';\n    console.log(`üîå ApiNeo4jService initialized with base URL: ${this.baseUrl}`);\n  }\n  \n  static getInstance(): ApiNeo4jService {\n    if (!ApiNeo4jService.instance) {\n      ApiNeo4jService.instance = new ApiNeo4jService();\n    }\n    return ApiNeo4jService.instance;\n  }\n  \n  async testConnection(): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.baseUrl}/health`);\n      const data = await response.json();\n      \n      console.log('üîç API Health Check:', data);\n      return data.status === 'healthy' && data.database_connected;\n    } catch (error) {\n      console.error('‚ùå API connection test failed:', error);\n      return false;\n    }\n  }\n\n  async getDatabaseStats(): Promise<any> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/v1/hierarchical/health`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const stats = await response.json();\n      console.log('üìä Hierarchical service stats retrieved:', stats);\n      \n      return stats;\n    } catch (error) {\n      console.error('‚ùå Failed to get database stats:', error);\n      // Fallback to regular stats endpoint\n      try {\n        const response = await fetch(`${this.baseUrl}/api/v1/graph/stats`);\n        if (response.ok) {\n          return await response.json();\n        }\n      } catch (fallbackError) {\n        console.error('‚ùå Fallback stats also failed:', fallbackError);\n      }\n      throw error;\n    }\n  }\n\n  async getAvailableRegions(): Promise<string[]> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/v1/hierarchical/regions`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      console.log('üåç Available regions:', data.regions);\n      \n      return data.regions || ['NAI', 'EMEA', 'APAC'];\n    } catch (error) {\n      console.error('‚ùå Failed to get available regions:', error);\n      return ['NAI', 'EMEA', 'APAC'];\n    }\n  }\n  \n  async getRegionData(regions: string[] = ['NAI']): Promise<Neo4jResult> {\n    console.log(`üåç Loading data for regions using hierarchical endpoint: ${regions.join(', ')}`);\n    \n    try {\n      const region = regions[0];\n      const cacheKey = regions.sort().join(',');\n      \n      if (this.regionDataCache.has(cacheKey)) {\n        console.log(`üìã Using cached data for ${cacheKey}`);\n        return this.regionDataCache.get(cacheKey)!;\n      }\n      \n      const response = await fetch(`${this.baseUrl}/api/v1/hierarchical/region/${region}/complete`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const hierarchicalData: HierarchicalResponse = await response.json();\n      \n      if (!hierarchicalData.success || !hierarchicalData.data) {\n        throw new Error(hierarchicalData.error || 'Failed to get hierarchical data');\n      }\n      \n      console.log(`‚úÖ Retrieved hierarchical data for ${region}:`, {\n        nodes: hierarchicalData.data.graph_data.nodes.length,\n        relationships: hierarchicalData.data.graph_data.relationships.length,\n        filterOptions: hierarchicalData.data.statistics.total_filter_options\n      });\n      \n      const transformedData: Neo4jResult = {\n        nodes: hierarchicalData.data.graph_data.nodes,\n        relationships: hierarchicalData.data.graph_data.relationships,\n        metadata: {\n          region: hierarchicalData.data.region,\n          statistics: hierarchicalData.data.statistics,\n          source: 'hierarchical_complete_workflow'\n        }\n      };\n      \n      this.filterOptionsCache.set(region, transformHierarchicalOptions(hierarchicalData.data.filter_options || {}));\n      this.regionDataCache.set(cacheKey, transformedData);\n      \n      return transformedData;\n      \n    } catch (error) {\n      console.error('‚ùå Failed to fetch region data:', error);\n      throw new Error(`Failed to fetch region data: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async changeRegion(newRegion: string, currentRegion?: string): Promise<Neo4jResult> {\n    console.log(`üîÑ Changing region from ${currentRegion || 'unknown'} to ${newRegion}`);\n    \n    try {\n      const response = await fetch(`${this.baseUrl}/api/v1/hierarchical/region/change/${newRegion}?current_region=${currentRegion || ''}`, {\n        method: 'PUT'\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const hierarchicalData: HierarchicalResponse = await response.json();\n      \n      if (!hierarchicalData.success || !hierarchicalData.data) {\n        throw new Error(hierarchicalData.error || 'Failed to change region');\n      }\n      \n      console.log(`‚úÖ Region changed to ${newRegion}:`, {\n        nodes: hierarchicalData.data.graph_data.nodes.length,\n        relationships: hierarchicalData.data.graph_data.relationships.length\n      });\n      \n      this.regionDataCache.clear();\n      \n      const transformedData: Neo4jResult = {\n        nodes: hierarchicalData.data.graph_data.nodes,\n        relationships: hierarchicalData.data.graph_data.relationships,\n        metadata: {\n          region: hierarchicalData.data.region,\n          statistics: hierarchicalData.data.statistics,\n          source: 'hierarchical_region_change'\n        }\n      };\n      \n      this.filterOptionsCache.set(newRegion, transformHierarchicalOptions(hierarchicalData.data.filter_options || {}));\n      this.regionDataCache.set(newRegion, transformedData);\n      \n      return transformedData;\n      \n    } catch (error) {\n      console.error('‚ùå Failed to change region:', error);\n      throw new Error(`Failed to change region: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n  \n  async getFilterOptionsFromData(data: Neo4jResult): Promise<FilterOptions> {\n    console.log('üìä Getting filter options from hierarchical data...');\n    \n    try {\n      const region = data.metadata?.region;\n      if (region && this.filterOptionsCache.has(region)) {\n        console.log(`üìã Using cached filter options for ${region}`);\n        return this.filterOptionsCache.get(region)!;\n      }\n      \n      return this.extractFilterOptionsFromData(data);\n      \n    } catch (error) {\n      console.error('‚ùå Failed to get filter options:', error);\n      return this.getEmptyFilterOptions();\n    }\n  }\n\n  // üÜï ENHANCED: Main filtering method with orphan removal\n    async applyFiltersToData(data: Neo4jResult, filters: FilterCriteria): Promise<Neo4jResult> {\n    console.log('üîç Enhanced applyFiltersToData with advisor filtering:', {\n      nodeCount: data.nodes?.length || 0,\n      relationshipCount: data.relationships?.length || 0,\n      clientAdvisorIds: filters.clientAdvisorIds?.length || 0,\n      consultantAdvisorIds: filters.consultantAdvisorIds?.length || 0\n    });\n\n    // üÜï STEP 1: Apply advisor filters FIRST (most selective)\n    let filteredData = { ...data };\n    \n    if (filters.clientAdvisorIds?.length || filters.consultantAdvisorIds?.length) {\n      console.log('üë• Applying advisor filters first...');\n      filteredData = this.applyAdvisorFilters(filteredData, filters);\n    }\n\n    // üÜï STEP 2: Apply existing filtering logic\n    filteredData = this.applyFiltersLocallyWithOrphanRemoval(filteredData, filters);\n\n    console.log('‚úÖ Enhanced filtering complete:', {\n      originalNodes: data.nodes?.length || 0,\n      filteredNodes: filteredData.nodes?.length || 0,\n      advisorFilterApplied: !!(filters.clientAdvisorIds?.length || filters.consultantAdvisorIds?.length)\n    });\n\n    return filteredData;\n  }\n\n    // üîß FIXED: Enhanced advisor filtering with CORRECT relationship directions\n  private applyAdvisorFilters(data: Neo4jResult, filters: FilterCriteria): Neo4jResult {\n    const nodes = data.nodes || [];\n    const relationships = data.relationships || [];\n    \n    const clientAdvisorIds = filters.clientAdvisorIds || [];\n    const consultantAdvisorIds = filters.consultantAdvisorIds || [];\n\n    console.log('üë• Applying FIXED advisor filters with correct relationship directions:', {\n      clientAdvisors: clientAdvisorIds.length,\n      consultantAdvisors: consultantAdvisorIds.length,\n      totalNodes: nodes.length,\n      totalRelationships: relationships.length\n    });\n\n    if (!clientAdvisorIds.length && !consultantAdvisorIds.length) {\n      return data;\n    }\n\n    // Step 1: Find anchor nodes (companies/consultants matching advisor criteria)\n    const anchorNodeIds = new Set<string>();\n\n    // Client Advisor filtering (Company PCA/ACA) - Find matching companies\n    if (clientAdvisorIds.length > 0) {\n      console.log('üè¢ Finding companies with Client Advisors:', clientAdvisorIds);\n      nodes.forEach((node: Neo4jNode) => {\n        if (node.labels?.includes('COMPANY')) {\n          const props = node.properties || {};\n          const companyPca = props.pca || '';\n          const companyAca = props.aca || '';\n          \n          if (clientAdvisorIds.includes(companyPca) || clientAdvisorIds.includes(companyAca)) {\n            anchorNodeIds.add(node.id);\n            console.log(`   ‚úÖ Company \"${props.name || node.id}\" matches (PCA: ${companyPca}, ACA: ${companyAca})`);\n          }\n        }\n      });\n    }\n\n    // Consultant Advisor filtering (Consultant PCA/Advisor) - Find matching consultants\n    if (consultantAdvisorIds.length > 0) {\n      console.log('üë®‚Äçüíº Finding consultants with Consultant Advisors:', consultantAdvisorIds);\n      nodes.forEach((node: Neo4jNode) => {\n        if (node.labels?.includes('CONSULTANT')) {\n          const props = node.properties || {};\n          const consultantPca = props.pca || '';\n          const consultantAdvisor = props.consultant_advisor || '';\n          \n          if (consultantAdvisorIds.includes(consultantPca) || consultantAdvisorIds.includes(consultantAdvisor)) {\n            anchorNodeIds.add(node.id);\n            console.log(`   ‚úÖ Consultant \"${props.name || node.id}\" matches (PCA: ${consultantPca}, Advisor: ${consultantAdvisor})`);\n          }\n        }\n      });\n    }\n\n    console.log(`üìä Found ${anchorNodeIds.size} anchor nodes (companies/consultants)`);\n\n    if (anchorNodeIds.size === 0) {\n      console.log('‚ùå No matching advisor nodes found');\n      return { ...data, nodes: [], relationships: [] };\n    }\n\n    // Step 2: CORRECTED - Build complete subgraph following correct relationship paths\n    const relevantNodeIds = new Set<string>(anchorNodeIds);\n\n    // üîß FIXED: Specific path expansion based on anchor type\n    if (clientAdvisorIds.length > 0) {\n      console.log('üè¢ Client Advisor path: Company ‚Üí Field Consultant ‚Üí Consultant ‚Üí Products');\n      this.expandFromCompanies(relevantNodeIds, nodes, relationships);\n    }\n\n    if (consultantAdvisorIds.length > 0) {\n      console.log('üë®‚Äçüíº Consultant Advisor path: Consultant ‚Üí Field Consultant ‚Üí Company ‚Üí Products');\n      this.expandFromConsultants(relevantNodeIds, nodes, relationships);\n    }\n\n    console.log(`‚úÖ Final expansion: ${relevantNodeIds.size} total nodes in subgraph`);\n\n    // Step 3: Filter nodes and relationships\n    const filteredNodes = nodes.filter((node: Neo4jNode) => relevantNodeIds.has(node.id));\n    const filteredRelationships = relationships.filter((rel: Neo4jRelationship) => \n      relevantNodeIds.has(rel.start_node_id) && relevantNodeIds.has(rel.end_node_id)\n    );\n\n    // Step 4: Debug output - show what types of nodes we got\n    const nodeTypeCounts: Record<string, number> = {};\n    filteredNodes.forEach(node => {\n      node.labels?.forEach(label => {\n        nodeTypeCounts[label] = (nodeTypeCounts[label] || 0) + 1;\n      });\n    });\n\n    console.log('üìà Filtered subgraph composition:', nodeTypeCounts);\n    console.log(`‚úÖ Advisor filtering result: ${filteredNodes.length} nodes, ${filteredRelationships.length} relationships`);\n\n    return {\n      ...data,\n      nodes: filteredNodes,\n      relationships: filteredRelationships,\n      metadata: {\n        ...data.metadata,\n        advisor_filter_applied: true,\n        client_advisors_selected: clientAdvisorIds.length,\n        consultant_advisors_selected: consultantAdvisorIds.length,\n        original_node_count: nodes.length,\n        filtered_node_count: filteredNodes.length,\n        anchor_nodes_found: anchorNodeIds.size,\n        subgraph_composition: nodeTypeCounts\n      }\n    };\n  }\n\n  // üÜï Helper: Expand from companies following: Company ‚Üê Field Consultant ‚Üê Consultant\n  private expandFromCompanies(nodeIds: Set<string>, nodes: Neo4jNode[], relationships: Neo4jRelationship[]): void {\n    const companies = Array.from(nodeIds).filter(id => {\n      const node = nodes.find(n => n.id === id);\n      return node?.labels?.includes('COMPANY');\n    });\n\n    console.log(`üè¢ Expanding from ${companies.length} companies...`);\n\n    // Step 1: Company ‚Üí Products (OWNS relationship)\n    relationships.forEach(rel => {\n      if (rel.type === 'OWNS' && companies.includes(rel.start_node_id)) {\n        nodeIds.add(rel.end_node_id); // Add product\n        const product = nodes.find(n => n.id === rel.end_node_id);\n        console.log(`   üì¶ Added Product: ${product?.properties?.name || rel.end_node_id}`);\n      }\n    });\n\n    // Step 2: Company ‚Üê Field Consultant (COVERS relationship: FC -COVERS-> Company)\n    const fieldConsultants = new Set<string>();\n    relationships.forEach(rel => {\n      if (rel.type === 'COVERS' && companies.includes(rel.end_node_id)) {\n        nodeIds.add(rel.start_node_id); // Add field consultant\n        fieldConsultants.add(rel.start_node_id);\n        const fc = nodes.find(n => n.id === rel.start_node_id);\n        console.log(`   üë• Added Field Consultant: ${fc?.properties?.name || rel.start_node_id}`);\n      }\n    });\n\n    // Step 3: Field Consultant ‚Üê Consultant (EMPLOYS relationship: Consultant -EMPLOYS-> FC)\n    relationships.forEach(rel => {\n      if (rel.type === 'EMPLOYS' && fieldConsultants.has(rel.end_node_id)) {\n        nodeIds.add(rel.start_node_id); // Add consultant\n        const consultant = nodes.find(n => n.id === rel.start_node_id);\n        console.log(`   üë®‚Äçüíº Added Consultant: ${consultant?.properties?.name || rel.start_node_id}`);\n      }\n    });\n  }\n\n  // üÜï Helper: Expand from consultants following: Consultant ‚Üí Field Consultant ‚Üí Company ‚Üí Products\n  private expandFromConsultants(nodeIds: Set<string>, nodes: Neo4jNode[], relationships: Neo4jRelationship[]): void {\n    const consultants = Array.from(nodeIds).filter(id => {\n      const node = nodes.find(n => n.id === id);\n      return node?.labels?.includes('CONSULTANT');\n    });\n\n    console.log(`üë®‚Äçüíº Expanding from ${consultants.length} consultants...`);\n\n    // Step 1: Consultant ‚Üí Field Consultant (EMPLOYS relationship)\n    const fieldConsultants = new Set<string>();\n    relationships.forEach(rel => {\n      if (rel.type === 'EMPLOYS' && consultants.includes(rel.start_node_id)) {\n        nodeIds.add(rel.end_node_id); // Add field consultant\n        fieldConsultants.add(rel.end_node_id);\n        const fc = nodes.find(n => n.id === rel.end_node_id);\n        console.log(`   üë• Added Field Consultant: ${fc?.properties?.name || rel.end_node_id}`);\n      }\n    });\n\n    // Step 2: Field Consultant ‚Üí Company (COVERS relationship)\n    const companies = new Set<string>();\n    relationships.forEach(rel => {\n      if (rel.type === 'COVERS' && fieldConsultants.has(rel.start_node_id)) {\n        nodeIds.add(rel.end_node_id); // Add company\n        companies.add(rel.end_node_id);\n        const company = nodes.find(n => n.id === rel.end_node_id);\n        console.log(`   üè¢ Added Company: ${company?.properties?.name || rel.end_node_id}`);\n      }\n    });\n\n    // Step 3: Company ‚Üí Products (OWNS relationship)\n    relationships.forEach(rel => {\n      if (rel.type === 'OWNS' && companies.has(rel.start_node_id)) {\n        nodeIds.add(rel.end_node_id); // Add product\n        const product = nodes.find(n => n.id === rel.end_node_id);\n        console.log(`   üì¶ Added Product: ${product?.properties?.name || rel.end_node_id}`);\n      }\n    });\n  }\n\n\n  // üÜï ENHANCED: Core filtering logic with smart orphan removal\n  private applyFiltersLocallyWithOrphanRemoval(data: Neo4jResult, filters: FilterCriteria): Neo4jResult {\n    let filteredNodes = [...data.nodes];\n    let filteredRelationships = [...data.relationships];\n    \n    console.log(`üîç Starting with ${filteredNodes.length} nodes, ${filteredRelationships.length} relationships`);\n    \n    // Step 1: Apply node type filters\n    if (filters.nodeTypes && filters.nodeTypes.length > 0) {\n      filteredNodes = filteredNodes.filter(node => \n        filters.nodeTypes!.some(type => node.labels.includes(type))\n      );\n      console.log(`üìä After node type filter: ${filteredNodes.length} nodes`);\n    }\n    \n    // Step 2: Apply geographic filters\n    if (filters.sales_regions && filters.sales_regions.length > 0) {\n      filteredNodes = filteredNodes.filter(node => \n        !node.properties.sales_region || filters.sales_regions!.includes(node.properties.sales_region)\n      );\n      console.log(`üåç After sales region filter: ${filteredNodes.length} nodes`);\n    }\n    \n    if (filters.channels && filters.channels.length > 0) {\n      filteredNodes = filteredNodes.filter(node => \n        !node.properties.channel || filters.channels!.includes(node.properties.channel)\n      );\n      console.log(`üì° After channel filter: ${filteredNodes.length} nodes`);\n    }\n    \n    // Step 3: Apply entity-specific filters (these create focused subgraphs)\n    let focusedFiltering = false;\n    \n    // üéØ CONSULTANT FILTERING with connected subgraph\n    if (filters.consultantIds && filters.consultantIds.length > 0) {\n      console.log(`üëî Filtering to specific consultants: ${filters.consultantIds.join(', ')}`);\n      focusedFiltering = true;\n      \n      const connectedNodeIds = this.getConsultantSubgraph(filteredNodes, filteredRelationships, filters.consultantIds);\n      filteredNodes = filteredNodes.filter(node => connectedNodeIds.has(node.id));\n      console.log(`üîó After consultant subgraph filtering: ${filteredNodes.length} nodes`);\n    }\n    \n    // üéØ COMPANY FILTERING with connected subgraph\n    if (filters.clientIds && filters.clientIds.length > 0) {\n      console.log(`üè¢ Filtering to specific companies: ${filters.clientIds.join(', ')}`);\n      focusedFiltering = true;\n      \n      const connectedNodeIds = this.getCompanySubgraph(filteredNodes, filteredRelationships, filters.clientIds);\n      filteredNodes = filteredNodes.filter(node => connectedNodeIds.has(node.id));\n      console.log(`üîó After company subgraph filtering: ${filteredNodes.length} nodes`);\n    }\n    \n    // üéØ FIELD CONSULTANT FILTERING with connected subgraph\n    if (filters.fieldConsultantIds && filters.fieldConsultantIds.length > 0) {\n      console.log(`üìã Filtering to specific field consultants: ${filters.fieldConsultantIds.join(', ')}`);\n      focusedFiltering = true;\n      \n      const connectedNodeIds = this.getFieldConsultantSubgraph(filteredNodes, filteredRelationships, filters.fieldConsultantIds);\n      filteredNodes = filteredNodes.filter(node => connectedNodeIds.has(node.id));\n      console.log(`üîó After field consultant subgraph filtering: ${filteredNodes.length} nodes`);\n    }\n    \n    // üéØ PRODUCT FILTERING with connected subgraph\n    if (filters.productIds && filters.productIds.length > 0) {\n      console.log(`üè¶ Filtering to specific products: ${filters.productIds.join(', ')}`);\n      focusedFiltering = true;\n      \n      const connectedNodeIds = this.getProductSubgraph(filteredNodes, filteredRelationships, filters.productIds);\n      filteredNodes = filteredNodes.filter(node => connectedNodeIds.has(node.id));\n      console.log(`üîó After product subgraph filtering: ${filteredNodes.length} nodes`);\n    }\n    \n    // Step 4: Filter relationships based on remaining nodes\n    const nodeIds = new Set(filteredNodes.map(n => n.id));\n    filteredRelationships = filteredRelationships.filter(rel => \n      nodeIds.has(rel.start_node_id) && nodeIds.has(rel.end_node_id)\n    );\n    console.log(`üîó After node filtering, relationships: ${filteredRelationships.length}`);\n    \n    // Step 5: Apply relationship-specific filters\n    if (filters.mandateStatuses && filters.mandateStatuses.length > 0) {\n      filteredRelationships = filteredRelationships.filter(rel => \n        rel.type !== 'OWNS' || \n        !rel.properties.mandate_status ||\n        filters.mandateStatuses!.includes(rel.properties.mandate_status)\n      );\n      console.log(`üìã After mandate status filter: ${filteredRelationships.length} relationships`);\n    }\n    \n    if (filters.influenceLevels && filters.influenceLevels.length > 0) {\n      filteredRelationships = filteredRelationships.filter(rel => \n        rel.type !== 'COVERS' || \n        !rel.properties.level_of_influence ||\n        filters.influenceLevels!.includes(String(rel.properties.level_of_influence))\n      );\n      console.log(`‚≠ê After influence level filter: ${filteredRelationships.length} relationships`);\n    }\n    // üÜï NEW: INCUMBENT PRODUCT FILTERING with connected subgraph\n    if (filters.incumbentProductIds && filters.incumbentProductIds.length > 0) {\n      console.log(`üéØ Filtering to specific incumbent products: ${filters.incumbentProductIds.join(', ')}`);\n      focusedFiltering = true;\n      \n      const connectedNodeIds = this.getIncumbentProductSubgraph(filteredNodes, filteredRelationships, filters.incumbentProductIds);\n      filteredNodes = filteredNodes.filter(node => connectedNodeIds.has(node.id));\n      console.log(`üîó After incumbent product subgraph filtering: ${filteredNodes.length} nodes`);\n    }\n\n    \n  console.log(`üîó After node filtering, relationships: ${filteredRelationships.length}`);\n    // Step 6: Final orphan removal (unless we did focused filtering)\n    if (!focusedFiltering && !filters.showInactive) {\n      const connectedNodeIds = new Set([\n        ...filteredRelationships.map(r => r.start_node_id),\n        ...filteredRelationships.map(r => r.end_node_id)\n      ]);\n      \n      const beforeCount = filteredNodes.length;\n      filteredNodes = filteredNodes.filter(node => \n        connectedNodeIds.has(node.id)\n      );\n      console.log(`üßπ Removed ${beforeCount - filteredNodes.length} orphaned nodes (showInactive=false)`);\n    }\n    \n    const result = { \n      nodes: filteredNodes, \n      relationships: filteredRelationships,\n      metadata: {\n        originalNodeCount: data.nodes.length,\n        originalRelationshipCount: data.relationships.length,\n        filteredNodeCount: filteredNodes.length,\n        filteredRelationshipCount: filteredRelationships.length,\n        filtersApplied: filters,\n        focusedFiltering: focusedFiltering\n      }\n    };\n    \n    console.log(`‚úÖ Final result: ${result.nodes.length} nodes, ${result.relationships.length} relationships`);\n    console.log(`üìä Filtering mode: ${focusedFiltering ? 'Focused Subgraph' : 'General Filtering'}`);\n    \n    return result;\n  }\n\n  // üÜï Helper method: Get consultant and connected subgraph\n  private getConsultantSubgraph(nodes: Neo4jNode[], relationships: Neo4jRelationship[], consultantNames: string[]): Set<string> {\n  const connectedNodeIds = new Set<string>();\n  \n  // Find selected consultants\n  const selectedConsultants = nodes.filter(node => \n    node.labels.includes('CONSULTANT') && \n    consultantNames.includes(node.properties.name)\n  );\n  \n  // Add selected consultants\n  selectedConsultants.forEach(consultant => {\n    connectedNodeIds.add(consultant.id);\n    console.log(`üéØ Selected consultant: ${consultant.properties.name} (${consultant.id})`);\n  });\n  \n  // Find field consultants employed by selected consultants\n  const employmentEdges = relationships.filter(rel => \n    rel.type === 'EMPLOYS' && \n    selectedConsultants.some(c => c.id === rel.start_node_id)\n  );\n  \n  employmentEdges.forEach(edge => {\n    connectedNodeIds.add(edge.end_node_id);\n    const fieldConsultant = nodes.find(n => n.id === edge.end_node_id);\n    console.log(`  üìã Field consultant: ${fieldConsultant?.properties.name} (${edge.end_node_id})`);\n  });\n  \n  // Find companies covered by these field consultants\n  const coverageEdges = relationships.filter(rel => \n    rel.type === 'COVERS' && \n    connectedNodeIds.has(rel.start_node_id)\n  );\n  \n  coverageEdges.forEach(edge => {\n    connectedNodeIds.add(edge.end_node_id);\n    const company = nodes.find(n => n.id === edge.end_node_id);\n    console.log(`    üè¢ Company: ${company?.properties.name} (${edge.end_node_id})`);\n  });\n  \n  // Find products owned by these companies (standard path)\n  const ownershipEdges = relationships.filter(rel => \n    rel.type === 'OWNS' && \n    connectedNodeIds.has(rel.start_node_id)\n  );\n  \n  ownershipEdges.forEach(edge => {\n    connectedNodeIds.add(edge.end_node_id);\n    const product = nodes.find(n => n.id === edge.end_node_id);\n    \n    // Check if this is an INCUMBENT_PRODUCT or regular PRODUCT\n    if (product?.labels.includes('INCUMBENT_PRODUCT')) {\n      console.log(`      üéØ Incumbent Product: ${product?.properties.name} (${edge.end_node_id})`);\n      \n      // üÜï NEW: Find products recommended by this incumbent product via BI_RECOMMENDS\n      const recommendationEdges = relationships.filter(rel => \n        rel.type === 'BI_RECOMMENDS' && \n        rel.start_node_id === edge.end_node_id\n      );\n      \n      recommendationEdges.forEach(recEdge => {\n        connectedNodeIds.add(recEdge.end_node_id);\n        const recommendedProduct = nodes.find(n => n.id === recEdge.end_node_id);\n        console.log(`        üì¶ ‚Üí Recommended Product: ${recommendedProduct?.properties.name} (${recEdge.end_node_id})`);\n      });\n      \n    } else if (product?.labels.includes('PRODUCT')) {\n      console.log(`      üì¶ Product: ${product?.properties.name} (${edge.end_node_id})`);\n    }\n  });\n  \n  return connectedNodeIds;\n}\n\n  // üÜï Helper method: Get company and connected subgraph\n  private getCompanySubgraph(nodes: Neo4jNode[], relationships: Neo4jRelationship[], companyNames: string[]): Set<string> {\n    const connectedNodeIds = new Set<string>();\n    \n    // Find selected companies\n    const selectedCompanies = nodes.filter(node => \n      node.labels.includes('COMPANY') && \n      companyNames.includes(node.properties.name)\n    );\n    \n    // Add selected companies\n    selectedCompanies.forEach(company => {\n      connectedNodeIds.add(company.id);\n      console.log(`üéØ Selected company: ${company.properties.name} (${company.id})`);\n    });\n    \n    // Find field consultants covering these companies\n    const coverageEdges = relationships.filter(rel => \n      rel.type === 'COVERS' && \n      selectedCompanies.some(c => c.id === rel.end_node_id)\n    );\n    \n    coverageEdges.forEach(edge => {\n      connectedNodeIds.add(edge.start_node_id);\n      const fieldConsultant = nodes.find(n => n.id === edge.start_node_id);\n      console.log(`  üìã Field consultant: ${fieldConsultant?.properties.name} (${edge.start_node_id})`);\n    });\n    \n    // Find consultants employing these field consultants\n    const employmentEdges = relationships.filter(rel => \n      rel.type === 'EMPLOYS' && \n      connectedNodeIds.has(rel.end_node_id)\n    );\n    \n    employmentEdges.forEach(edge => {\n      connectedNodeIds.add(edge.start_node_id);\n      const consultant = nodes.find(n => n.id === edge.start_node_id);\n      console.log(`üë®‚Äçüíº Consultant: ${consultant?.properties.name} (${edge.start_node_id})`);\n    });\n    \n    // Find products owned by selected companies\n    const ownershipEdges = relationships.filter(rel => \n      rel.type === 'OWNS' && \n      selectedCompanies.some(c => c.id === rel.start_node_id)\n    );\n    \n    ownershipEdges.forEach(edge => {\n      connectedNodeIds.add(edge.end_node_id);\n      const product = nodes.find(n => n.id === edge.end_node_id);\n      \n      // Check if this is an INCUMBENT_PRODUCT or regular PRODUCT\n      if (product?.labels.includes('INCUMBENT_PRODUCT')) {\n        console.log(`  üéØ Incumbent Product: ${product?.properties.name} (${edge.end_node_id})`);\n        \n        // üÜï NEW: Find products recommended by this incumbent product via BI_RECOMMENDS\n        const recommendationEdges = relationships.filter(rel => \n          rel.type === 'BI_RECOMMENDS' && \n          rel.start_node_id === edge.end_node_id\n        );\n        \n        recommendationEdges.forEach(recEdge => {\n          connectedNodeIds.add(recEdge.end_node_id);\n          const recommendedProduct = nodes.find(n => n.id === recEdge.end_node_id);\n          console.log(`    üì¶ ‚Üí Recommended Product: ${recommendedProduct?.properties.name} (${recEdge.end_node_id})`);\n        });\n        \n      } else if (product?.labels.includes('PRODUCT')) {\n        console.log(`  üì¶ Product: ${product?.properties.name} (${edge.end_node_id})`);\n      }\n    });\n    \n    return connectedNodeIds;\n  }\n\n  // üÜï Helper method: Get field consultant and connected subgraph\n  private getFieldConsultantSubgraph(nodes: Neo4jNode[], relationships: Neo4jRelationship[], fieldConsultantNames: string[]): Set<string> {\n    const connectedNodeIds = new Set<string>();\n    \n    const selectedFieldConsultants = nodes.filter(node => \n      node.labels.includes('FIELD_CONSULTANT') && \n      fieldConsultantNames.includes(node.properties.name)\n    );\n    \n    // Add selected field consultants\n    selectedFieldConsultants.forEach(fc => {\n      connectedNodeIds.add(fc.id);\n      console.log(`üéØ Selected field consultant: ${fc.properties.name} (${fc.id})`);\n    });\n    \n    // Find their parent consultants\n    const employmentEdges = relationships.filter(rel => \n      rel.type === 'EMPLOYS' && \n      selectedFieldConsultants.some(fc => fc.id === rel.end_node_id)\n    );\n    \n    employmentEdges.forEach(edge => {\n      connectedNodeIds.add(edge.start_node_id);\n      const consultant = nodes.find(n => n.id === edge.start_node_id);\n      console.log(`üë®‚Äçüíº Consultant: ${consultant?.properties.name} (${edge.start_node_id})`);\n    });\n    \n    // Find companies covered by selected field consultants\n    const coverageEdges = relationships.filter(rel => \n      rel.type === 'COVERS' && \n      selectedFieldConsultants.some(fc => fc.id === rel.start_node_id)\n    );\n    \n    coverageEdges.forEach(edge => {\n      connectedNodeIds.add(edge.end_node_id);\n      const company = nodes.find(n => n.id === edge.end_node_id);\n      console.log(`  üè¢ Company: ${company?.properties.name} (${edge.end_node_id})`);\n    });\n    \n    // Find products owned by covered companies\n    const companies = Array.from(connectedNodeIds).filter(id => {\n      const node = nodes.find(n => n.id === id);\n      return node?.labels.includes('COMPANY');\n    });\n    \n    const ownershipEdges = relationships.filter(rel => \n      rel.type === 'OWNS' && companies.includes(rel.start_node_id)\n    );\n    \n    ownershipEdges.forEach(edge => {\n      connectedNodeIds.add(edge.end_node_id);\n      const product = nodes.find(n => n.id === edge.end_node_id);\n      \n      // üîß NEW: Check if this is an INCUMBENT_PRODUCT or regular PRODUCT\n      if (product?.labels.includes('INCUMBENT_PRODUCT')) {\n        console.log(`    üéØ Incumbent Product: ${product?.properties.name} (${edge.end_node_id})`);\n        \n        // üÜï NEW: Find products recommended by this incumbent product via BI_RECOMMENDS\n        const recommendationEdges = relationships.filter(rel => \n          rel.type === 'BI_RECOMMENDS' && \n          rel.start_node_id === edge.end_node_id\n        );\n        \n        recommendationEdges.forEach(recEdge => {\n          connectedNodeIds.add(recEdge.end_node_id);\n          const recommendedProduct = nodes.find(n => n.id === recEdge.end_node_id);\n          console.log(`      üì¶ ‚Üí Recommended Product: ${recommendedProduct?.properties.name} (${recEdge.end_node_id})`);\n        });\n        \n      } else if (product?.labels.includes('PRODUCT')) {\n        console.log(`    üì¶ Product: ${product?.properties.name} (${edge.end_node_id})`);\n      }\n    });\n    \n    return connectedNodeIds;\n  }\n\n  // üÜï Helper method: Get product and connected subgraph\n  private getProductSubgraph(nodes: Neo4jNode[], relationships: Neo4jRelationship[], productNames: string[]): Set<string> {\n    const connectedNodeIds = new Set<string>();\n    \n    const selectedProducts = nodes.filter(node => \n      (node.labels.includes('PRODUCT') || node.labels.includes('INCUMBENT_PRODUCT')) && \n      productNames.includes(node.properties.name)\n    );\n    \n    // Add selected products\n    selectedProducts.forEach(product => {\n      connectedNodeIds.add(product.id);\n      console.log(`üéØ Selected product: ${product.properties.name} (${product.id})`);\n    });\n    \n    // üÜï NEW: Handle BI_RECOMMENDS relationships for both directions\n    \n    // Find incumbent products that recommend selected products (reverse BI_RECOMMENDS)\n    const reverseRecommendationEdges = relationships.filter(rel => \n      rel.type === 'BI_RECOMMENDS' && \n      selectedProducts.some(p => p.id === rel.end_node_id)\n    );\n    \n    reverseRecommendationEdges.forEach(edge => {\n      connectedNodeIds.add(edge.start_node_id);\n      const incumbentProduct = nodes.find(n => n.id === edge.start_node_id);\n      console.log(`  üéØ ‚Üê Incumbent Product (recommends this): ${incumbentProduct?.properties.name} (${edge.start_node_id})`);\n    });\n    \n    // Find products recommended by selected incumbent products (forward BI_RECOMMENDS)\n    const forwardRecommendationEdges = relationships.filter(rel => \n      rel.type === 'BI_RECOMMENDS' && \n      selectedProducts.some(p => p.id === rel.start_node_id)\n    );\n    \n    forwardRecommendationEdges.forEach(edge => {\n      connectedNodeIds.add(edge.end_node_id);\n      const recommendedProduct = nodes.find(n => n.id === edge.end_node_id);\n      console.log(`  üì¶ ‚Üí Recommended Product: ${recommendedProduct?.properties.name} (${edge.end_node_id})`);\n    });\n    \n    // Find companies owning these products (including incumbent products)\n    const ownershipEdges = relationships.filter(rel => \n      rel.type === 'OWNS' && \n      connectedNodeIds.has(rel.end_node_id)\n    );\n    \n    ownershipEdges.forEach(edge => {\n      connectedNodeIds.add(edge.start_node_id);\n      const company = nodes.find(n => n.id === edge.start_node_id);\n      console.log(`  üè¢ Company: ${company?.properties.name} (${edge.start_node_id})`);\n    });\n    \n    // Find field consultants covering these companies\n    const companies = Array.from(connectedNodeIds).filter(id => {\n      const node = nodes.find(n => n.id === id);\n      return node?.labels.includes('COMPANY');\n    });\n    \n    const coverageEdges = relationships.filter(rel => \n      rel.type === 'COVERS' && companies.includes(rel.end_node_id)\n    );\n    \n    coverageEdges.forEach(edge => {\n      connectedNodeIds.add(edge.start_node_id);\n      const fieldConsultant = nodes.find(n => n.id === edge.start_node_id);\n      console.log(`    üìã Field consultant: ${fieldConsultant?.properties.name} (${edge.start_node_id})`);\n    });\n    \n    // Find consultants employing these field consultants\n    const fieldConsultants = Array.from(connectedNodeIds).filter(id => {\n      const node = nodes.find(n => n.id === id);\n      return node?.labels.includes('FIELD_CONSULTANT');\n    });\n    \n    const employmentEdges = relationships.filter(rel => \n      rel.type === 'EMPLOYS' && fieldConsultants.includes(rel.end_node_id)\n    );\n    \n    employmentEdges.forEach(edge => {\n      connectedNodeIds.add(edge.start_node_id);\n      const consultant = nodes.find(n => n.id === edge.start_node_id);\n      console.log(`      üë®‚Äçüíº Consultant: ${consultant?.properties.name} (${edge.start_node_id})`);\n    });\n    \n    return connectedNodeIds;\n  }\n  \n  private getIncumbentProductSubgraph(nodes: Neo4jNode[], relationships: Neo4jRelationship[], incumbentProductNames: string[]): Set<string> {\n    const connectedNodeIds = new Set<string>();\n    \n    const selectedIncumbentProducts = nodes.filter(node => \n      node.labels.includes('INCUMBENT_PRODUCT') && \n      incumbentProductNames.includes(node.properties.name)\n    );\n    \n    // Add selected incumbent products\n    selectedIncumbentProducts.forEach(product => {\n      connectedNodeIds.add(product.id);\n      console.log(`üéØ Selected incumbent product: ${product.properties.name} (${product.id})`);\n    });\n    \n    // Find products recommended by these incumbent products\n    const recommendationEdges = relationships.filter(rel => \n      rel.type === 'BI_RECOMMENDS' && \n      selectedIncumbentProducts.some(p => p.id === rel.start_node_id)\n    );\n    \n    recommendationEdges.forEach(edge => {\n      connectedNodeIds.add(edge.end_node_id);\n      const recommendedProduct = nodes.find(n => n.id === edge.end_node_id);\n      console.log(`  üì¶ ‚Üí Recommended Product: ${recommendedProduct?.properties.name} (${edge.end_node_id})`);\n    });\n    \n    // Find companies owning these incumbent products\n    const ownershipEdges = relationships.filter(rel => \n      rel.type === 'OWNS' && \n      selectedIncumbentProducts.some(p => p.id === rel.end_node_id)\n    );\n    \n    ownershipEdges.forEach(edge => {\n      connectedNodeIds.add(edge.start_node_id);\n      const company = nodes.find(n => n.id === edge.start_node_id);\n      console.log(`  üè¢ Company: ${company?.properties.name} (${edge.start_node_id})`);\n    });\n    \n    // Continue with standard path (field consultants, consultants)\n    const companies = Array.from(connectedNodeIds).filter(id => {\n      const node = nodes.find(n => n.id === id);\n      return node?.labels.includes('COMPANY');\n    });\n    \n    const coverageEdges = relationships.filter(rel => \n      rel.type === 'COVERS' && companies.includes(rel.end_node_id)\n    );\n    \n    coverageEdges.forEach(edge => {\n      connectedNodeIds.add(edge.start_node_id);\n      const fieldConsultant = nodes.find(n => n.id === edge.start_node_id);\n      console.log(`    üìã Field consultant: ${fieldConsultant?.properties.name} (${edge.start_node_id})`);\n    });\n    \n    const fieldConsultants = Array.from(connectedNodeIds).filter(id => {\n      const node = nodes.find(n => n.id === id);\n      return node?.labels.includes('FIELD_CONSULTANT');\n    });\n    \n    const employmentEdges = relationships.filter(rel => \n      rel.type === 'EMPLOYS' && fieldConsultants.includes(rel.end_node_id)\n    );\n    \n    employmentEdges.forEach(edge => {\n      connectedNodeIds.add(edge.start_node_id);\n      const consultant = nodes.find(n => n.id === edge.start_node_id);\n      console.log(`      üë®‚Äçüíº Consultant: ${consultant?.properties.name} (${edge.start_node_id})`);\n    });\n    \n    return connectedNodeIds;\n  }\n  private extractFilterOptionsFromData(data: Neo4jResult): FilterOptions {\n    const options: Record<string, Set<string>> = {\n      regions: new Set(['NAI', 'EMEA', 'APAC']),\n      sales_regions: new Set(),\n      channels: new Set(),\n      assetClasses: new Set(),\n      consultants: new Set(),\n      fieldConsultants: new Set(),\n      clients: new Set(),\n      products: new Set(),\n      incumbent_products: new Set(),\n      pcas: new Set(),\n      acas: new Set(),\n      ratings: new Set(['Positive', 'Negative', 'Neutral', 'Introduced']),\n      mandateStatuses: new Set(['Active', 'At Risk', 'Conversion in Progress']),\n      jpm_flags: new Set(['Y', 'N']),\n      privacy_levels: new Set(['Public', 'Private', 'Confidential']),\n      influenceLevels: new Set(['1', '2', '3', '4'])\n    };\n    \n    data.nodes.forEach(node => {\n      const props = node.properties;\n      \n      if (props.sales_region) options.sales_regions.add(props.sales_region);\n      if (props.channel) options.channels.add(props.channel);\n      if (props.asset_class) options.assetClasses.add(props.asset_class);\n      if (props.pca) options.pcas.add(props.pca);\n      if (props.aca) options.acas.add(props.aca);\n      if (props.jpm_flag) options.jpm_flags.add(props.jpm_flag);\n      if (props.privacy) options.privacy_levels.add(props.privacy);\n      \n      if (node.labels.includes('CONSULTANT') && props.name) {\n        options.consultants.add(props.name);\n      }\n      if (node.labels.includes('FIELD_CONSULTANT') && props.name) {\n        options.fieldConsultants.add(props.name);\n      }\n      if (node.labels.includes('COMPANY') && props.name) {\n        options.clients.add(props.name);\n      }\n      if (node.labels.includes('PRODUCT') && props.name) {\n        options.products.add(props.name);\n      }\n      if (node.labels.includes('INCUMBENT_PRODUCT') && props.name) {\n        options.incumbent_products.add(props.name);\n      }\n    });\n    \n    data.relationships.forEach(rel => {\n      if (rel.type === 'RATES' && rel.properties.rankgroup) {\n        options.ratings.add(rel.properties.rankgroup);\n      }\n      if (rel.type === 'OWNS' && rel.properties.mandate_status) {\n        options.mandateStatuses.add(rel.properties.mandate_status);\n      }\n      if (rel.type === 'COVERS' && rel.properties.level_of_influence) {\n        options.influenceLevels.add(String(rel.properties.level_of_influence));\n      }\n    });\n    \n    const result: FilterOptions = {} as FilterOptions;\n    Object.entries(options).forEach(([key, set]) => {\n      result[key as keyof FilterOptions] = Array.from(set).sort() as any;\n    });\n    \n    console.log('‚úÖ Local filter options extracted:', {\n      regions: result.regions.length,\n      sales_regions: result.sales_regions.length,\n      channels: result.channels.length,\n      consultants: result.consultants.length,\n      products: result.products.length\n    });\n    \n    return result;\n  }\n  \n  private getEmptyFilterOptions(): FilterOptions {\n    return {\n      regions: ['NAI', 'EMEA', 'APAC'],\n      sales_regions: [],\n      channels: [],\n      assetClasses: [],\n      consultants: [],\n      fieldConsultants: [],\n      clients: [],\n      products: [],\n      incumbent_products: [],\n      pcas: [],\n      acas: [],\n      clientAdvisors: [], // Company PCA + ACA combined\n     consultantAdvisors: [], // Consultant PCA + Advisor combined\n      ratings: ['Positive', 'Negative', 'Neutral', 'Introduced'],\n      mandateStatuses: ['Active', 'At Risk', 'Conversion in Progress'],\n      jpm_flags: ['Y', 'N'],\n      privacy_levels: ['Public', 'Private', 'Confidential'],\n      influenceLevels: ['1', '2', '3', '4', 'UNK', 'High', 'medium', 'low'],\n    };\n  }\n  \n  clearCache(): void {\n    this.regionDataCache.clear();\n    this.filterOptionsCache.clear();\n    console.log('üßπ API service cache cleared');\n  }\n}\n\nexport default ApiNeo4jService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}