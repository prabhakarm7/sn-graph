{"ast":null,"code":"// config/ConsultantColors.ts\n// Carefully curated consultant colors that avoid status color conflicts\n\n// üö´ AVOIDED COLORS (to prevent confusion with status indicators):\n// - Red shades (used for \"Negative\" ratings, \"At Risk\" status)\n// - Orange shades (used for \"Conversion in Progress\", warnings)\n// - Green shades (used for \"Positive\" ratings, \"Active\" status)\n// - Yellow shades (used for influence levels, warnings)\n\n// ‚úÖ SAFE CONSULTANT COLORS - No conflict with status indicators\nexport const CONSULTANT_COLOR_PALETTE = [{\n  name: 'Deep Purple',\n  primary: '#7c3aed',\n  secondary: '#6d28d9',\n  light: 'rgba(124, 58, 237, 0.12)',\n  description: 'Rich, sophisticated purple'\n}, {\n  name: 'Violet',\n  primary: '#9333ea',\n  secondary: '#7c3aed',\n  light: 'rgba(147, 51, 234, 0.12)',\n  description: 'Modern, distinctive violet'\n}, {\n  name: 'Teal',\n  primary: '#0d9488',\n  secondary: '#0f766e',\n  light: 'rgba(13, 148, 136, 0.12)',\n  description: 'Calm, balanced teal'\n}, {\n  name: 'Cyan',\n  primary: '#0891b2',\n  secondary: '#0e7490',\n  light: 'rgba(8, 145, 178, 0.12)',\n  description: 'Cool, professional cyan'\n}, {\n  name: 'Sky Blue',\n  primary: '#0284c7',\n  secondary: '#0369a1',\n  light: 'rgba(2, 132, 199, 0.12)',\n  description: 'Bright, clear sky blue'\n}, {\n  name: 'Rose Pink',\n  primary: '#be185d',\n  secondary: '#a21caf',\n  light: 'rgba(190, 24, 93, 0.12)',\n  description: 'Elegant, distinctive pink'\n}, {\n  name: 'Plum',\n  primary: '#a855f7',\n  secondary: '#9333ea',\n  light: 'rgba(168, 85, 247, 0.12)',\n  description: 'Rich, royal plum'\n}, {\n  name: 'Sapphire',\n  primary: '#1d4ed8',\n  secondary: '#2563eb',\n  light: 'rgba(29, 78, 216, 0.12)',\n  description: 'Brilliant sapphire blue'\n}, {\n  name: 'Magenta',\n  primary: '#c026d3',\n  secondary: '#a21caf',\n  light: 'rgba(192, 38, 211, 0.12)',\n  description: 'Bold, creative magenta'\n}];\n\n// üé® APP THEME COLORS (for UI elements only)\nexport const APP_THEME_COLORS = {\n  primary: '#6366f1',\n  // App's main indigo color\n  secondary: '#4f46e5',\n  // App's secondary indigo\n  success: '#10b981',\n  // App's success green\n  warning: '#f59e0b',\n  // App's warning orange\n  error: '#ef4444',\n  // App's error red\n  info: '#3b82f6',\n  // App's info blue\n  surface: 'rgba(15, 23, 42, 0.95)',\n  surfaceLight: 'rgba(255, 255, 255, 0.1)'\n};\n\n// üè¢ FIXED ENTITY COLORS (separate from consultants)\nexport const ENTITY_COLORS = {\n  company: {\n    name: 'Corporate Green',\n    primary: '#059669',\n    // Emerald green for companies\n    secondary: '#047857',\n    light: 'rgba(5, 150, 105, 0.12)',\n    description: 'Professional corporate green'\n  },\n  product: {\n    name: 'Product Blue',\n    primary: '#0ea5e9',\n    // Sky blue for products  \n    secondary: '#0284c7',\n    light: 'rgba(14, 165, 233, 0.12)',\n    description: 'Clear product identification blue'\n  }\n};\n\n// üö¶ STATUS COLORS (used for ratings, mandate status, etc.)\nexport const STATUS_COLORS = {\n  positive: '#16a34a',\n  // Green for positive ratings\n  negative: '#dc2626',\n  // Red for negative ratings\n  neutral: '#6b7280',\n  // Gray for neutral/introduced\n  warning: '#f59e0b',\n  // Orange for warnings/at risk\n  active: '#10b981',\n  // Bright green for active status\n  atRisk: '#ef4444',\n  // Red for at risk status\n  inProgress: '#f59e0b',\n  // Orange for conversion in progress\n  high: '#16a34a',\n  // Green for high influence\n  medium: '#f59e0b',\n  // Orange for medium influence  \n  low: '#ef4444',\n  // Red for low influence\n  unknown: '#6b7280' // Gray for unknown\n};\n\n// üîß UTILITY FUNCTIONS\nexport const getConsultantColorByIndex = index => {\n  return CONSULTANT_COLOR_PALETTE[index % CONSULTANT_COLOR_PALETTE.length];\n};\nexport const getConsultantColorById = consultantId => {\n  if (!consultantId) return CONSULTANT_COLOR_PALETTE[0];\n\n  // Create a simple hash from the consultant ID\n  let hash = 0;\n  for (let i = 0; i < consultantId.length; i++) {\n    const char = consultantId.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash = hash & hash; // Convert to 32-bit integer\n  }\n  const index = Math.abs(hash) % CONSULTANT_COLOR_PALETTE.length;\n  return CONSULTANT_COLOR_PALETTE[index];\n};\n\n// üìä COLOR PALETTE INFO\nexport const getColorPaletteInfo = () => {\n  return {\n    totalConsultantColors: CONSULTANT_COLOR_PALETTE.length,\n    consultantColors: CONSULTANT_COLOR_PALETTE.map(color => ({\n      name: color.name,\n      primary: color.primary,\n      description: color.description\n    })),\n    entityColors: {\n      company: ENTITY_COLORS.company,\n      product: ENTITY_COLORS.product\n    },\n    statusColors: STATUS_COLORS,\n    appTheme: APP_THEME_COLORS\n  };\n};\n\n// üé® EXPORT INDIVIDUAL COLOR ARRAYS FOR EASY ACCESS\nexport const CONSULTANT_COLORS = CONSULTANT_COLOR_PALETTE.map(_c = color => ({\n  primary: color.primary,\n  secondary: color.secondary,\n  light: color.light\n}));\n\n// Debug function to log all colors (for development)\n_c2 = CONSULTANT_COLORS;\nexport const logColorPalette = () => {\n  console.log('üé® CONSULTANT COLOR PALETTE:');\n  CONSULTANT_COLOR_PALETTE.forEach((color, index) => {\n    console.log(`${index + 1}. ${color.name} (${color.primary}) - ${color.description}`);\n  });\n  console.log('\\nüè¢ ENTITY COLORS:');\n  console.log(`Company: ${ENTITY_COLORS.company.name} (${ENTITY_COLORS.company.primary})`);\n  console.log(`Product: ${ENTITY_COLORS.product.name} (${ENTITY_COLORS.product.primary})`);\n  console.log('\\nüö¶ STATUS COLORS:');\n  console.log('Positive:', STATUS_COLORS.positive);\n  console.log('Negative:', STATUS_COLORS.negative);\n  console.log('Warning:', STATUS_COLORS.warning);\n  console.log('Active:', STATUS_COLORS.active);\n  console.log('At Risk:', STATUS_COLORS.atRisk);\n};\nvar _c, _c2;\n$RefreshReg$(_c, \"CONSULTANT_COLORS$CONSULTANT_COLOR_PALETTE.map\");\n$RefreshReg$(_c2, \"CONSULTANT_COLORS\");","map":{"version":3,"names":["CONSULTANT_COLOR_PALETTE","name","primary","secondary","light","description","APP_THEME_COLORS","success","warning","error","info","surface","surfaceLight","ENTITY_COLORS","company","product","STATUS_COLORS","positive","negative","neutral","active","atRisk","inProgress","high","medium","low","unknown","getConsultantColorByIndex","index","length","getConsultantColorById","consultantId","hash","i","char","charCodeAt","Math","abs","getColorPaletteInfo","totalConsultantColors","consultantColors","map","color","entityColors","statusColors","appTheme","CONSULTANT_COLORS","_c","_c2","logColorPalette","console","log","forEach","$RefreshReg$"],"sources":["/Users/prabhakarmudliyar/text-to-cypher-mui/frontend/src/components/config/ConsultantColors.ts"],"sourcesContent":["// config/ConsultantColors.ts\n// Carefully curated consultant colors that avoid status color conflicts\n\n// üö´ AVOIDED COLORS (to prevent confusion with status indicators):\n// - Red shades (used for \"Negative\" ratings, \"At Risk\" status)\n// - Orange shades (used for \"Conversion in Progress\", warnings)\n// - Green shades (used for \"Positive\" ratings, \"Active\" status)\n// - Yellow shades (used for influence levels, warnings)\n\n// ‚úÖ SAFE CONSULTANT COLORS - No conflict with status indicators\nexport const CONSULTANT_COLOR_PALETTE = [\n  {\n    name: 'Deep Purple',\n    primary: '#7c3aed',\n    secondary: '#6d28d9',\n    light: 'rgba(124, 58, 237, 0.12)',\n    description: 'Rich, sophisticated purple'\n  },\n  {\n    name: 'Violet',\n    primary: '#9333ea',\n    secondary: '#7c3aed',\n    light: 'rgba(147, 51, 234, 0.12)',\n    description: 'Modern, distinctive violet'\n  },\n  {\n    name: 'Teal',\n    primary: '#0d9488',\n    secondary: '#0f766e',\n    light: 'rgba(13, 148, 136, 0.12)',\n    description: 'Calm, balanced teal'\n  },\n  {\n    name: 'Cyan',\n    primary: '#0891b2',\n    secondary: '#0e7490',\n    light: 'rgba(8, 145, 178, 0.12)',\n    description: 'Cool, professional cyan'\n  },\n  {\n    name: 'Sky Blue',\n    primary: '#0284c7',\n    secondary: '#0369a1',\n    light: 'rgba(2, 132, 199, 0.12)',\n    description: 'Bright, clear sky blue'\n  },\n  {\n    name: 'Rose Pink',\n    primary: '#be185d',\n    secondary: '#a21caf',\n    light: 'rgba(190, 24, 93, 0.12)',\n    description: 'Elegant, distinctive pink'\n  },\n  {\n    name: 'Plum',\n    primary: '#a855f7',\n    secondary: '#9333ea',\n    light: 'rgba(168, 85, 247, 0.12)',\n    description: 'Rich, royal plum'\n  },\n  {\n    name: 'Sapphire',\n    primary: '#1d4ed8',\n    secondary: '#2563eb',\n    light: 'rgba(29, 78, 216, 0.12)',\n    description: 'Brilliant sapphire blue'\n  },\n  {\n    name: 'Magenta',\n    primary: '#c026d3',\n    secondary: '#a21caf',\n    light: 'rgba(192, 38, 211, 0.12)',\n    description: 'Bold, creative magenta'\n  }\n];\n\n// üé® APP THEME COLORS (for UI elements only)\nexport const APP_THEME_COLORS = {\n  primary: '#6366f1',      // App's main indigo color\n  secondary: '#4f46e5',    // App's secondary indigo\n  success: '#10b981',      // App's success green\n  warning: '#f59e0b',      // App's warning orange\n  error: '#ef4444',        // App's error red\n  info: '#3b82f6',         // App's info blue\n  surface: 'rgba(15, 23, 42, 0.95)',\n  surfaceLight: 'rgba(255, 255, 255, 0.1)'\n};\n\n// üè¢ FIXED ENTITY COLORS (separate from consultants)\nexport const ENTITY_COLORS = {\n  company: {\n    name: 'Corporate Green',\n    primary: '#059669',      // Emerald green for companies\n    secondary: '#047857',\n    light: 'rgba(5, 150, 105, 0.12)',\n    description: 'Professional corporate green'\n  },\n  product: {\n    name: 'Product Blue',\n    primary: '#0ea5e9',      // Sky blue for products  \n    secondary: '#0284c7',\n    light: 'rgba(14, 165, 233, 0.12)',\n    description: 'Clear product identification blue'\n  }\n};\n\n// üö¶ STATUS COLORS (used for ratings, mandate status, etc.)\nexport const STATUS_COLORS = {\n  positive: '#16a34a',      // Green for positive ratings\n  negative: '#dc2626',      // Red for negative ratings\n  neutral: '#6b7280',       // Gray for neutral/introduced\n  warning: '#f59e0b',       // Orange for warnings/at risk\n  active: '#10b981',        // Bright green for active status\n  atRisk: '#ef4444',        // Red for at risk status\n  inProgress: '#f59e0b',    // Orange for conversion in progress\n  high: '#16a34a',          // Green for high influence\n  medium: '#f59e0b',        // Orange for medium influence  \n  low: '#ef4444',           // Red for low influence\n  unknown: '#6b7280'        // Gray for unknown\n};\n\n// üîß UTILITY FUNCTIONS\nexport const getConsultantColorByIndex = (index: number) => {\n  return CONSULTANT_COLOR_PALETTE[index % CONSULTANT_COLOR_PALETTE.length];\n};\n\nexport const getConsultantColorById = (consultantId: string) => {\n  if (!consultantId) return CONSULTANT_COLOR_PALETTE[0];\n  \n  // Create a simple hash from the consultant ID\n  let hash = 0;\n  for (let i = 0; i < consultantId.length; i++) {\n    const char = consultantId.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32-bit integer\n  }\n  \n  const index = Math.abs(hash) % CONSULTANT_COLOR_PALETTE.length;\n  return CONSULTANT_COLOR_PALETTE[index];\n};\n\n// üìä COLOR PALETTE INFO\nexport const getColorPaletteInfo = () => {\n  return {\n    totalConsultantColors: CONSULTANT_COLOR_PALETTE.length,\n    consultantColors: CONSULTANT_COLOR_PALETTE.map(color => ({\n      name: color.name,\n      primary: color.primary,\n      description: color.description\n    })),\n    entityColors: {\n      company: ENTITY_COLORS.company,\n      product: ENTITY_COLORS.product\n    },\n    statusColors: STATUS_COLORS,\n    appTheme: APP_THEME_COLORS\n  };\n};\n\n// üé® EXPORT INDIVIDUAL COLOR ARRAYS FOR EASY ACCESS\nexport const CONSULTANT_COLORS = CONSULTANT_COLOR_PALETTE.map(color => ({\n  primary: color.primary,\n  secondary: color.secondary,\n  light: color.light\n}));\n\n// Debug function to log all colors (for development)\nexport const logColorPalette = () => {\n  console.log('üé® CONSULTANT COLOR PALETTE:');\n  CONSULTANT_COLOR_PALETTE.forEach((color, index) => {\n    console.log(`${index + 1}. ${color.name} (${color.primary}) - ${color.description}`);\n  });\n  \n  console.log('\\nüè¢ ENTITY COLORS:');\n  console.log(`Company: ${ENTITY_COLORS.company.name} (${ENTITY_COLORS.company.primary})`);\n  console.log(`Product: ${ENTITY_COLORS.product.name} (${ENTITY_COLORS.product.primary})`);\n  \n  console.log('\\nüö¶ STATUS COLORS:');\n  console.log('Positive:', STATUS_COLORS.positive);\n  console.log('Negative:', STATUS_COLORS.negative);\n  console.log('Warning:', STATUS_COLORS.warning);\n  console.log('Active:', STATUS_COLORS.active);\n  console.log('At Risk:', STATUS_COLORS.atRisk);\n};"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,MAAMA,wBAAwB,GAAG,CACtC;EACEC,IAAI,EAAE,aAAa;EACnBC,OAAO,EAAE,SAAS;EAClBC,SAAS,EAAE,SAAS;EACpBC,KAAK,EAAE,0BAA0B;EACjCC,WAAW,EAAE;AACf,CAAC,EACD;EACEJ,IAAI,EAAE,QAAQ;EACdC,OAAO,EAAE,SAAS;EAClBC,SAAS,EAAE,SAAS;EACpBC,KAAK,EAAE,0BAA0B;EACjCC,WAAW,EAAE;AACf,CAAC,EACD;EACEJ,IAAI,EAAE,MAAM;EACZC,OAAO,EAAE,SAAS;EAClBC,SAAS,EAAE,SAAS;EACpBC,KAAK,EAAE,0BAA0B;EACjCC,WAAW,EAAE;AACf,CAAC,EACD;EACEJ,IAAI,EAAE,MAAM;EACZC,OAAO,EAAE,SAAS;EAClBC,SAAS,EAAE,SAAS;EACpBC,KAAK,EAAE,yBAAyB;EAChCC,WAAW,EAAE;AACf,CAAC,EACD;EACEJ,IAAI,EAAE,UAAU;EAChBC,OAAO,EAAE,SAAS;EAClBC,SAAS,EAAE,SAAS;EACpBC,KAAK,EAAE,yBAAyB;EAChCC,WAAW,EAAE;AACf,CAAC,EACD;EACEJ,IAAI,EAAE,WAAW;EACjBC,OAAO,EAAE,SAAS;EAClBC,SAAS,EAAE,SAAS;EACpBC,KAAK,EAAE,yBAAyB;EAChCC,WAAW,EAAE;AACf,CAAC,EACD;EACEJ,IAAI,EAAE,MAAM;EACZC,OAAO,EAAE,SAAS;EAClBC,SAAS,EAAE,SAAS;EACpBC,KAAK,EAAE,0BAA0B;EACjCC,WAAW,EAAE;AACf,CAAC,EACD;EACEJ,IAAI,EAAE,UAAU;EAChBC,OAAO,EAAE,SAAS;EAClBC,SAAS,EAAE,SAAS;EACpBC,KAAK,EAAE,yBAAyB;EAChCC,WAAW,EAAE;AACf,CAAC,EACD;EACEJ,IAAI,EAAE,SAAS;EACfC,OAAO,EAAE,SAAS;EAClBC,SAAS,EAAE,SAAS;EACpBC,KAAK,EAAE,0BAA0B;EACjCC,WAAW,EAAE;AACf,CAAC,CACF;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAG;EAC9BJ,OAAO,EAAE,SAAS;EAAO;EACzBC,SAAS,EAAE,SAAS;EAAK;EACzBI,OAAO,EAAE,SAAS;EAAO;EACzBC,OAAO,EAAE,SAAS;EAAO;EACzBC,KAAK,EAAE,SAAS;EAAS;EACzBC,IAAI,EAAE,SAAS;EAAU;EACzBC,OAAO,EAAE,wBAAwB;EACjCC,YAAY,EAAE;AAChB,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAG;EAC3BC,OAAO,EAAE;IACPb,IAAI,EAAE,iBAAiB;IACvBC,OAAO,EAAE,SAAS;IAAO;IACzBC,SAAS,EAAE,SAAS;IACpBC,KAAK,EAAE,yBAAyB;IAChCC,WAAW,EAAE;EACf,CAAC;EACDU,OAAO,EAAE;IACPd,IAAI,EAAE,cAAc;IACpBC,OAAO,EAAE,SAAS;IAAO;IACzBC,SAAS,EAAE,SAAS;IACpBC,KAAK,EAAE,0BAA0B;IACjCC,WAAW,EAAE;EACf;AACF,CAAC;;AAED;AACA,OAAO,MAAMW,aAAa,GAAG;EAC3BC,QAAQ,EAAE,SAAS;EAAO;EAC1BC,QAAQ,EAAE,SAAS;EAAO;EAC1BC,OAAO,EAAE,SAAS;EAAQ;EAC1BX,OAAO,EAAE,SAAS;EAAQ;EAC1BY,MAAM,EAAE,SAAS;EAAS;EAC1BC,MAAM,EAAE,SAAS;EAAS;EAC1BC,UAAU,EAAE,SAAS;EAAK;EAC1BC,IAAI,EAAE,SAAS;EAAW;EAC1BC,MAAM,EAAE,SAAS;EAAS;EAC1BC,GAAG,EAAE,SAAS;EAAY;EAC1BC,OAAO,EAAE,SAAS,CAAQ;AAC5B,CAAC;;AAED;AACA,OAAO,MAAMC,yBAAyB,GAAIC,KAAa,IAAK;EAC1D,OAAO5B,wBAAwB,CAAC4B,KAAK,GAAG5B,wBAAwB,CAAC6B,MAAM,CAAC;AAC1E,CAAC;AAED,OAAO,MAAMC,sBAAsB,GAAIC,YAAoB,IAAK;EAC9D,IAAI,CAACA,YAAY,EAAE,OAAO/B,wBAAwB,CAAC,CAAC,CAAC;;EAErD;EACA,IAAIgC,IAAI,GAAG,CAAC;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,YAAY,CAACF,MAAM,EAAEI,CAAC,EAAE,EAAE;IAC5C,MAAMC,IAAI,GAAGH,YAAY,CAACI,UAAU,CAACF,CAAC,CAAC;IACvCD,IAAI,GAAI,CAACA,IAAI,IAAI,CAAC,IAAIA,IAAI,GAAIE,IAAI;IAClCF,IAAI,GAAGA,IAAI,GAAGA,IAAI,CAAC,CAAC;EACtB;EAEA,MAAMJ,KAAK,GAAGQ,IAAI,CAACC,GAAG,CAACL,IAAI,CAAC,GAAGhC,wBAAwB,CAAC6B,MAAM;EAC9D,OAAO7B,wBAAwB,CAAC4B,KAAK,CAAC;AACxC,CAAC;;AAED;AACA,OAAO,MAAMU,mBAAmB,GAAGA,CAAA,KAAM;EACvC,OAAO;IACLC,qBAAqB,EAAEvC,wBAAwB,CAAC6B,MAAM;IACtDW,gBAAgB,EAAExC,wBAAwB,CAACyC,GAAG,CAACC,KAAK,KAAK;MACvDzC,IAAI,EAAEyC,KAAK,CAACzC,IAAI;MAChBC,OAAO,EAAEwC,KAAK,CAACxC,OAAO;MACtBG,WAAW,EAAEqC,KAAK,CAACrC;IACrB,CAAC,CAAC,CAAC;IACHsC,YAAY,EAAE;MACZ7B,OAAO,EAAED,aAAa,CAACC,OAAO;MAC9BC,OAAO,EAAEF,aAAa,CAACE;IACzB,CAAC;IACD6B,YAAY,EAAE5B,aAAa;IAC3B6B,QAAQ,EAAEvC;EACZ,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMwC,iBAAiB,GAAG9C,wBAAwB,CAACyC,GAAG,CAAAM,EAAA,GAACL,KAAK,KAAK;EACtExC,OAAO,EAAEwC,KAAK,CAACxC,OAAO;EACtBC,SAAS,EAAEuC,KAAK,CAACvC,SAAS;EAC1BC,KAAK,EAAEsC,KAAK,CAACtC;AACf,CAAC,CAAC,CAAC;;AAEH;AAAA4C,GAAA,GANaF,iBAAiB;AAO9B,OAAO,MAAMG,eAAe,GAAGA,CAAA,KAAM;EACnCC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;EAC3CnD,wBAAwB,CAACoD,OAAO,CAAC,CAACV,KAAK,EAAEd,KAAK,KAAK;IACjDsB,OAAO,CAACC,GAAG,CAAC,GAAGvB,KAAK,GAAG,CAAC,KAAKc,KAAK,CAACzC,IAAI,KAAKyC,KAAK,CAACxC,OAAO,OAAOwC,KAAK,CAACrC,WAAW,EAAE,CAAC;EACtF,CAAC,CAAC;EAEF6C,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;EAClCD,OAAO,CAACC,GAAG,CAAC,YAAYtC,aAAa,CAACC,OAAO,CAACb,IAAI,KAAKY,aAAa,CAACC,OAAO,CAACZ,OAAO,GAAG,CAAC;EACxFgD,OAAO,CAACC,GAAG,CAAC,YAAYtC,aAAa,CAACE,OAAO,CAACd,IAAI,KAAKY,aAAa,CAACE,OAAO,CAACb,OAAO,GAAG,CAAC;EAExFgD,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;EAClCD,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEnC,aAAa,CAACC,QAAQ,CAAC;EAChDiC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEnC,aAAa,CAACE,QAAQ,CAAC;EAChDgC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEnC,aAAa,CAACR,OAAO,CAAC;EAC9C0C,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEnC,aAAa,CAACI,MAAM,CAAC;EAC5C8B,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEnC,aAAa,CAACK,MAAM,CAAC;AAC/C,CAAC;AAAC,IAAA0B,EAAA,EAAAC,GAAA;AAAAK,YAAA,CAAAN,EAAA;AAAAM,YAAA,CAAAL,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}